<?php
/** Subversion plugin for Gforge
 * Copyright 2003 Roland Mas <lolando@debian.org>
 * Copyright 2004 Roland Mas <roland@gnurandal.com> 
 *				The Gforge Group, LLC <http://gforgegroup.com/>
 * Based on the CVS plugin, which was derived from Gforge, which was
 * derived from Sourceforge
 *
 * This file is not part of Gforge
 *
 * This plugin, like Gforge, is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * GForge is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GForge; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  US
 */

require_once('common/include/User.class');

class SVNPlugin extends SCM {
	function SVNPlugin () {
		$this->SCM () ;
		$this->name = 'scmsvn';
		$this->text = 'SVN';
		$this->hooks[] = 'scm_page';
		$this->hooks[] = 'scm_admin_update';
		$this->hooks[] = 'scm_admin_page';
// to be revised		
// 		$this->hooks[] = "scm_stats";
// 		$this->hooks[] = "group_approved";
		$this->hooks[] = 'scm_plugin';

		require_once('plugins/scmsvn/config.php') ;
		
		$this->default_svn_server = $default_svn_server ;
		$this->enabled_by_default = $enabled_by_default ;
		$this->use_ssh = $use_ssh;
		$this->use_dav = $use_dav;
		$this->use_ssl = $use_ssl;
		$this->svn_root = $svn_root;

		$this->register () ;
	}

	function CallHook ($hookname, $params) {
		global $Language, $HTML ;
		
		switch ($hookname) {
		case 'scm_page':
			$group_id = $params['group_id'] ;
			$this->display_scm_page ($group_id) ;
			break ;
		case 'scm_admin_update':
			$this->scm_admin_update ($params) ;
			break ;
		case 'scm_admin_page':
			$this->display_scm_admin_page ($params) ;
			break ;
		case 'scm_stats':
			$this->display_stats ($params) ;
			break;
// 		case "group_approved":
// 			$this->group_approved ($params) ;
// 			break;
		case 'scm_plugin':
			$scm_plugins=& $params['scm_plugins'];
			$scm_plugins[]=$this->name;
			break;
		default:
			// Forgot something
		}
	}

	function display_scm_page ($group_id) {
		global $Language, $HTML ;

		$project =& group_get_object($group_id);
		if (!$project || !is_object($project)) {
			return false;
		} elseif ($project->isError()) {
			return false;
		}

		if ($project->usesPlugin ($this->name)) {

			// SVN browser links must be displayed if
			// project enables anon SVN or if logged-in
			// user is a member of the group
			$displaySvnBrowser = $project->enableAnonSCM();
			if(session_loggedin()) {
				$perm =& $project->getPermission(session_get_user());
				if ($perm && is_object($perm) && !$perm->isError() && $perm->isMember()) {
					$displaySvnBrowser = true;
				}
			}

			// ######################## Table for summary info
			?>
			<table width="100%">
			<tr valign="top">
				<td width="65%">
				<?php
				print $Language->getText('plugin_scmsvn','documentation');

				// ######################## Anonymous SVN Instructions
				if ($project->enableAnonSCM()) {
					print $Language->getText('plugin_scmsvn', 'anonsvn');
					print '<p>';
					if ($this->use_ssh) {
						print '<tt>svn checkout svn://' . $project->getSCMBox(). '/'. $this->svn_root .'/'. $project->getUnixName() .'</tt>';
					}
					if ($this->use_dav) {
						print '<tt>http'.(($this->use_ssl) ? 's' : '').'://' . $project->getSCMBox(). '/'. $this->svn_root .'/'. $project->getUnixName() .'</tt>';
					}
					print '</p>';
				}
	
				// ######################## Developer Access
				if ($this->use_ssh) {
					echo $Language->getText('plugin_scmsvn', 'devsvnssh');
					print '<p><tt>svn checkout svn+ssh://<i>'.$Language->getText('plugin_scmcvs', 'developername').'</i>@' . $project->getSCMBox() . '/'. $this->svn_root .'/'. $project->getUnixName().'</tt></p>' ;
				}
				if ($this->use_dav) {
					echo $Language->getText('plugin_scmsvn', 'devsvndav');
					print '<p><tt>svn checkout --username <i>'.$Language->getText('plugin_scmcvs', 'developername').'</i> http'.(($this->use_ssl) ? 's' : '').'://'. $project->getSCMBox() .'/'. $this->svn_root .'/'.$project->getUnixName().'</tt></p>' ;
				}

				// ######################## SVN Snapshot
				if ($displaySvnBrowser) {
					print '
						<p>
						[<a href="/snapshots.php?group_id='.$group_id.'">'.$Language->getText('plugin_scmsvn', 'download_snapshot').'</a>]
						</p>';
				}
				?>
				</td>

				<td width="35%" valign="top">
				<?php
				// ######################## SVN Browsing
				echo $HTML->boxTop($Language->getText('plugin_scmsvn', 'history'));
				echo $this->display_stats(array('group_id'=>$group_id)).'<p>';
				if ($displaySvnBrowser) {
					echo $Language->getText('plugin_scmsvn', 'browsetree');
					echo '<p>[<a href="http://' . $project->getSCMBox() . '/plugins/scmsvn/cgi-bin/viewcvs.cgi?root=' . $project->getUnixName() . '">' . $Language->getText('plugin_scmsvn', 'browseit') . '</a>]</p>';
				}
				echo $HTML->boxBottom();
				?>
				</td>
			</tr>
			</table>
			<?php
		}
	}

	function scm_admin_update ($params) {
		$group =& group_get_object($params['group_id']);
		if ( $group->usesPlugin ( $this->name ) ) {
			if ($params['scmsvn_enable_anon_svn']) {
				$group->SetUsesAnonSCM(true);
			} else {
				$group->SetUsesAnonSCM(false);
			}
		}
	}

	// This function is used to render checkboxes below
	function c($v) {
		if ($v) {
			return 'checked';
		} else {
			return '';
		}
	}

	function display_scm_admin_page ($params) {
		$group =& group_get_object($params['group_id']);
		global $Language ;
		if ( $group->usesPlugin ( $this->name ) ) {
			?>
			<p><input type="checkbox" name="scmsvn_enable_anon_svn" value="1" <?php echo $this->c($group->enableAnonSCM()); ?> ><strong><?php echo $Language->getText('plugin_scmsvn', 'enable_anonymous_svn') ?></strong></p>
			<?php
		}
	}

	function display_stats ($params) {
		global $Language ;
		$group_id = $params['group_id'] ;
		$result = db_query("
			SELECT commits, adds
			FROM plugin_scmsvn_stats
			WHERE group_id='$group_id'");
		$commit_num = db_result($result,0,0);
		$add_num	= db_result($result,0,1);
		if (!$commit_num) {
			$commit_num=0;
		}
		if (!$add_num) {
			$add_num=0;
		}
		echo ' (SVN: '.$Language->getText('project_home','cvs_commits',array(number_format($commit_num,0),number_format($add_num,0))).')';
	}

	// Not used at the moment and probably useless
	function group_approved ($params) {
		$group_id = $params['group_id'] ;
		
		$project =& group_get_object($group_id);
		if (!$project || !is_object($project)) {
			return false;
		} elseif ($project->isError()) {
			return false;
		}
		if ($this->enabled_by_default) {
			$project->setPluginUse('scmsvn', 1) ;
		} else {
			$project->setPluginUse('scmsvn', 0) ;
		}
		return true;
	}
}

// Local Variables:
// mode: php
// c-file-style: "bsd"
// End:

?>
