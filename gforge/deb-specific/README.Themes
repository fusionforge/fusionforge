Here is a short Howto to explain how Themes
are working and how to make a new one

HOW DOES THEMING WORKS?
-----------------------
Themes are done overloading the Layout class you can find 
in /usr/lib/sourceforge/www/include/

This is done by the theme_sysinit function in 
www/include/theme.php by the line 
$HTML = new Theme();
The theme_sysinit function is called in www/include/pre.php
The Theme class is included from 
$GLOBALS['sys_themeroot'].$GLOBALS['sys_theme'].'/Theme.class'
If sys_theme is not defined it is set to forged

So this means that to write a theme you "just" have to create 
a correct www/themes/<your theme>/Theme.class
and to add the proper record in the database.
The add can be done with Roland sf-register-theme tool
or in admin web interface

The simplest you can find it at www/themes/forged/Theme.class

class Theme extends Layout {
        function Theme() {
	// Parent constructor
	$this->Layout();
	}
}

but it does nothing

HOW DO I MAKE A THEME?
---------------------
A simple one is the savannah one that just change some colors
The big work is to make new icons found in www/themes/forged/images/

class Theme extends Layout {

	/**
	 * Theme() - Constructor
	 */
	function Theme() {
		// Parent constructor
		$this->Layout();

		// The root location for images
		$this->imgroot = 'themes/savannah/images/';

		// The content background color
		$this->COLOR_CONTENT_BACK= '#EAC164';

		// The background color
		$this->COLOR_BACK= '#FFFFFF';

		// The primary light background color
		$this->COLOR_LTBACK1= '#FFF4A8';

		// The secondary light background color
		$this->COLOR_LTBACK2= '#FFF4A8';

		// The HTML box title color
		$this->COLOR_HTMLBOX_TITLE = '#DAD5D7';

		// The HTML box background color
		$this->COLOR_HTMLBOX_BACK = '#FFF4A8';

		// Font Face Constants
		// The content font
		$this->FONT_CONTENT = 'Helvetica';
		// The HTML box title font
		$this->FONT_HTMLBOX_TITLE = 'Helvetica';
		// The HTML box title font color
		$this->FONTCOLOR_HTMLBOX_TITLE = '#333333';
		// The content font color
		$this->FONTCOLOR_CONTENT = '#333333';
		//The smaller font size
		$this->FONTSIZE_SMALLER='x-small';
		//The smallest font size
		$this->FONTSIZE_SMALLEST='xx-small';
		//The HTML box title font size
		$this->FONTSIZE_HTMLBOX_TITLE = 'small';

	}
}

To do more you can replace all the Layout.class functions by yours
This is done a lot in www/themes/classic/Themes.class
a small example of this is for the tab_entry function in debian Theme
that allow you to customize the menu in e.g projects/siteadmin/ url

	/**
	 *	tab_entry() - Prints out the a themed tab, used by project_tabs
	 *
	 *	@param	string	Is the URL to link to
	 *	@param	string	Us the image to use (if the theme uses it)
	 *	@param	string	Is the title to use in the link tags
	 *	@param	bool	Is a boolean to test if the tab is 'selected'
	 */
	function tab_entry($url='http://localhost/', $icon='', $title='Home', $selected=0) {
		print '
		<A ';
		if ($selected){
			print 'class=tabselect ';
		} else {
			print 'class=tabs ';
		}
		print 'href="'. $url .'">';
		print html_image($this->imgroot . $icon,'24','24',array('alt'=>"$title",'border'=>($selected?'1':'0')));
		print '</A>';
	}
}

I WANT TO CUSTOMIZE ICONS
-------------------------

Icons are not customizable by default
I started to enable this like this in a non regressive way
for icons in the project page (code is at www/include/project_home.php).
I added 
var $imgproj = 'images/ic/'; in Layout.class
and changed html_image functions call like this:
html_image($imgproj . "manual16c.png",'15','15',array('alt'=>'Release Notes'));

by default images are searched in the original place, but you can now change 
this place just doing e.g. like it's done in debian theme
$this->imgproj = 'themes/debian/images/proj/';
in the class constructor

All ancient themes, will continue to work like they were

Just proceed in the same way for other place in the code, where
you want to customize icons and send us patch :)
