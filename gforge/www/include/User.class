<?php
//
// SourceForge: Breaking Down the Barriers to Open Source Development
// Copyright 1999-2000 (c) The SourceForge Crew
// http://sourceforge.net
//	    
// $Id: User.class,v 1.27 2000/12/14 02:08:29 tperdue Exp $


/*

	User object by Tim Perdue, October 11, 2000

	Sets up database results and preferences for a user and abstracts this info

	GENERALLY YOU SHOULD NEVER INSTANTIATE THIS OBJECT DIRECTLY
	USE user_get_object() to instantiate properly - this will pool the objects
	and increase efficiency

*/


/**
 *
 *  You can now optionally pass in a db result
 *  handle. If you do, it re-uses that query
 *  to instantiate the objects
 *
 *  IMPORTANT! That db result must contain all fields
 *  from users table or you will have problems
 *
 */
$USER_OBJ=array();

/**
 *
 *  user_get_object is useful so you can pool user objects/save database queries
 *  You should always use this instead of instantiating the object directly 
 *
 *  @param user_unix_name required
 *  @param res result set handle ("SELECT * FROM USERS WHERE user_id=xx")
 *  @returns a user object or false on failure
 *
 */

function &user_get_object_by_name($user_name,$res=false) {
	if (!$res) {
    		$res=db_query("SELECT * FROM users WHERE user_name='$user_name'");
	}
	return user_get_object(db_result($res,0,'user_id'),$res);
}

/**
 *
 *  user_get_object is useful so you can pool user objects/save database queries
 *  You should always use this instead of instantiating the object directly 
 *
 *  @param user_id required
 *  @param res result set handle ("SELECT * FROM USERS WHERE user_id=xx")
 *  @returns a user object or false on failure
 *
 */

function &user_get_object($user_id,$res=false) {
	//create a common set of group objects
	//saves a little wear on the database
	
	//automatically checks group_type and 
	//returns appropriate object
	
	global $USER_OBJ;
	if (!isset($USER_OBJ["_".$user_id."_"])) {
		if ($res) {
			//the db result handle was passed in
		} else {
			$res=db_query("SELECT * FROM users WHERE user_id='$user_id'");
		}
		if (!$res || db_numrows($res) < 1) {
			$USER_OBJ["_".$user_id."_"]=false;
		} else {
			$USER_OBJ["_".$user_id."_"]= new User($user_id,$res);
		}
	}
	return $USER_OBJ["_".$user_id."_"];
}

class User extends Error {
	//associative array of data from db
	var $data_array;
	
	var $user_id;
	
	//database result set handle
	var $db_result;

	//is this person a site super-admin?
	var $is_super_user;

	//is this person the logged in user?
	var $is_logged_in;

	//array of preferences
	var $user_pref;

	/**
	 *	User($id,$res) - CONSTRUCTOR - GENERALLY DON'T USE THIS
	 *
	 *	instead use the user_get_object() function call
	 *	@param $id required - user_id
	 *	@param $res optional - database result set
	 */
	function User($id,$res=false) {
		$this->Error();
		$this->user_id=$id;
		if (!$res) {
			$this->db_result=db_query("SELECT * FROM users WHERE user_id='$id'");
		} else {
			$this->db_result=$res;
		}
		if (db_numrows($this->db_result) < 1) {
			//function in class we extended
			$this->setError('User Not Found');
			$this->data_array=array();
		} else {
			//set up an associative array for use by other functions
			
			db_reset_result($this->db_result);
			
			$this->data_array=db_fetch_array($this->db_result);
		}
		$this->user_id=$this->data_array['user_id'];
		$this->is_super_user=false;
		$this->is_logged_in=false;
	}
	
	
	/**
	 *	getData() - Return database result handle for direct access
	 *
	 *	Generally should NOT be used - here for supporting deprecated group.php
	 *	@returns database result set handle
	 */
	function getData() {
		db_reset_result($this->db_result);
		return $this->db_result;
	}

	/**
	 *	refreshUserData() - May need to refresh database fields
	 *
	 *	if an update occurred and you need to access the updated info
	 */
	function refreshUserData() {
		$this->db_result=db_query("SELECT * FROM users WHERE user_id='". $this->getUserId() ."'");
		$this->data_array=db_fetch_array($this->db_result);
	}
	
	/**
	 *	getUserId() - Simply return the user_id for this object
	 *
	 *	@returns this user's user_id number
	 */
	function getUserId() {
		return $this->user_id;
	}

	/**
	 *	getStatus()
	 *
	 *	Statuses include P,A,D
	 *	@returns this user's status flag
	 */
	function getStatus() {
		return $this->data_array['status'];
	}

	/**
	 *	isActive()
	 *
	 *	Database field status of 'A' returns true
	 *	@returns true or false
	 */
	function isActive() {
		if ($this->getStatus()=='A') {
			return true;
		} else {
			return false;
		}
	}

	/**
	 *	getUnixStatus() - Status of activation of unix account
	 *
	 *	@returns (N)one, (A)ctive, (S)uspended or (D)eleted
	 */
	function getUnixStatus() {
		return $this->data_array['unix_status'];
	}

	/**
	 *	setUnixStatus() - Sets status of activation of unix account
	 *
	 *	@returns true/false
	 */
	function setUnixStatus($status) {
		$res=db_query("UPDATE users ".
			    "SET unix_status='$status' ".
			    "WHERE user_id='". $this->getUserId()."'");

		if (!$res) {
			$this->setError('ERROR - Could Not Update User Unix Status');
			return false;
		} else {
			$this->data_array['unix_status']=$status;
			return true;
		}
	}

	/**
	 *	getUnixName()
	 *
	 *	@returns this user's unix/login name
	 */
	function getUnixName() {
		return strtolower($this->data_array['user_name']);
	}

	/**
	 *	getUnixPasswd()
	 *
	 * 	@returns this user's unix crypted passwd
	 */
	function getUnixPasswd() {
		return $this->data_array['unix_pw'];
	}

	/**
	 *	getMD5Passwd()
	 *
	 *	@returns this user's MD5-crypted passwd
	 */
	function getMD5Passwd() {
		return $this->data_array['user_pw'];
	}

	/**
	 *	getEmail()
	 *
	 *	@returns this user's email address
	 */
	function getEmail() {
		return $this->data_array['email'];
	}

	/**
	 *	setEmail()
	 *
	 *	@sets user's email address
	 */
	function setEmail($email) {
		$res=db_query("UPDATE users ".
			    "SET email='$email' ".
			    "WHERE user_id='". $this->getUserId()."'");

		if (!$res) {
			$this->setError('ERROR - Could Not Update User Email');
			return false;
		} else {
			$this->data_array['email']=$email;
			return true;
		}
	}

	/**
	 *	getRealName()
	 *
	 *	@returns this user's timezone setting
	 */
	function getRealName() {
		return $this->data_array['realname'];
	}

	/**
	 *	getAddDate()
	 *
	 *	@returns this user's unix time since account was opened
	 */
	function getAddDate() {
		return $this->data_array['add_date'];
	}

	/**
	 *	getTimeZone()
	 *
	 *	@returns this user's timezone setting
	 */
	function getTimeZone() {
		return $this->data_array['timezone'];
	}

	/**
	 *	getShell()
	 *
	 *	@returns this user's preferred shell
	 */
	function getShell() {
		return $this->data_array['shell'];
	}

	/**
	 *	setShell()
	 *
	 *	@sets user's preferred shell
	 */
	function setShell($shell) {
		if (!sf_ldap_user_change_attribute($this->getUserId(),"loginShell",$shell)) {
		    $this->setError(sf_ldap_get_error_msg());
		    return false;
		}
		
		$res=db_query("UPDATE users ".
			    "SET shell='$shell' ".
			    "WHERE user_id='". $this->getUserId()."'");

		if (!$res) {
			$this->setError('ERROR - Could Not Update User Unix Shell');
			return false;
		} else {
			$this->data_array['shell']=$shell;
			return true;
		}
	}

	/**
	 *	getUnixUid()
	 *
	 *	@returns this user's unix_uid
	 */
	function getUnixUID() {
		return $this->data_array['unix_uid'];
	}

	/**
	 *	getLanguage()
	 *
	 *	@returns this user's language_id
	 */
	function getLanguage() {
		return $this->data_array['language_id'];
	}

	/**
	 *	setLoggedIn($val) - Really only used by session code
	 *
	 * 	@param $val optional
	 */
	function setLoggedIn($val=true) {
		$this->is_logged_in=$val;
		if ($val) {
			//if this is the logged in user - 
			//see if they are a super user
			$sql="SELECT * FROM user_group ".
				"WHERE user_id='". $this->getUserId() ."' AND group_id='1' AND admin_flags='A'";
			$result=db_query($sql);
			if (!$result || db_numrows($result) < 1) {
				$this->is_super_user=false;
			} else {
				$this->is_super_user=true;
			}
		}
	}

	/**
	 *	isLoggedIn()
	 *
	 *	@returns true or false
	 */
	function isLoggedIn() {
		return $this->is_logged_in;
	}

	/**
	 *	isSuperUser()
	 *
	 *	@returns true or false
	 */
	function isSuperUser() {
		return $this->is_super_user;
	}

	/**
	 *	setPreference($preference_name,$value)
	 *
	 *	@param $preference_name the unique field name for this preference
	 *	@param $value the value you are setting this preference to
	 *	@returns true or false on failure
	 */
	function setPreference($preference_name,$value) {
		$preference_name=strtolower(trim($preference_name));
		$result=db_query("UPDATE user_preferences SET preference_value='$value',set_date='". time() ."' ".
			"WHERE user_id='". $this->getUserId() ."' ".
			"AND preference_name='$preference_name'");
		if (db_affected_rows($result) < 1) {
			//echo db_error();
			$result=db_query("INSERT INTO user_preferences (user_id,preference_name,preference_value,set_date) ".
				"VALUES ('". $this->getUserId() ."','$preference_name','$value','". time() ."')");
			return $result;
		}
	}

	/**
	 *	getPreference($preference_name)
	 *
	 *	@param $preference_name the unique field name for this preference
	 *	@returns the preference or false on failure
	 */
	function getPreference($preference_name) {
		$preference_name=strtolower(trim($preference_name));
		/*
			First check to see if we have already fetched the preferences
		*/
		if ($this->user_pref) {
			//echo "\n\nPrefs were fetched already";
			if ($this->user_pref["$preference_name"]) {
				//we have fetched prefs - return part of array
				return $this->user_pref["$preference_name"];
			} else {
				//we have fetched prefs, but this pref hasn't been set
				return false;
			}
		} else {
			//we haven't returned prefs - go to the db
			$result=db_query("SELECT preference_name,preference_value FROM user_preferences ".
				"WHERE user_id='". $this->getUserId() ."'");
			if (db_numrows($result) < 1) {
			//	echo "\n\nNo Prefs Found";
				return false;
			} else {
				//$pref=array();
				//iterate and put the results into an array
				for ($i=0; $i<db_numrows($result); $i++) {
					$pref[db_result($result,$i,'preference_name')]=db_result($result,$i,'preference_value');
				}
				$this->user_pref=$pref;
				if ($this->user_pref["$preference_name"]) {
					//we have fetched prefs - return part of array
					return $this->user_pref["$preference_name"];
				} else {
					//we have fetched prefs, but this pref hasn't been set
					return false;
				}
			}
		}
	}

	/**
	 *	setUpUnixUID() - Sets up this user's unix_uid for shell access
	 *
	 *	@returns true on success false on failure
	 */
	function setUpUnixUID() {
		global $sys_database_type;
		if ($this->getUnixUID() > 1) {
			//
			//	already have unix_uid
			//
			return true;
		}
		//get the next unix uid

		/*
			hack to simulate sequences in mysql
		*/
		if ($sys_database_type=='mysql') {
			$res=db_query("INSERT INTO unix_uids (id) values ('')");
			$unixid=db_insertid($res,'unix_uids','id');
			db_free_result($res);
		} else {
			$res=db_query("SELECT nextval('unix_uid_seq')");
			$unixid=db_result($res,0,0);
			db_free_result($res);
		}
		if (!$unixid) {
			$this->setError('ERROR - Could Not Get Next Unix UID');
			return false;
		} else {
			$res=db_query("UPDATE users ".
			"SET unix_status='A',unix_uid='$unixid' ".
			"WHERE user_id='". $this->getUserId()."'");

			if (!$res || db_affected_rows($res) < 1) {
				$this->setError('ERROR - Could Not Update User Account Flags');
				return false;
			} else {
				$this->data_array['unix_uid']=$unixid;
				return true;
			}
		}
	}
	
	/**
	 *	setPasswd($passwd) - Changes user's password
	 *
	 *	@returns true on success false on failure
	 */
	function setPasswd($passwd) {
		$unix_pw=account_genunixpw($passwd);
		
		if (!sf_ldap_user_set_attribute($this->getUserId(),"userPassword",'{crypt}'.$unix_pw)) {
		    $this->setError(sf_ldap_get_error_msg());
		    return false;
		}
		
		$res=db_query("UPDATE users SET user_pw='" . md5($passwd) . "',"
		. "unix_pw='" . $unix_pw . "' WHERE "
		. "user_id=" . $this->getUserId());

		if (!$res || db_affected_rows($res) < 1) {
			$this->setError('ERROR - Could Not Change User Password');
			return false;
		} else {
			return true;
		}
	}

}


/*


	Session wrapping code


*/

/**
 *	user_getid()
 *	Get user_id of logged in user
 */

function user_getid() {
	global $G_SESSION;
	if ($G_SESSION) {
		return $G_SESSION->getUserId();
	} else {
		return false;
	}
}

/**
 *	user_isloggedin()
 *	See if user is logged in
 */
function user_isloggedin() {
	global $G_SESSION;

	if ($G_SESSION) {
		return $G_SESSION->isLoggedIn();
	} else {
		return false;
	}
}

/**
 *	user_is_super_user()
 *	Check if logged in user is super user
 */
function user_is_super_user() {
	global $G_SESSION;
	if ($G_SESSION) {
		return $G_SESSION->isSuperUser();
	} else {
		return false;
	}
}


/*




		EVERYTHING BELOW HERE IS DEPRECATED


		DO NOT USE FOR ANY NEW CODE



*/



//DEPRECATED
function user_ismember($group_id,$type=0) {
	if (!user_isloggedin()) {
		return false;
	}

	$project=&group_get_object($group_id);
	
	$type=strtoupper($type);
	
	switch ($type) {
		case 'B2' : {
			//bug admin
			return $project->userIsBugAdmin();
			break; 
		}
		case 'P2' : {
			//pm admin
			return $project->userIsPMAdmin();
			break; 
		}
		case 'C2' : {
			//patch admin
			return $project->userIsPatchAdmin();
			break; 
		}
		case 'F2' : {
			//forum admin
			return $project->userIsForumAdmin();
			break; 
		}
		case 'S2' : {
			//support admin
			return $project->userIsSupportAdmin();
			break; 
		}
		case '0' : {
			//just in this group
			return $project->userIsMember();
			break;
		}
		case 'A' : {
			//admin for this group
			return $project->userIsAdmin();
			break;
		}
		case 'D1' : {
			//document editor
			return $project->userIsDocEditor();
			break;
		}
		case 'R1' : {
			//release technician
			return $project->userIsReleaseTechnician();
			break;
		}
		default : {
			//fubar request
			return false;
		}
	}
	return false;
}

//deprecated
function user_getname($user_id = false) {
	// use current user if one is not passed in
	if (!$user_id) {
		if (user_isloggedin()) {
			$user=&user_get_object(user_getid());
			if ($user) {
				return $user->getUnixName();
			} else {
				return 'Error getting user';
			}
		} else {
			return 'No User Id';
		}
	} else {
		$user=&user_get_object($user_id);
		if ($user) {
			return $user->getUnixName();
		} else {
			return 'Invalid User';
		}
	}
}

//deprecated
function user_getrealname($user_id) {
	$user=&user_get_object($user_id);
	if ($user) {
		return $user->getUnixName();
	} else {
		return 'Invalid User';
	}
}

//deprecated
function user_get_result_set($user_id) {
	$user=&user_get_object($user_id);
	if ($user) {
		return $user->getData();
	} else {
		return false;
	}
}

//deprecated
function user_get_result_set_from_unix($user_name) {
	return db_query("SELECT * FROM users WHERE user_name='$user_name'");
}

//deprecated
function user_get_timezone() {
	if (user_isloggedin()) {
		$user=&user_get_object(user_getid());
		return $user->getTimeZone();
	} else {
		return false;
	}
}

//deprecated
function user_get_language() {
	if (user_isloggedin()) {
		$user=&user_get_object(user_getid());
		return $user->getLanguage();
	} else {
		return false;
	}
}

//deprecated
function &user_set_preference($preference_name,$value) {
	if (user_isloggedin()) {
		$user=&user_get_object(user_getid());
		//echo "\n\nSetting Preference: ";
		//$success=$user->setPreference($preference_name,$value);
		//echo $success;
		//return $success;
		return $user->setPreference($preference_name,$value);
	} else {
		return false;
	}
}

//deprecated
function &user_get_preference($preference_name) {
	if (user_isloggedin()) {
		$user=&user_get_object(user_getid());
		return $user->getPreference($preference_name);
	} else {	
		return false;
	}
}

?>
