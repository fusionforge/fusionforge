<?php
//
// SourceForge: Breaking Down the Barriers to Open Source Development
// Copyright 1999-2000 (c) The SourceForge Crew
// http://sourceforge.net
//
// $Id: frs.class,v 1.6 2000/12/13 19:00:11 dbrogdon Exp $

/**
 * Base class for FRS (File Release System) and QRS (Quick-file Release System)
 *
 * @author Darrell Brogdon <dbrogdon@valinux.com>
 */
class FRS extends Error {

	// {{{ Properties

	var $group_id   = "";
	var $package_id = "";
	var $release_id = "";
	var $project_id = "";
	var $file_id    = "";
	var $file_type  = "";
	var $proc_type  = "";

	// }}}

	// {{{ Constructor

	/**
	 * Sets the value of Class vars if the function arguments exist.
	 *
	 * @param $group_id int The group ID
	 * @param $package_id int The package ID
	 * @param $release_id int The release ID
	 */
	function FRS($group_id)
	{
		$this->group_id 	= $group_id;
	}

	// }}}
	// {{{ frsAddChangeLog

	/**	
	 * Add an entry to the change log
	 * 
	 * @param $change_log_text int The text that is to be added to the change log
	 * @returns True on success, False on error
	 */
	function frsAddChangeLog($change_log_text)
	{
		if( !$this->frsVerifyRelease($release_id, $package_id) ) {
			$this->setError(' FRS Add Change Log Failed: ' . $this->getErrorMessage());
			return false;
		}

		$res=db_query("UPDATE 
							frs_release 
					   SET 
					   		changes='$change_log_text' 
					   WHERE 
					   		release_id='$this->release_id'");
		if (!$res) {
			$this->setError(' FRS Add Change Log Failed ');
			return false;
		}

		return true;
	}

	// }}}
	// {{{ frsAddFile

	/**
	 * Add a new file
	 *
	 * @param $release_time int Time of the release
	 * @param $filename string The name of the file to add
	 * @param $release_id int The ID of the release this file to which this file is associated
	 * @param $file_size int The file size
	 * @param $post_date int THe post date
	 * @returns True on success, False on error
	 */
	function frsAddFile($release_time, $filename, $file_size, $post_date, $release_id, $package_id, $type_id, $proc_id)
	{
		if( !$this->frsVerifyRelease($release_id, $package_id) ) {
			$this->setError(' FRS Add File Failed: ' . $this->getErrorMessage());
			return false;
		}

		//move the file to a its project page using a setuid program
		exec ("/usr/local/bin/fileforge $filename ".$group_unix_name, $exec_res);
		if ($exec_res[0]) {
			$this->setError("FRS Add File Failed: $exec_res[0], $exec_res[1]");
			return false;
		}

		$res=db_query("INSERT INTO frs_file (release_time,filename,release_id,type_id,processor_id,file_size,post_date) VALUES (" .
					  "'$release_time'," .
					  "'$filename'," .
					  "'$release_id'," .
					  "'$type_id'," .
					  "'$proc_id'," .
					  "'$file_size'," .
					  "'$post_date') ");
		if (!$res) {
			$this->setError(' FRS Add File Failed: ' . db_error());
			return false;
		}

		return true;
	}

	// }}}
	// {{{ frsAddRelease

	/**
	 * Add a new release
	 *
	 * @param $release_name string The name of the new release
	 * @param $package_id int The ID of the package with which this release is to be associated
	 * @returns Database result ID
	 */
	function frsAddRelease($release_name, $package_id, $notes="", $changes="")
	{
		if( !$this->frsVerifyPackage($package_id) ) {
			$this->setError(' FRS Add Release Failed: ' . $this->getErrorMessage());
			return false;
		}

		$res=db_query("INSERT INTO frs_release (package_id,name,notes,changes,status_id,release_date,released_by) ".
					  "VALUES ('$package_id','$release_name','$notes','$changes','1','". time() ."','". user_getid() ."')");
		
		if (!$res) {
			$this->setError(' FRS Add Release Failed  ');
			return false;
		} else {
			return db_insertid($res,'frs_release','release_id');
		}
	}

	// }}}
	// {{{ frsAddNotes

	/**
	 * Add a new release note
	 *
	 * @param $notes_text string The text of the release notes
	 * @returns True on success, False on error
	 */
	function frsAddNotes($notes_text, $release_id)
	{
		if( !$this->frsVerifyRelease($release_id, $package_id) ) {
			$this->setError(' FRS Add Notes Failed: ' . $this->getErrorMessage());
			return false;
		}

		$res=db_query("UPDATE 
							frs_release 
					   SET 
					   		notes='$notes_text' 
					   WHERE 
					   		release_id='$release_id'");
		if (!$res) {
			$this->setError(' FRS Add Notes Failed ');
			return false;
		}

		return true;
	}

	// }}}
	// {{{ frsChangePackageName

	/**
	 * Change a package name
	 *
	 * @param $new_name string The new name to give to a package
	 * @param $package_id int The package ID for which to change the name
	 * @returns True on success, False on error
	 */
	function frsChangePackageName($new_name, $package_id)
	{
		if( !$this->frsVerifyPackage($package_id) ) {
			$this->setError(' FRS Change Package Name Failed: ' . $this->getErrorMessage());
			return false;
		}

		$res=db_query("UPDATE 
							frs_package 
					   SET 
					   		name='$new_name' 
					   WHERE 
					   		package_id='$package_id' 
					   AND 
					   		group_id='$this->group_id");
		if (!$res) {
			$this->setError(' FRS Change Package Name Failed ');
			return false;
		}

		return true;
	}

	// }}}
	// {{{ frsChangeFile

	/**
	 * Change a file
	 *
	 * @param $release_time int Time of the release
	 * @param $type_id int ID of the file type
	 * @param $processor_id int ID of the processor type
	 * @param $file_id int ID of the file to change
	 * @param $release_id int ID of the release to which this file is related
	 * @returns True on success, False on error
	 */
	function frsChangeFile($release_time, $type_id, $processor_id, $file_id, $release_id, $package_id)
	{
		if( !$this->frsVerifyRelease($release_id, $package_id) ) {
			$this->setError('FRS Change File Failed: ' . $this->getErrorMessage());
			return false;
		}

		$date_list = split("-",$release_time,3);
		$unix_release_time = mktime(0,0,0,$date_list[1],$date_list[2],$date_list[0]);
		$res=db_query("UPDATE 
							frs_file 
					   SET 
					   		release_id='$release_id',
					  		release_time='$unix_release_time',
					  		type_id='$type_id',
					  		processor_id='$processor_id' 
					   WHERE 
					   		file_id='$file_id'");
		if (!$res) {
			$this->setError(' FRS Change File Failed ');
			return false;
		}

		return true;
	}
	 
	// }}}
	// {{{ frsChangeFileRelease

	/**
	 * Change a file's release
	 *
	 * @param $file_id int The ID of the file
	 * @param $release_id int The ID of the release
	 * @returns True on success, False on error
	 */
	function frsChangeFileRelease($file_id, $release_id)
	{
    	if( !$this->frsVerifyRelease($release_id, $package_id) ) {
			$this->setError(' FRS Change File Release Failed: ' . $this->getErrorMessage());
			return false;
		} 

		if( !$this->frsVerifyFile($file_id) ) {
			$this->setError(' FRS Change File Release Failed: ' . $this->getErrorMessage());
			return false;
		}

		$res=db_query("UPDATE 
							frs_file 
					   SET 
					   		release_id='$release_id' 
					   WHERE 
					   		file_id='$file_id'");
		if (!$res) {
			$this->setError(' FRS Change File Release Failed ');
			return false;
		}

		return true;
	}

	// }}}
	// {{{ frsChangeRelease

	/**
	 * Change a release
	 *
	 * @param $release_date int The date of the release
	 * @param $release_name string The name of the release
	 * @param $preformatted int The flag to store notes and changes as pre-formatted text
	 * @param $status_id int The status ID of the release
	 * @param $package_id int The package ID to which the release is related
	 * @param $notes string The release notes text
	 * @param $changes string The change log text
	 * @param $release_id int The ID of the release
	 */
	function frsChangeRelease($release_date, $release_name, $preformatted, $status_id, $notes, $changes, $package_id, $release_id)
	{
		if( !$this->frsVerifyRelease($release_id, $package_id) ) {
			$this->setError(' FRS Change Release Failed: ' . $this->getErrorMessage());
			return false;
		}

		// Make sure the date format is correct.
		// If so then turn it into a timestamp.
		if (!$this->frsVerifyReleaseDate($release_date)) {
			$this->setError(' FRS Change Release Failed: ' . $this->getErrorMessage());
			return false;
		} else {
			$date_expl = explode("-",$release_date);
		    $release_date = mktime(0,0,0,$date_expl[1],$date_expl[2],$date_expl[0]);
		}
		
		$res=db_query("UPDATE 
							frs_release 
					   SET 
					   		release_date='$release_date',
					  		name='$release_name',
					  		preformatted='$preformatted',
		              		status_id='$status_id',
					  		package_id='$package_id',
					  		notes='$notes',
					  		changes='$changes'
					  WHERE 
					  		release_id='$release_id'");
		if (!$res) {
			$this->setError(' FRS Change Release Failed ');
			return false;
		} 

		return true;
	}

	// }}}
	// {{{ frsGetReleaseMonitors

	/**
	 * Get a count of the users that are monitoring a release
	 *
	 * @param $package_id int ID of the package that users are monitoring
	 * @returns A count of the number of users monitoring $package_id
	 */
	function frsGetReleaseMonitors($package_id)
	{
		$result=db_result(db_query("SELECT count(*) from filemodule_monitor WHERE filemodule_id='$package_id'"),0,0);

		return $result;
	}

	// }}}
	// {{{ frsGetFileList
	
	/**
	 * Get an array of all available files
	 *
	 * @returns An array of the files in the upload directory
	 */
	function frsGetFileList()
	{
		$dirhandle = opendir($FTPINCOMING_DIR);

		//iterate and show the files in the upload directory
		while ($file = readdir($dirhandle)) {
			if (!ereg('^\.',$file[0])) {
				$file_list[] = $file;
			}
		}

		return $file_list;
	}

	// }}}
	// {{{ frsGetReleaseList

	/**
	 * Get a list of the releases
	 *
	 * @param $pkg_str string Optional string used to narrow the search
	 * @returns Database result ID
	 */
	function frsGetReleaseList($pkg_str="")
	{
		$res=db_query("SELECT 
							frs_release.release_id,
							frs_package.name 
					   AS 
					   		package_name,
					  		frs_package.package_id,
							frs_release.name 
					   AS 
					   		release_name,
							frs_release.status_id,
							frs_status.name 
					   AS 
					   		status_name
				       FROM 
					   		frs_release,frs_package,frs_status
					   WHERE 
					   		frs_package.group_id='$this->group_id'  AND 
							frs_release.package_id=frs_package.package_id
					   		$pkg_str AND 
							frs_status.status_id=frs_release.status_id");
		if (!$res) {
			$this->setError(' FRS Get Release List Failed ');
			return false;
		}

		return $res;
	}

	// }}}
	// {{{ frsGetPackageList

	/**
	 * Wrapper for getReleaseList
	 *
	 * @param $package_id Int The ID of the package... duh!
	 */
	function frsGetPackageList($package_id) {
		return $this->frsGetReleaseList("AND frs_package.package_id='$package_id'");
	}

	// }}}
	// {{{ frsGetRelease

	/**
	 * Get a specific release
	 *
	 * @param $release_id int ID of the release
	 * @returns Database result ID
	 */
	function frsGetRelease($release_id)
	{
		$sql="SELECT 
				frs_release.release_date,
				frs_release.package_id,
				frs_release.name 
			  AS 
			  	release_name,
				frs_release.status_id,
			 	frs_release.notes,
				frs_release.changes,
				frs_release.preformatted, 
			 	frs_package.name 
			  AS 
			  	package_name 
			  FROM 
			 	frs_release,
				frs_package 
			  WHERE 
			 	frs_release.release_id='$release_id' 
			  AND 
			 	frs_package.package_id=frs_release.package_id 
			  AND 
			 	frs_package.group_id='$this->group_id'";
		$result = db_query($sql);

		if (!$result || db_numrows($result) < 1) {
			$this->setError(" FRS Get Release Failed [$release_id:$this->group_id] ");
			return false;
		}

		return $result;
	}
	
	// }}}
	// {{{ frsGetReleaseFiles

	/**
	 * Get files associated with a release
	 *
	 * @param $release_id int ID of the release
	 * @returns Database result ID
	 */
	function frsGetReleaseFiles($release_id)
	{
		$sql="SELECT * FROM frs_file WHERE release_id='$release_id'";
		$result=db_query($sql);

		if (!$result) {
			$this->setError(' FRS Get Release Files Failed ');
			return false;
		}

		return $result;
	}

	// }}}
	// {{{ frsVerifyFileOwnership

	/**
	 * Verify the ownership of a file
	 *
	 * @param $file_id ID of the file to verify
	 * @returns Database result ID
	 */
	function frsVerifyFileOwnership($file_id)
	{
		$res=db_query("SELECT 
							frs_file.filename 
					   FROM 
					   		frs_package,
							frs_release,
							frs_file 
					   WHERE 
					   		frs_package.group_id='$this->group_id' AND 
					   		frs_release.release_id=frs_file.release_id AND 
					   		frs_release.package_id=frs_package.package_id AND 
							frs_file.file_id='$file_id'");
		if (!$res || db_numrows($res) < 1) {
			$this->setError(' FRS Verify File Ownership Failed: ');
			return false;
		}

		return $res;
	}

	// }}}
	// {{{ frsVerifyRelease

	/**
	 * Verify whether a release belongs to a project
	 *
	 * @param $release_id int ID of the release
	 * @param $package_id int ID of the package
	 * @returns True on success, False on error
	 */
	function frsVerifyRelease($release_id, $package_id)
	{
		$res=db_query("SELECT 
							frs_package.package_id 
					   FROM 
					   		frs_package,frs_release 
					   WHERE 
					   		frs_package.package_id='$package_id' AND 
					   		frs_package.group_id='$this->group_id' AND 
							frs_release.release_id='$release_id' AND 
							frs_release.package_id=frs_package.package_id");
		if (!$res || db_numrows($res) < 1) {
			$this->setError(' FRS Verify Release Failed [' . $release_id . ':' . $package_id . ']');
			return false;
		}

		return true;
	}

	// }}}
	// {{{ frsVerifyPackage

	/**
	 * Verify whether a package belongs to a group
	 *
	 * @param $package_id int ID of the package
	 * @returns True on success, False on error
	 */
	function frsVerifyPackage($package_id)
	{
		$res=db_query("SELECT * FROM frs_package WHERE package_id='$package_id' AND group_id='$this->group_id'");
		if (!$res || db_numrows($res) < 1) {
			$this->setError(' FRS Verify Package Failed ');
			return false;
		}

		return true;
	}

	// }}}
	// {{{ frsVerifyPackageName

	/**
	 * Verify whether a package name exists for a project
	 *
	 * @param $group_id
	 * @param $package_name
	 */
	function frsVerifyPackageName($group_id, $package_name)
	{
		$res=db_query("SELECT 
							r.name 
					   FROM 
					   		frs_release r, 
							frs_package p 
					   WHERE 
					   		p.group_id='$group_id' AND 
							r.package_id=p.package_id AND 
							r.name='$package_name';");

		if( !$res || db_numrows($res) > 0 ) {
			$this->setError(' FRS Verify Package Name Failed ');
			return false;
		}

		return true;
	}

	// }}}
	// {{{ frsVerifyFile

	/**
	 * Verify whether a file belongs a release/project/package
	 *
	 * @param $file_id int ID of the file to verify
	 * @param $group_id int ID of the group to which the file belongs
	 * @returns True on success, False on error
	 */
	function frsVerifyFile($file_id, $group_id)
	{
		$res=db_query("SELECT 
							frs_package.package_id 
					   FROM 
					   		frs_package,frs_release,frs_file 
					   WHERE 
					   		frs_package.group_id='$group_id' AND 
							frs_release.release_id=frs_file.release_id AND 
							frs_release.package_id=frs_package.package_id AND 
							frs_file.file_id='$file_id'");
		if (!$res || db_numrows($res) > 0) {
			$this->setError(' | FRS Verify File Failed: ');
			return false;
		}

		return true;
	}

	// }}}
	// {{{ frsVerifyFileExist

	/**
	 * Verify that a file doesn't exist in the database
	 *
	 * @param $filename String Name of the file
	 * @param $release_id Int ID of the release
	 * @param $group_id Int ID of the group
	 */
	function frsVerifyFileExist($filename, $release_id, $group_id)
	{
		$res=db_query("SELECT 
							frs_package.package_id 
					   FROM 
					   		frs_package,frs_release,frs_file 
					   WHERE 
					   		frs_package.group_id='$group_id' AND 
							frs_release.release_id=frs_file.release_id AND 
							frs_release.package_id=frs_package.package_id AND 
							frs_file.filename='$filename'");
		if (!$res || db_numrows($res) < 1) {
			return true;
		} else {
			$this->setError(' File Already Exists ');
			return false;
		}
	}

	// }}}
	// {{{ frsVerifyFileRelease

	/**
	 * Verify that a file belongs to a release
	 *
	 * @param $group_id int ID of the group
	 * @param $release_id int ID of the release
	 * @returns True on success, False on error
	 */
	function frsVerifyFileRelease($group_id, $release_id)
	{
		$res=db_query("SELECT 
							frs_package.package_id 
					   FROM 
					   		frs_package,frs_release 
					   WHERE 
					   		frs_package.group_id='$group_id' AND 
							frs_release.release_id='$release_id' AND 
							frs_release.package_id=frs_package.package_id");
		if (!$res || db_numrows($res) < 1) {
			$this->setError(' FRS Verify File Release Failed ');
			return false;
		}

		return true;
	}

	// }}}
	// {{{ frsVerifyProject

	/**
	 * Verify whether a package belongs to a project
	 *
	 * @param $package_id int ID of the package
	 * @param $project_id int ID of the project
	 * @returns True on success, False on error
	 */
	function frsVerifyProject($package_id, $project_id)
	{
		$res1=db_query("SELECT * FROM frs_package WHERE package_id='$package_id' AND group_id='$this->group_id'");
		if (!$res1 || db_numrows($res1) < 1) {
			$this->setError(' FRS Verify Project Failed ');
			return false;
		}

		return true;
	}

	// }}}
	// {{{ frsVerifyReleaseDate

	/**
	 * Verify the release date format
	 * 
	 * @param $release_date int Date ofthe release to verify
	 * @returns True on success, False on error
	 */
	function frsVerifyReleaseDate($release_date)
	{
		if (!ereg("[0-9]{4}-[0-9]{2}-[0-9]{2}",$release_date)) {
			$this->setError(' FRS Verify Release Date Failed: invalid date format ');
			return false;
		}

		return true;
	}

	// }}}
	// {{{ frsVerifyFileMoved

	/**
	 * Verify that a file has actually moved from the temp upload location 
	 * to the projects dir.
	 *
	 * @param $file_location String Location of the file in question.
	 */
	function frsVerifyFileMoved($file_location)
	{
		if( !file_exists($file_location) ) {
			$this->setError($this->getErrorMessage() . " | Move File Failed ");
			return false;
		}

		return true;
	}

	// }}}
	// {{{ frsCreatePackage

	/**
	 * Create a new package
	 * 
	 * @param $package_id Int ID of the package
	 * @param $group_id Int ID of the group
	 * @param $package_name string Name of the package to create
	 * @param $status_id int ID of the status
	 * @returns True on success, False on error
	 */
	function frsCreatePackage($package_id, $group_id, $package_name, $status_id)
	{
		if( !$this->frsVerifyPackage($package_id) ) {
			$this->setError(' FRS Change Package Failed: ' . $this->getErrorMessage());
			return false;
		}	

		if( !$this->frsVerifyPackageName($group_id, $package_name) ) {
			$this->setError(' FRS Change Package Failed: ' . $this->getErrorMessage());
			return false;
		}
		
		$res=db_query("INSERT INTO frs_package VALUES('$package_id','$group_id','$package_name','$status_id')");

		if (!$res) {
			$this->setError(' FRS Create Package Failed ');
			return false;
		}

		return true;
	}

	// }}}
	// {{{ frsDeleteFile

	/**
	 * Delete a file
	 * 
	 * @param $group_id int ID of the group
	 * @param $file_id int ID of the file to delete
	 * @returns True on success, False on error
	 */
	function frsDeleteFile($file_id, $group_id)
	{
		$result = db_query("DELETE FROM frs_file WHERE file_id='$file_id'");
		//append the filename and project name to a temp file for the root perl job to grab
		exec ("/bin/echo \"". db_result($result,0,'filename') ."::". group_getunixname($group_id) ."::xxx\" >> $FTPINCOMING_DIR/.delete_files");

		return true;
	}

	// }}}
	// {{{ frsSendNotice

	/**
	 * Send a release update notice
	 *
	 * @param $group_id int ID of the group
	 * @param $release_id int ID of the release
	 * @param $package_id int ID of the package
	 * @returns Database result ID
	 */
	function frsSendNotice($group_id, $release_id, $package_id)
	{	
		$sql="SELECT 
				users.email,
				frs_package.name 
			  FROM 
			  	users,
				filemodule_monitor,
				frs_package 
			  WHERE 
			  	users.user_id=filemodule_monitor.user_id AND 
				filemodule_monitor.filemodule_id=frs_package.package_id AND 
				filemodule_monitor.filemodule_id='$package_id' AND 
				frs_package.group_id='$group_id'";
		$result=db_query($sql);

		if ($result && db_numrows($result) > 0) {
			//send the email
			$array_emails=result_column_to_array($result);
			$list=implode($array_emails,', ');
		
			$subject='SourceForge File Release Notice';
		
			$body = "To: noreply@$GLOBALS[HTTP_HOST]".
				"\nBCC: $list".
				"\nSubject: $subject".
				"\n\nA new version of ". db_result($result,0,'name')." has been released. ".
				"\nYou can download it from SourceForge by following this link: ".
				"\n\n<http://".$GLOBALS['HTTP_HOST']."/project/showfiles.php?group_id=$group_id&release_id=$release_id> ".
				"\n\nYou requested to be notified when new versions of this file ".
				"\nwere released. If you don't wish to be notified in the ".
				"\nfuture, please login to SourceForge and click this link: ".
				"\n<http://$GLOBALS[HTTP_HOST]/project/filemodule_monitor.php?filemodule_id=$package_id> ";
			
			exec ("/bin/echo \"$body\" | /usr/sbin/sendmail -fnoreply@$GLOBALS[HTTP_HOST] -t");

			return $result;
		} else {
			$this->setError(' FRS Send Notice Failed ');
			return false;
		}
	}

	// }}}
	// {{{ frsMoveFile

	/**
	 * Move a file from the FTP upload dir to a projects dir
	 *
	 * @param $file	String The name of the file
	 * @param $group_unix_name String The name of the group
	 * @param $now Int The date/time of the move
	 * @param $FTPINCOMING_DIR The FTP upload dir.  This is probably not needed.
	 * @param $release_id Int The ID of the release
	 */
	function frsMoveFile($file, $group_unix_name, $now, $FTPINCOMING_DIR, $release_id)
	{
		clearstatcache();
		if (is_file("$FTPINCOMING_DIR/$file") && file_exists("$FTPINCOMING_DIR/$file")) {
			//move the file to a its project page using a setuid program
			exec ("/usr/local/bin/fileforge $file $group_unix_name", $exec_res);
			if ($exec_res[0]) {
				$this->setError("FRS Move File Failed: $exec_res[0],$exec_res[1]");
				return false;
			}
		} else {
			$this->setError("| FRS Move File Failed: File Name Invalid Or Does Not Exist: $FTPINCOMING_DIR/$file ");
			return false;
		}

		return true;
	}

	//}}}
	//{{{ frsResolveRelease

	/**
	 * Get a release name from the release ID
	 *
	 * @param $type 
	 * @param $release_id Int The ID of the release
	 */
	function frsResolveRelease($release_id)
	{
		$res = $this->frsGetRelease($release_id, $this->group_id);
		if (!$res || db_numrows($res) < 1) {
			$this->setError("FRS Resolve Release Release Failed: ");
			return false;
		}

		$name = db_result($res,0,"release_name");
		return $name;
	}

	//}}}
}

?>
