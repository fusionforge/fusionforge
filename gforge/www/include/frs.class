<?php
/**
 * Base class for FRS (File Release System) and QRS (Quick-file Release System)
 * SourceForge: Breaking Down the Barriers to Open Source Development
 * Copyright 1999-2001 (c) VA Linux Systems
 * http://sourceforge.net
 *
 * @version   $Id: frs.class,v 1.16 2001/06/08 18:44:05 dbrogdon Exp $
 * @author Darrell Brogdon <dbrogdon@valinux.com>
 */

class FRS extends Error {

	/**
	 * The group ID
	 *
	 * @var		int		$group_id
	 */
	var $group_id   = "";

	/**
	 * The package ID
	 *
	 * @var		int		$package_id
	 */
	var $package_id = "";

	/**
	 * The release ID
	 *
	 * @var		int		$release_id
	 */
	var $release_id = "";

	/**
	 * The project ID
	 *
	 * @var		int		$project_id
	 */
	var $project_id = "";

	/**
	 * The file ID
	 *
	 * @var		int		$file_id
	 */
	var $file_id    = "";

	/**
	 * The file type
	 *
	 * @var		string	$file_type
	 */
	var $file_type  = "";

	/**
	 * The processor type
	 *
	 * @var		string	$proc_type
	 */
	var $proc_type  = "";

	/**
	 * FRS() - Constructor
	 * 
	 * Sets the value of Class vars if the function arguments exist.
	 *
	 * @param	int		The group ID
	 * @param	int		The package ID
	 * @param	int		The release ID
	 */
	function FRS($group_id) {
		$this->group_id 	= $group_id;
	}

	/**	
	 * frsAddChangeLog() - Add an entry to the change log
	 * 
	 * @param	int		The text that is to be added to the change log
	 * @return True on success, False on error
	 */
	function frsAddChangeLog($change_log_text) {
		if( !$this->frsVerifyRelease($release_id, $package_id) ) {
			$this->setError(' FRS Add Change Log Failed: ' . $this->getErrorMessage());
			return false;
		}

		$res=db_query("UPDATE 
							frs_release 
					   SET 
					   		changes='$change_log_text' 
					   WHERE 
					   		release_id='$this->release_id'");
		if (!$res) {
			$this->setError(' FRS Add Change Log Failed ');
			return false;
		}

		return true;
	}

	/**
	 * frsAddFile() - Add a new file
	 *
	 * @param	int		Time of the release
	 * @param	string	The name of the file to add
	 * @param	int		The ID of the release this file to which this file is associated
	 * @param	int		The file size
	 * @param	int		The post date
	 * @param	int		The ide of the release
	 * @param	int		The ID of the package
	 */
	function frsAddFile($release_time, $filename, $file_size, $post_date, $release_id, $package_id) {
		if( !$this->frsVerifyRelease($release_id, $package_id) ) {
			$this->setError(' FRS Add File Failed: ' . $this->getErrorMessage());
			return false;
		}
//
//
//	filename validation? Use a regex.
//
//
		//move the file to a its project page using a setuid program
		// The following line is due to PHP braindeadness.
		// Don't you dare remove it, it'll break.
		// I know.  I tried it.
		// [RM]
		putenv ('sys_dbpasswd='.getenv ('sys_dbpasswd')) ;
		exec ("/usr/lib/sourceforge/bin/fileforge.pl ".escapeshellarg($file)." ".escapeshellarg($user_unix_name)." ".escapeshellarg($group_unix_name)." 2>&1", $exec_res);
		putenv ('sys_dbpasswd=') ;
		if ($exec_res[0]) {
			$this->setError("FRS Add File Failed:<br>$exec_res[0]<br>$exec_res[1]<br>$exec_res[2]");
			return false;
		}

		$res=db_query("INSERT INTO 
								frs_file (release_time,filename,release_id,file_size,post_date,processor_id,type_id) 
				       VALUES (
								'$release_time',
								'$filename',
								'$release_id',
								'$file_size',
								'$post_date',
								'100',
								'100') ");
		if (!$res) {
			$this->setError(' FRS Add File Failed: ' . db_error());
			return false;
		}

		return true;
	}

	/**
	 * frsAddRelease() - Add a new release
	 *
	 * @param	string	The name of the new release
	 * @param	int		The ID of the package with which this release is to be associated
	 * @return Database result ID
	 */
	function frsAddRelease($release_name, $package_id, $notes="", $changes="") {
		if( !$this->frsVerifyPackage($package_id) ) {
			$this->setError(' FRS Add Release Failed: ' . $this->getErrorMessage());
			return false;
		}

		$res=db_query("INSERT INTO frs_release (package_id,name,notes,changes,status_id,release_date,released_by) ".
					  "VALUES ('$package_id','$release_name','$notes','$changes','1','". time() ."','". user_getid() ."')");
		
		if (!$res) {
			$this->setError(' FRS Add Release Failed  ');
			return false;
		} else {
			return db_insertid($res,'frs_release','release_id');
		}
	}

	/**
	 * frsAddNotes() - Add a new release note
	 *
	 * @param	string	The text of the release notes
	 * @return True on success, False on error
	 */
	function frsAddNotes($notes_text, $release_id) {
		if( !$this->frsVerifyRelease($release_id, $package_id) ) {
			$this->setError(' FRS Add Notes Failed: ' . $this->getErrorMessage());
			return false;
		}

		$res=db_query("UPDATE 
							frs_release 
					   SET 
					   		notes='$notes_text' 
					   WHERE 
					   		release_id='$release_id'");
		if (!$res) {
			$this->setError(' FRS Add Notes Failed ');
			return false;
		}

		return true;
	}

	/**
	 * frsChangePackageName() - Change a package name
	 *
	 * @param	string	The new name to give to a package
	 * @param	string	The package ID for which to change the name
	 * @return True on success, False on error
	 */
	function frsChangePackageName($new_name, $package_id) {
		if( !$this->frsVerifyPackage($package_id) ) {
			$this->setError(' FRS Change Package Name Failed: ' . $this->getErrorMessage());
			return false;
		}

		$res=db_query("UPDATE 
							frs_package 
					   SET 
					   		name='$new_name' 
					   WHERE 
					   		package_id='$package_id' 
					   AND 
					   		group_id='$this->group_id");
		if (!$res) {
			$this->setError(' FRS Change Package Name Failed ');
			return false;
		}

		return true;
	}

	/**
	 * frsChangeFile() - Change a file
	 *
	 * @param	int		Time of the release
	 * @param	int		ID of the file type
	 * @param	int		ID of the processor type
	 * @param	int		ID of the file to change
	 * @param	int		ID of the release to which this file is related
	 * @return True on success, False on error
	 */
	function frsChangeFile($release_time, $type_id, $processor_id, $file_id, $release_id, $package_id) {
		if( !$this->frsVerifyRelease($release_id, $package_id) ) {
			$this->setError('FRS Change File Failed: ' . $this->getErrorMessage());
			return false;
		}

		$date_list = split("-",$release_time,3);
//
//
//	date validation?
//
//
		$unix_release_time = mktime(0,0,0,$date_list[1],$date_list[2],$date_list[0]);
		$res=db_query("UPDATE 
							frs_file 
					   SET 
					   		release_id='$release_id',
					  		release_time='$unix_release_time',
					  		type_id='$type_id',
					  		processor_id='$processor_id' 
					   WHERE 
					   		file_id='$file_id'");
		if (!$res) {
			$this->setError(' FRS Change File Failed ');
			return false;
		}

		return true;
	}
	 
	/**
	 * frsChangeFileRelease() - Change a file's release
	 *
	 * @param	int		The ID of the file
	 * @param	int		The ID of the release
	 * @return True on success, False on error
	 */
	function frsChangeFileRelease($file_id, $release_id) {
    	if( !$this->frsVerifyRelease($release_id, $package_id) ) {
			$this->setError(' FRS Change File Release Failed: ' . $this->getErrorMessage());
			return false;
		} 

		if( !$this->frsVerifyFile($file_id) ) {
			$this->setError(' FRS Change File Release Failed: ' . $this->getErrorMessage());
			return false;
		}

		$res=db_query("UPDATE 
							frs_file 
					   SET 
					   		release_id='$release_id' 
					   WHERE 
					   		file_id='$file_id'");
		if (!$res) {
			$this->setError(' FRS Change File Release Failed ');
			return false;
		}

		return true;
	}

	/**
	 * frsChangeRelease() - Change a release
	 *
	 * @param	int		The date of the release
	 * @param	string	The name of the release
	 * @param	int		The flag to store notes and changes as pre-formatted text
	 * @param	int		The status ID of the release
	 * @param	int		The package ID to which the release is related
	 * @param	string	The release notes text
	 * @param	string	The change log text
	 * @param	int		The ID of the release
	 */
	function frsChangeRelease($release_date, $release_name, $preformatted, $status_id, $notes, $changes, 
							  $package_id, $release_id) {
		if( !$this->frsVerifyRelease($release_id, $package_id) ) {
			$this->setError(' FRS Change Release Failed: ' . $this->getErrorMessage());
			return false;
		}

		// Make sure the date format is correct.
		// If so then turn it into a timestamp.
		if (!$this->frsVerifyReleaseDate($release_date)) {
			$this->setError(' FRS Change Release Failed: ' . $this->getErrorMessage());
			return false;
		} else {
			$date_expl = explode("-",$release_date);
		    $release_date = mktime(0,0,0,$date_expl[1],$date_expl[2],$date_expl[0]);
//
//
//	date validation
//
//
		}
		
		$res=db_query("UPDATE 
							frs_release 
					   SET 
					   		release_date='$release_date',
					  		name='$release_name',
					  		preformatted='$preformatted',
		              		status_id='$status_id',
					  		package_id='$package_id',
					  		notes='$notes',
					  		changes='$changes'
					  WHERE 
					  		release_id='$release_id'");
		if (!$res) {
			$this->setError(' FRS Change Release Failed ');
			return false;
		} 

		return true;
	}

	/**
	 * frsGetReleaseMonitors() - Get a count of the users that are monitoring a release
	 *
	 * @param	int		ID of the package that users are monitoring
	 * @return A count of the number of users monitoring $package_id
	 */
	function frsGetReleaseMonitors($package_id) {
		$result=db_result(db_query("SELECT count(*) from filemodule_monitor WHERE filemodule_id='$package_id'"),0,0);

		return $result;
	}

	/**
	 * frsGetFileList() - Get an array of all available files
	 *
	 * @return An array of the files in the upload directory
	 */
	function frsGetFileList() {
		$dirhandle = opendir($FTPINCOMING_DIR);

		//iterate and show the files in the upload directory
		while ($file = readdir($dirhandle)) {
//
//
//	should only show valid filenames
//
//
			if (!ereg('^\.',$file[0])) {
				$file_list[] = $file;
			}
		}

		return $file_list;
	}

	/**
	 * frsGetReleaseList() - Get a list of the releases
	 *
	 * @param	string	String used to narrow the search
	 * @return Database result ID
	 */
	function frsGetReleaseList($pkg_str="") {
		$res=db_query("SELECT 
							frs_release.release_id,
							frs_package.name 
					   AS 
					   		package_name,
					  		frs_package.package_id,
							frs_release.name 
					   AS 
					   		release_name,
							frs_release.status_id,
							frs_status.name 
					   AS 
					   		status_name
				       FROM 
					   		frs_release,frs_package,frs_status
					   WHERE 
					   		frs_package.group_id='$this->group_id'  AND 
							frs_release.package_id=frs_package.package_id
					   		$pkg_str AND 
							frs_status.status_id=frs_release.status_id");
		if (!$res) {
			$this->setError(' FRS Get Release List Failed ');
			return false;
		}

		return $res;
	}

	/**
	 * frsGetPackageList() - Wrapper for getReleaseList
	 *
	 * @param	int		The ID of the package... duh!
	 */
	function frsGetPackageList($package_id) { 
		return $this->frsGetReleaseList("AND frs_package.package_id='$package_id'");
	}

	/**
	 * frsGetRelease() - Get a specific release
	 *
	 * @param	int		ID of the release
	 * @return Database result ID
	 */
	function frsGetRelease($release_id) {
		$sql="SELECT 
				frs_release.release_date,
				frs_release.package_id,
				frs_release.name 
			  AS 
			  	release_name,
				frs_release.status_id,
			 	frs_release.notes,
				frs_release.changes,
				frs_release.preformatted, 
			 	frs_package.name 
			  AS 
			  	package_name 
			  FROM 
			 	frs_release,
				frs_package 
			  WHERE 
			 	frs_release.release_id='$release_id' 
			  AND 
			 	frs_package.package_id=frs_release.package_id 
			  AND 
			 	frs_package.group_id='$this->group_id'";
		$result = db_query($sql);

		if (!$result || db_numrows($result) < 1) {
			$this->setError(" FRS Get Release Failed [$release_id:$this->group_id] ");
			return false;
		}

		return $result;
	}

	/**
	 * frsGetReleaseFiles() - Get files associated with a release
	 *
	 * @param	int		ID of the release
	 * @return Database result ID
	 */
	function frsGetReleaseFiles($release_id) {
		$sql="SELECT * FROM frs_file WHERE release_id='$release_id'";
		$result=db_query($sql);

		if (!$result) {
			$this->setError(' FRS Get Release Files Failed ');
			return false;
		}

		return $result;
	}

	/**
	 * frsVerifyFileOwnership() - Verify the ownership of a file
	 *
	 * @param	int		ID of the file to verify
	 * @return Database result ID
	 */
	function frsVerifyFileOwnership($file_id) {
		$res=db_query("SELECT 
							frs_file.filename 
					   FROM 
					   		frs_package,
							frs_release,
							frs_file 
					   WHERE 
					   		frs_package.group_id='$this->group_id' AND 
					   		frs_release.release_id=frs_file.release_id AND 
					   		frs_release.package_id=frs_package.package_id AND 
							frs_file.file_id='$file_id'");
		if (!$res || db_numrows($res) < 1) {
			$this->setError(' FRS Verify File Ownership Failed: ');
			return false;
		}

		return $res;
	}

	/**
	 * frsVerifyRelease() - Verify whether a release belongs to a project
	 *
	 * @param	int		ID of the release
	 * @param	int		ID of the package
	 * @return True on success, False on error
	 */
	function frsVerifyRelease($release_id, $package_id) {
		$res=db_query("SELECT 
							frs_package.package_id 
					   FROM 
					   		frs_package,frs_release 
					   WHERE 
					   		frs_package.package_id='$package_id' AND 
					   		frs_package.group_id='$this->group_id' AND 
							frs_release.release_id='$release_id' AND 
							frs_release.package_id=frs_package.package_id");
		if (!$res || db_numrows($res) < 1) {
			$this->setError(' FRS Verify Release Failed [' . $release_id . ':' . $package_id . ']');
			return false;
		}

		return true;
	}

	/**
	 * frsVerifyPackage() - Verify whether a package belongs to a group
	 *
	 * @param	int		ID of the package
	 * @return True on success, False on error
	 */
	function frsVerifyPackage($package_id) {
		$res=db_query("SELECT * FROM frs_package WHERE package_id='$package_id' AND group_id='$this->group_id'");
		if (!$res || db_numrows($res) < 1) {
			$this->setError(' FRS Verify Package Failed ');
			return false;
		}

		return true;
	}

	/**
	 * frsVerifyPackagename() - Verify whether a package name exists for a project
	 *
	 * @param	int		The group ID
	 * @param	string	The name of the package
	 */
	function frsVerifyPackageName($group_id, $package_name) {
//
//
//	Why is group_id passed in here?
//
//
		$res=db_query("SELECT 
							r.name 
					   FROM 
					   		frs_release r, 
							frs_package p 
					   WHERE 
					   		p.group_id='$group_id' AND 
							r.package_id=p.package_id AND 
							r.name='$package_name';");

		if( !$res || db_numrows($res) > 0 ) {
			$this->setError(' FRS Verify Package Name Failed ');
			return false;
		}

		return true;
	}

	/**
	 * frsVerifyFile() - Verify whether a file belongs a release/project/package
	 *
	 * @param	int		ID of the file to verify
	 * @param	int		ID of the group to which the file belongs
	 * @return True on success, False on error
	 */
	function frsVerifyFile($file_id, $group_id) {
//
//
//	Why is group_id passed in here?
//	cache the result by setting a flag or something - don't re-fetch on each call
//
//
		$res=db_query("SELECT 
							frs_package.package_id 
					   FROM 
					   		frs_package,frs_release,frs_file 
					   WHERE 
					   		frs_package.group_id='$group_id' AND 
							frs_release.release_id=frs_file.release_id AND 
							frs_release.package_id=frs_package.package_id AND 
							frs_file.file_id='$file_id'");
		if (!$res || db_numrows($res) > 0) {
			$this->setError(' | FRS Verify File Failed: ');
			return false;
		}

		return true;
	}

	/**
	 * frsVerifyFielexist() - Verify that a file doesn't exist in the database
	 *
	 * @param	string	Name of the file
	 * @param	int		ID of the release
	 * @param	int		ID of the group
	 */
	function frsVerifyFileExist($filename, $release_id, $group_id) {
//
//
//	why is group_id passed in here?
//	cache the result by setting a flag or something - don't re-fetch on each call
//
//
		$res=db_query("SELECT 
							frs_package.package_id 
					   FROM 
					   		frs_package,frs_release,frs_file 
					   WHERE 
					   		frs_package.group_id='$group_id' AND 
							frs_release.release_id=frs_file.release_id AND 
							frs_release.package_id=frs_package.package_id AND 
							frs_file.filename='$filename'");
		if (!$res || db_numrows($res) < 1) {
			return true;
		} else {
			$this->setError(' File Already Exists ');
			return false;
		}
	}

	/**
	 * frsVerifyFileRelease() - Verify that a file belongs to a release
	 *
	 * @param	int		ID of the group
	 * @param	int		ID of the release
	 * @return True on success, False on error
	 */
	function frsVerifyFileRelease($group_id, $release_id) {
//
//
//	why is group_id passed in here?
//	cache the result by setting a flag or something - don't re-fetch on each call
//
//
		$res=db_query("SELECT 
							frs_package.package_id 
					   FROM 
					   		frs_package,frs_release 
					   WHERE 
					   		frs_package.group_id='$group_id' AND 
							frs_release.release_id='$release_id' AND 
							frs_release.package_id=frs_package.package_id");
		if (!$res || db_numrows($res) < 1) {
			$this->setError(' FRS Verify File Release Failed ');
			return false;
		}

		return true;
	}

	/**
	 * frsVerifyProject() - Verify whether a package belongs to a project
	 *
	 * @param	int		ID of the package
	 * @param	int		ID of the project
	 * @return True on success, False on error
	 */
	function frsVerifyProject($package_id, $project_id) {
//
//
//	why is group_id passed in here?
//
//
		$res1=db_query("SELECT * FROM frs_package WHERE package_id='$package_id' AND group_id='$this->group_id'");
		if (!$res1 || db_numrows($res1) < 1) {
			$this->setError(' FRS Verify Project Failed ');
			return false;
		}

		return true;
	}

	/**
	 * frsVerifyReleaseDate() - Verify the release date format
	 * 
	 * @param	int		Date ofthe release to verify
	 * @return True on success, False on error
	 */
	function frsVerifyReleaseDate($release_date) {
		if (!ereg("[0-9]{4}-[0-9]{2}-[0-9]{2}",$release_date)) {
			$this->setError(' FRS Verify Release Date Failed: invalid date format ');
			return false;
		}

		return true;
	}

	/**
	 * frsVerifyFileMoved() - Verify that a file has actually moved from the temp upload location 
	 * to the projects dir.
	 *
	 * @param	string	Location of the file in question.
	 */
	function frsVerifyFileMoved($file_location) {
		if( !file_exists($file_location) ) {
			$this->setError($this->getErrorMessage() . " | Move File Failed ");
			return false;
		}	

		return true;
	}

	/**
	 * frsCreatePackage() - Create a new package
	 * 
	 * @param	string	Name of the package to create
	 * @return True on success, False on error
	 */
	function frsCreatePackage($package_name) {
		if( !$this->frsVerifyPackageName($this->group_id, $package_name) ) {
			return false;
		}
		
		$res=db_query("
			INSERT INTO frs_package (group_id,name,status_id)
			VALUES('".$this->group_id."','$package_name',1)
		");

		if (!$res) {
			$this->setError(' FRS Create Package Failed ');
			return false;
		}

		return true;
	}

	/**
	 * frsDeleteFile() - Delete a file
	 * 
	 * @param	int		ID of the group
	 * @param	int		ID of the file to delete
	 * @return True on success, False on error
	 */
	function frsDeleteFile($file_id, $group_id) {
		$result = db_query("DELETE FROM frs_file WHERE file_id='$file_id'");
		//append the filename and project name to a temp file for the root perl job to grab
		exec ("/bin/echo \"". db_result($result,0,'filename') ."::"
			  . group_getunixname($group_id) ."::xxx\" >> $FTPINCOMING_DIR/.delete_files");

		return true;
	}

	/**
	 * frsSendNotice() - Send a release update notice
	 *
	 * @param	int		ID of the group
	 * @param	int		ID of the release
	 * @param	int		ID of the package
	 * @return Database result ID
	 */
	function frsSendNotice($group_id, $release_id, $package_id) {	
//
//
//	why is group_id passed in here?
//
//
		$sql="SELECT 
				users.email,
				frs_package.name,
				group_name,
				unix_group_name
			  FROM 
			  	users,
				filemodule_monitor,
				frs_package,
				groups 
			  WHERE 
				groups.group_id=frs_package.group_id AND
			  	users.user_id=filemodule_monitor.user_id AND 
				filemodule_monitor.filemodule_id=frs_package.package_id AND 
				filemodule_monitor.filemodule_id='$package_id' AND 
				frs_package.group_id='$group_id'";
		$result=db_query($sql);

		if ($result && db_numrows($result) > 0) {
			//send the email
			$array_emails=result_column_to_array($result);
			$list=implode($array_emails,', ');
			$package = db_result($result,0,'name');
			$full_group = db_result($result,0,'group_name');
			$unix_group = db_result($result,0,'unix_group_name');
			$date = date('Y-m-d H:i',time());
			
			$subject = '['.$GLOBALS['sys_name'].' Release] '
			           .$unix_group.' : '.$package;
		

			$text = "Project: $full_group  ($unix_group)\n"
				."Package: $package\n"
				."Date   : $date"
				."\n\nProject \"$full_group\" ('$unix_group') has "
			        ."released the new version of package '"
				.$package."'. "
				."You can download it from ".$GLOBALS['sys_name']
				." by following this link:\n"
				."<http://".$GLOBALS['HTTP_HOST']."/project/showfiles.php?group_id=$group_id&release_id=$release_id>\n"
				."or browse Release Notes and ChangeLog by visiting this link:\n"
				."<http://".$GLOBALS['HTTP_HOST']."/project/shownotes.php?release_id=$release_id> "
				."\n\nYou receive this email because you "
				."requested to be notified when new versions of this package "
				."were released. If you don't wish to be notified in the "
				."future, please login to ".$GLOBALS['sys_name']." and click this link: "
				."<http://$GLOBALS[HTTP_HOST]/project/filemodule_monitor.php?filemodule_id=$package_id> "
				."\nIf you lost your ".$GLOBALS['sys_name']." login name or password, refer to "
				."this document: "
				."<http://$GLOBALS[HTTP_HOST]/docman/display_doc.php?docid=760&group_id=1> "
				."\n\nNote that you may receive this message indirectly via one of "
				."your mailing list subscriptions. Please review message headers "
				."before reporting unsolicited mailings."
				;

			$text = util_line_wrap($text);
			
			util_send_mail("noreply@$GLOBALS[sys_default_domain]",$subject,$text,"noreply@$GLOBALS[sys_default_domain]",$list);			

			return $result;
		} else {
			$this->setError(' FRS Send Notice Failed ');
			return false;
		}
	}

	/**
	 * frsMoveFile() - Move a file from the FTP upload dir to a projects dir
	 *
	 * @param	string	The name of the file
	 * @param	string	The name of the group
	 * @param	int		The date/time of the move
	 * @param	string	The FTP upload dir.  This is probably not needed.
	 * @param	int		The ID of the release
	 */
	function frsMoveFile($file, $group_unix_name, $now, $FTPINCOMING_DIR, $release_id) {
//
//
//	filename validation?
//	permission checks??
//
//
		clearstatcache();
		if (is_file("$FTPINCOMING_DIR/$file") && file_exists("$FTPINCOMING_DIR/$file")) {
			//move the file to a its project page using a setuid program
			exec ("/usr/local/bin/fileforge $file $group_unix_name", $exec_res);
			if ($exec_res[0]) {
				$this->setError("FRS Move File Failed: $exec_res[0],$exec_res[1]");
				return false;
			}
		} else {
			$this->setError("| FRS Move File Failed: File Name Invalid Or Does Not Exist: $FTPINCOMING_DIR/$file ");
			return false;
		}

		return true;
	}

	/**
	 * frsResolveRelease() - Get a release name from the release ID
	 *
	 * @param	int		The ID of the release
	 */
	function frsResolveRelease($release_id)
	{
		$res = $this->frsGetRelease($release_id, $this->group_id);
		if (!$res || db_numrows($res) < 1) {
			$this->setError("FRS Resolve Release Release Failed: ");
			return false;
		}

		$name = db_result($res,0,"release_name");
		return $name;
	}
}

?>
