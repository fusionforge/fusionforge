<?php   
//
// SourceForge: Breaking Down the Barriers to Open Source Development
// Copyright 1999-2000 (c) The SourceForge Crew
// http://sourceforge.net
//		  
// $Id: Group.class,v 1.59 2000/12/13 19:22:46 tperdue Exp $

/**
 *
 *	Group object by 
 *	@author Tim Perdue, August 28, 2000
 *
 *	Sets up database results and preferences for a group and abstracts this info
 *
 *	Foundry.class and Project.class call this.
 *
 *	Project.class contains all the deprecated API from the old group.php file
 *
 *	DEPENDS on user.php being present and setup properly
 *
 *	GENERALLY YOU SHOULD NEVER INSTANTIATE THIS OBJECT DIRECTLY
 *	USE group_get_object() to instantiate properly
 *
 */


$GROUP_OBJ=array();

/**
 *
 *  group_get_object is useful so you can pool group objects/save database queries
 *  You should always use this instead of instantiating the object directly 
 *
 *  You can now optionally pass in a db result
 *  handle. If you do, it re-uses that query
 *  to instantiate the objects
 *
 *  IMPORTANT! That db result must contain all fields
 *  from groups table or you will have problems
 *
 *  @param group_id required
 *  @param res result set handle ("SELECT * FROM groups WHERE group_id=xx")
 *  @returns a group object or false on failure
 *
 */

function &group_get_object($group_id,$res=false) {
	//create a common set of group objects
	//saves a little wear on the database

	//automatically checks group_type and 
	//returns appropriate object
	
	global $GROUP_OBJ;
	if (!isset($GROUP_OBJ["_".$group_id."_"])) {
		if ($res) {
			//the db result handle was passed in
		} else {
			$res=db_query("SELECT * FROM groups WHERE group_id='$group_id'");
		}
		if (!$res || db_numrows($res) < 1) {
			$GROUP_OBJ["_".$group_id."_"]=false;
		} else {
			/*
				check group type and set up object
			*/
			if (db_result($res,0,'type')==1) {
				//project
				$GROUP_OBJ["_".$group_id."_"]= new Project($group_id,$res);
			} else if (db_result($res,0,'type')==2) {
				//foundry
				$GROUP_OBJ["_".$group_id."_"]= new Foundry($group_id,$res);
			} else {
				//invalid
				$GROUP_OBJ["_".$group_id."_"]=false;
			}
		}
	}
	return $GROUP_OBJ["_".$group_id."_"];
}

class Group extends Error {

	//associative array of data from db
	var $data_array;

	var $group_id;

	//database result set handle
	var $db_result;

	//permissions data row from db
	var $perm_data_array;

	//whether the use is an admin/super user of this project
	var $is_admin;

	/**
	 *	Group() - Group object constructor - use group_get_object() to instantiate
	 *
	 *	@param $id required - group_id of the group you want to instantiate
	 *	@param $res optional database result from select query
	 */
	function Group($id,$res=false) {
		$this->Error();
		$this->group_id=$id;
		if (!$res) {
			$this->db_result=db_query("SELECT * FROM groups WHERE group_id='$id'");
		} else {
			$this->db_result=$res;
		}
		if (db_numrows($this->db_result) < 1) {
			//function in class we extended
			$this->setError('Group Not Found');
			$this->data_array=array();
		} else {
			//set up an associative array for use by other functions

			db_reset_result($this->db_result);

			$this->data_array=db_fetch_array($this->db_result);
		}
	}


	/**
	 *	getData()
	 *
	 *	Generally should NOT be used - here for supporting deprecated group.php
	 *	@returns a database result set handle
	 */
	function getData() {
		db_reset_result($this->db_result);
		return $this->db_result;
	}

	/**
	 *	refreshGroupData() - May need to refresh database fields if an update occurred
	 */
	function refreshGroupData() {
		$this->db_result=db_query("SELECT * FROM groups WHERE group_id='". $this->getGroupId() ."'");
		$this->data_array=db_fetch_array($this->db_result);
	}

	/**
	 *	getGroupId() - Simply return the group_id for this object
	 *
	 *	@returns integer group_id
	 */
	function getGroupId() {
		return $this->group_id;
	}


	/**
	 *	getType() - Foundry, project, etc
	 *
	 *	@returns the type flag from the database
	 */
	function getType() {
		return $this->data_array['type'];
	}


	/**
	 *	getStatus()
	 *
	 *	Statuses include I,H,A,D
	 */
	function getStatus() {
		return $this->data_array['status'];
	}

	/**
	 *	isFoundry() - Simple boolean test to see if it's a foundry or not
	 *
	 *	@returns true/false
	 */
	function isFoundry() {
		if ($this->getType()==2) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 *	isProject() - Simple boolean test to see if it's a project or not
	 *
	 *	@returns true/false
	 */
	function isProject() {
		if ($this->getType()==1) {
			return true;
		} else {
			return false;
		}
	}


	/**
	 *	isPublic() - Simply returns the is_public flag from the database
	 *
	 *	@returns true/false
	 */
	function isPublic() {
		return $this->data_array['is_public'];
	}


	/**
	 *	isActive() - Database field status of 'A' returns true
	 *
	 *	@returns true/false
	 */
	function isActive() {
		if ($this->getStatus()=='A') {
			return true;
		} else {
			return false;
		}
	}

	/**
	 *  getUnixName()
	 *
	 *  @returns text unix_name
	 */
	function getUnixName() {
		return strtolower($this->data_array['unix_group_name']);
	}

	/**
	 *  getPublicName()
	 *
	 *  @returns text group_name
	 */
	function getPublicName() {
		return $this->data_array['group_name'];
	}

	/**
	 *  getDescription()
	 *
	 *  @returns text description
	 */
	function getDescription() {
		return $this->data_array['short_description'];
	}

	/**
	 *  getStartDate()
	 *
	 *  @returns integer (unix time) of registration
	 */
	function getStartDate() {
		return $this->data_array['register_time'];
	}

	/*

		Common Group preferences for tools

	*/

	/**
	 *	usesMail() - whether or not this group has opted to use mailing lists
	 *
	 *	@returns true/false
	 */
	function usesMail() {
		return $this->data_array['use_mail'];
	}

	/**
	 * 	usesNews() - whether or not this group has opted to use news
	 *
	 *	@returns true/false
	 */
	function usesNews() {
		return $this->data_array['use_news'];
	}

	/**
	 *	usesForum() - whether or not this group has opted to use discussion forums
	 *
	 *  @returns true/false
	 */
	function usesForum() {
		return $this->data_array['use_forum'];
	}	   

	/**
	 *  usesDocman() - whether or not this group has opted to use docman
	 *
	 *  @returns true/false
	 */
	function usesDocman() {
		return $this->data_array['use_docman'];
	}

	/**
	 *  usesSurvey() - whether or not this group has opted to use surveys
	 *
	 *  @returns true/false
	 */
	function usesSurvey() {
		return $this->data_array['use_survey'];
	}	   

	/**
	 *	getHomePage() - The URL for this project's home page
	 *
	 *	@returns text homepage URL
	 */
	function getHomePage() {
		return $this->data_array['homepage'];
	}


	/*


		Basic user permissions that apply to all Groups

		These depend on user_group table and the User.class functions


	*/

	/**
	 *  useIsForumAdmin() - whether the current user has form admin perms
	 *
	 *  @returns true/false
	 */
	function userIsForumAdmin() {
		return $this->userIsMember('forum_flags',2);
	}

	/**
	 *  useIsDocEditor() - whether the current user has form doc editor perms
	 *
	 *  @returns true/false
	 */
	function userIsDocEditor() {
		return $this->userIsMember('doc_flags',1);
	}

	/**
	 *  useIsReleaseTechnician() - whether the current user has FRS admin perms
	 *
	 *  @returns true/false
	 */
	function userIsReleaseTechnician() {
		return $this->userIsMember('release_flags',1);
	}

	/**
	 *	userIsMember() - Simple test to see if the current user is a member of this project
	 *
	 *	Can optionally pass in vars to test other permissions
	 *	@returns true/false
	 */
	function userIsMember($field='user_id',$value='-1') {
		if (user_isloggedin()) {
			if ($this->userIsAdmin()) {
				//admins are tested first so that super-users can return true
				//and admins of a project should always have full privileges 
				//on their project
				return true;
			} else {
				$arr=$this->getPermData();
				if ($arr[$field] >= $value) {
					return true;
				} else {
					return false;
				}
			}
		} else {
			return false;
		}
	}

	/**
	 *	userIsAdmin() - User is an admin of the project or admin of the entire site
	 *
	 *	@returns true/false
	 */
	function userIsAdmin() {
		if (isset($this->is_admin)) {
			//have already been through here and set the var
		} else {
			if (user_isloggedin()) {
				//check to see if site super-user
				if (user_is_super_user()) {
					$this->is_admin = true;
				} else {
					$arr=$this->getPermData();
					if (stristr($arr['admin_flags'],'A')) {
						$this->is_admin = true;
					} else {
						$this->is_admin = false;
					}
				}
				db_free_result($res);
			} else {
				$this->is_admin = false;
			}
		}
		return $this->is_admin;
	}

	/**
	 *	getPermData() - Return an associative array of permissions for this group/user
	 *
	 *	@returns - associative array of permissions
	 */
	function getPermData(){
		if ($this->perm_data_array) {
			//have already been through here and set up perms data
		} else {
			if (user_isloggedin()) {
				$res=db_query("SELECT * FROM user_group WHERE user_id='".user_getid()."' and group_id='". $this->getGroupId() ."'");
				if ($res && db_numrows($res) > 0) {
					$this->perm_data_array=db_fetch_array($res);
				} else {
					echo db_error();
					$this->perm_data_array=array();
				}
				db_free_result($res);
			} else {
				$this->perm_data_array=array();
			}
		}		
		return $this->perm_data_array;
	}


	/*


		Basic functions to add/remove users to/from a group
		and update their permissions


	*/

	/**
	 *  addUser() - controls adding a user to a group
	 *  
	 *	@returns true/false
	 */
	function addUser($user_unix_name) {
		/*
			Admins can add users to groups
		*/
		if (!$this->userIsAdmin()) {
			$this->setError('You Are Not An Admin For This Group');
			return false;
		}
		/*
			get user id for this user's unix_name
		*/
		$res_newuser = db_query("SELECT * FROM users WHERE user_name='" . strtolower($user_unix_name) . "'");

		if (db_numrows($res_newuser) > 0) {
			//
			//	user was found - set new user_id var
			//
			$form_newuid = db_result($res_newuser,0,'user_id');

			//
			//	if not already a member, add them
			//
			$res_member = db_query("SELECT user_id FROM user_group ".
				"WHERE user_id='$form_newuid' AND group_id='". $this->getGroupId() ."'");

			if (db_numrows($res_member) < 1) {
				//
				//	user was not already a member
				//
				//	if no unix account, give them a unix_uid
				//
				if ( !db_result($res_newuser,0,'unix_uid') ) {
					$user=&user_get_object($form_newuid,$res_newuser);
					$user->setUpUnixUID();
					if (!sf_ldap_create_user($form_newuid)) {
						$this->setError(sf_ldap_get_error_msg());
						return false;
					}

				} else {
					//
					//	User already had unix account
					//
					if (!sf_ldap_check_create_user($form_newuid)) {
						$this->setError(sf_ldap_get_error_msg());
						return false;
					}
				}
				//
				//	Create this user's row in the user_group table
				//				
				$res=db_query("INSERT INTO user_group (user_id,group_id) ".
					"VALUES ('$form_newuid','". $this->getGroupId() ."')");

				//verify the insert worked
				if (!$res || db_affected_rows($res) < 1) {
					$this->setError('ERROR - Could Not Add User To Group');
					return false;
				}
				//
				//	set up their ldap info
				//
				if (!sf_ldap_group_add_user($this->getGroupId(),$form_newuid)) {
					$this->setError(sf_ldap_get_error_msg());
					return false;
				}

			} else {
				//
				//	user was already a member
				//	make sure they are set up with a unix_uid,
				//	LDAP entry and membership
				//
				$user=&user_get_object($form_newuid,$res_newuser);
				if (!$user->setUpUnixUID()) {
					$this->setError('ERROR: could not set up unix_uid for user: '.$user->getErrorMessage());
					return false;
				} else {
					$user->refreshUserData();
					if (!sf_ldap_check_create_user($form_newuid)) {
						$this->setError(sf_ldap_get_error_msg());
						return false;
					}
						if (!sf_ldap_group_add_user($this->getGroupId(),$form_newuid)) {
						$this->setError(sf_ldap_get_error_msg());
						return false;
					}
					return true;
				}
			}
		} else {
			//
			//	user doesn't exist
			//
			$this->setError('ERROR: That user does not exist on SourceForge');
			return false;
		}
		//
		//	audit trail
		//
		$this->addHistory('Added User',$user_unix_name);
		return true;
	}

	/**
	 *  removeUser() - controls removing a user from a group
	 * 
	 *  Users can remove themselves
	 *	@returns true/false
	 */ 
	function removeUser($user_id) {
		if ($user_id==user_getid()) {
			//users can remove themselves
			//everyone else must be a project admin
		} else if (!$this->userIsAdmin()) {
			$this->setError('You Are Not An Admin For This Group');
			return false;
		}
		
		$res=db_query("SELECT * FROM user_group ".
			"WHERE group_id='".$this->getGroupId()."' AND user_id='$user_id' AND admin_flags = 'A'");
		if (db_numrows($res) > 0) {
			$this->setError('Cannot remove admin');
			return false;
		}

		//
		//	remove user LDAP entry
		//
		if (!sf_ldap_group_remove_user($this->getGroupId(),$user_id)) {
			$this->setError(sf_ldap_get_error_msg());
			return false;
		}

		$res=db_query("DELETE FROM user_group ".
			"WHERE group_id='".$this->getGroupId()."' AND user_id='$user_id' AND admin_flags <> 'A'");
		if (!$res || db_affected_rows($res) < 1) {
			$this->setError('ERROR: DB: User not removed.');
			return false;
		} else {
			//audit trail
			$this->addHistory('removed user',$user_id);
			return true;
		}
	}

	/**	 
	 *  updateUser() - controls updating a user's perms in this group
	 *
	 *	@returns true/false
	 */	 
	function updateUser($user_id,$admin_flags='',$bug_flags=1,$forum_flags=0,$project_flags=1,$patch_flags=1,$support_flags=1,$doc_flags=0,$cvs_flags=1,$release_flags=1,$member_role=100) {
		if (!$this->userIsAdmin()) {
			$this->setError('You Are Not An Admin For This Group');
			return false;
		}

		if (user_getid() == $user_id) {
			$admin_flags='A';
		}

		//
		//	If user acquired admin access to CVS,
		//	one to be given normal shell on CVS machine,
		//	else - restrictted.
		//
		if ($cvs_flags>1) {
			if (!sf_ldap_user_set_attribute($user_id,"x-cvsShell","/bin/bash")) {
				$this->setError(sf_ldap_get_error_msg());
				return false;
			}
		} else {
			if (!sf_ldap_user_set_attribute($user_id,"x-cvsShell","/bin/cvssh")) {
				$this->setError(sf_ldap_get_error_msg());
				return false;
			}
		}

		//
		//	If user acquired at least commit access to CVS,
		//	one to be promoted to CVS group, else, demoted.
		//
		if ($cvs_flags>0) {
			if (!sf_ldap_group_add_user($this->getGroupId(),$user_id,1)) {
				$this->setError(sf_ldap_get_error_msg());
				return false;
			}
		} else {
			if (!sf_ldap_group_remove_user($this->getGroupId(),$user_id,1)) {
				$this->setError(sf_ldap_get_error_msg());
				return false;
			}
		}

		$res = db_query('UPDATE user_group SET '
			."admin_flags='$admin_flags',"
			."bug_flags='$bug_flags',"
			."forum_flags='$forum_flags',"
			."project_flags='$project_flags', "
			."doc_flags='$doc_flags', "
			."patch_flags='$patch_flags', "
			."support_flags='$support_flags', "
			."cvs_flags='$cvs_flags', "
			."release_flags='$release_flags', "
			."member_role='$member_role' "
			."WHERE user_id='$user_id' AND group_id='". $this->getGroupId() ."'");

		if (!$res) {
			$this->setError('ERROR: Could Not Change Member Permissions');
			return false;
		}
		return true;
	}

	/**
	 *  addHistory() - Makes an audit trail entry for this project
	 *
	 *	@returns database result handle
	 */
	function addHistory ($field_name,$old_value) {
		$sql="insert into group_history(group_id,field_name,old_value,mod_by,date) ".
			"VALUES ('". $this->getGroupId() ."','$field_name','$old_value','". user_getid() ."','".time()."')";
		return db_query($sql);
	}		  

}

?>
