<?php
/**
 * GForge Tracker Facility
 *
 * Copyright 2002 GForge, LLC
 * http://gforge.org/
 *
 * @version   $Id$
 */

require_once('common/include/Error.class');
require_once('common/tracker/ArtifactType.class');

class ArtifactTypeFactory extends Error {

	/**
	 * The Group object.
	 *
	 * @var	 object  $Group.
	 */
	var $Group;

	/**
	 * The ArtifactTypes array.
	 *
	 * @var	 array	ArtifactTypes.
	 */
	var $ArtifactTypes;

	/**
	 * The data type (DAO)
	 *
  	 * @var 	string dataType
	 */
	var $dataType;

	/**
	 *  Constructor.
	 *
	 *	@param	object	The Group object to which this ArtifactTypeFactory is associated
	 *	@return	boolean	success.
	 */
	function ArtifactTypeFactory(&$Group) {
		$this->Error();
		if (!$Group || !is_object($Group)) {
			$this->setError('Forum:: No Valid Group Object');
			return false;
		}
		if ($Group->isError()) {
			$this->setError('Forum:: '.$Group->getErrorMessage());
			return false;
		}
		$this->Group =& $Group;

		return true;
	}

	/**
	 *	getGroup - get the Group object this ArtifactType is associated with.
	 *
	 *	@return	object	The Group object.
	 */
	function &getGroup() {
		return $this->Group;
	}

	/**
	 *	setDataType - set the data type (DAO)
	 *
	 * 	@param	string	the data type
	 */	
	function &setDataType($newDataType) {
		$this->dataType = $newDataType;
	}

	/**
	 *	getArtifactTypes - return an array of ArtifactType objects.
	 *
	 *	@return	array	The array of ArtifactType objects.
	 */
	function &getArtifactTypes() {
		if ($this->ArtifactTypes) {
			return $this->ArtifactTypes;
		}

		$sql="SELECT * FROM artifact_group_list_vw
			WHERE group_id='". $this->Group->getID() ."'
			AND is_public IN (".$this->getPublicFlag().")
			AND datatype ".$this->getDataTypeWhereClause()."
			ORDER BY group_artifact_id ASC";

		$result = db_query ($sql);

		$rows = db_numrows($result);

		if (!$result || $rows < 1) {
			$this->setError('None Found '.db_error());
			return false;
		} else {
			while ($arr =& db_fetch_array($result)) {
				$this->ArtifactTypes[] = new ArtifactType($this->Group, $arr['group_artifact_id'], $arr);
			}
		}
		return $this->ArtifactTypes;
	}

	/**
	 * getDataTypeWhereClause - utility method to formulate the WHERE clause to include data types
	 *
	 * @return	string 	A segment of a WHERE clause 
	 */
	function &getDataTypeWhereClause() {
		if ($this->dataType) {
			return "='".$this->dataType."' ";
		}
		return " LIKE '%' ";
	}

	/**
	 * getPublicFlag - a utility method to load up the current user's permissions
 	 *
	 * @return 	string 	The public_flag field to plug into a SQL string
	 */	
	function &getPublicFlag() {
		if (session_loggedin()) {
			$perm =& $this->Group->getPermission( session_get_user() );
			if (!$perm || !is_object($perm) || !$perm->isMember()) {
				$public_flag='1';
			} else {
				$public_flag='0,1';
			}
		} else {
			$public_flag='1';
		}
		return $public_flag;
	}

}

?>
