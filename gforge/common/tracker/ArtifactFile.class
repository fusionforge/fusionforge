<?php
/**
 * ArtifactFile.class - Class to handle files within an artifact
 *
 * SourceForge: Breaking Down the Barriers to Open Source Development
 * Copyright 1999-2001 (c) VA Linux Systems
 * http://sourceforge.net
 *
 * @version   $Id$
 *
 */
require_once('common/include/Error.class');

class ArtifactFile extends Error {

	/** 
	 * The artifact type object
	 *
	 * @var		object	$ArtifactType
	 */
	var $Artifact; //object

	/**
	 * Array of artifact data
	 *
	 * @var		array	$data_array
	 */
	var $data_array;

	/**
	 *  ArtifactFile() - constructor
	 *
	 *  Use this constructor if you are modifying an existing artifact
	 *
	 *	@param	object	The Artifact object
	 *  @param	array	(all fields from artifact_file_user_vw) OR id from database
	 *  @return true/false
	 */
	function ArtifactFile(&$Artifact, $data=false) {
		$this->Error(); 

		//was Artifact legit?
		if (!$Artifact || !is_object($Artifact)) {
			$this->setError('ArtifactFile: No Valid Artifact');
			return false;
		}
		//did ArtifactType have an error?
		if ($Artifact->isError()) {
			$this->setError('ArtifactFile: '.$Artifact->getErrorMessage());
			return false;
		}
		$this->Artifact =& $Artifact;

		if ($data) {
			if (is_array($data)) {
				$this->data_array =& $data;
				return true;
			} else {
				if (!$this->fetchData($data)) {
					return false;
				} else {
					return true;
				}
			}
		} else {
			$this->setError('No ID Passed');
		}
	}

	/**
	 *	create() - create a new item in the database
	 *
	 *	@para	string	Filename of the item
	 *	@param	string	Item filetype
	 *	@param	string	Item filesize
	 *	@param	binary	Binary item data
	 *	@param	string	Item description
	 *  @return id on success / false on failure
	 */
	function create($filename, $filetype, $filesize, $bin_data, $description='None') {

		// Some browsers don't supply mime type if they don't know it
		if (!$filetype) {
			// Let's be on safe side?
			$filetype = 'application/octet-stream';
		}

		//
		//	data validation
		//
		if (!$filename || !$filetype || !$filesize || !$bin_data) {
			//echo '<P>|'.$filename.'|'.$filetype.'|'.$filesize.'|'.$bin_data.'|';
			$this->setError('ArtifactFile: File name, type, size, and data are Required');
			return false;
		}

		if (user_isloggedin()) {
			$userid=user_getid();
		} else {
			$userid=100;
		}

		$res=db_query("INSERT INTO artifact_file
			(artifact_id,description,bin_data,filename,filesize,filetype,adddate,submitted_by)
			VALUES 
			('".$this->Artifact->getID()."','$description','". base64_encode($bin_data) ."','$filename',
			'$filesize','$filetype','". time() ."','$userid')"); 

		$id=db_insertid($res,'artifact_file','id');

		if (!$res || !$id) {
			$this->setError('ArtifactFile: '.db_error());
			return false;
		} else {
/*
//
//	skip this unless we need it later - save a db query
//
			//
			//	Now set up our internal data structures
			//
			if (!$this->fetchData($id)) {
				return false;
			}
*/
			$this->Artifact->addHistory('File Added',$id.': '.$filename);
			$this->clearError();
			return $id;
		}
	}

	/**
	 *	delete() - delete this artifact file from the db
	 *
	 *	@return true/false
	 */
	function delete() {
		if (!$this->Artifact->ArtifactType->userIsAdmin()) {
			$this->setError('ArtifactFile: Permission Denied');
			return false;
		}
		$res=db_query("DELETE FROM artifact_file WHERE id='". $this->getID() ."'");
		if (!$res || db_affected_rows($res) < 1) {
			$this->setError('ArtifactFile: Unable to Delete');
			return false;
		} else {
			$this->Artifact->addHistory('File Deleted',$this->getID().': '.$filename);
			return true;
		}
	}

	/**
	 *	fetchData() - re-fetch the data for this ArtifactFile from the database
	 *
	 *	@param	int		Data ID
	 *	@return true/false
	 */
	function fetchData($id) {
		$res=db_query("SELECT * FROM artifact_file_user_vw WHERE id='$id'");
		if (!$res || db_numrows($res) < 1) {
			$this->setError('ArtifactFile: Invalid ArtifactFile ID');
			return false;
		}
		$this->data_array =& db_fetch_array($res);
		db_free_result($res);
		return true;
	}

	/**
	 *	getArtifact() - get the Artifact Object this ArtifactFile is associated with
	 *
	 *	@return Artifact
	 */
	function &getArtifact() {
		return $this->Artifact;
	}
	
	/**
	 *	getID() - get this ArtifactFile's ID
	 *
	 *	@return the id #
	 */
	function getID() {
		return $this->data_array['id'];
	}

	/**
	 *	getName() - get the filename
	 *
	 *	@return text filename
	 */
	function getName() {
		return $this->data_array['filename'];
	}

	/**
	 *	getType() - get the type
	 *
	 *	@return text type
	 */
	function getType() {
		return $this->data_array['filetype'];
	}

	/**
	 *	getData() - get the binary data from the db
	 *
	 *	@return binary
	 */
	function &getData() {
		return base64_decode($this->data_array['bin_data']);
	}

	/**
	 *	getSize() - get the size
	 *
	 *	@return int size
	 */
	function getSize() {
		return $this->data_array['filesize'];
	}

	/**
	 *	getDescription() - get the description
	 *
	 *	@return text description
	 */
	function getDescription() {
		return $this->data_array['description'];
	}

	/**
	 *	getDate() - get the date file was added
	 *
	 *	@return int unix time
	 */
	function getDate() {
		return $this->data_array['adddate'];
	}

	/**
	 *	getSubmittedBy() - get the user_id of the submitter
	 *
	 *	@return int user_id
	 */
	function getSubmittedBy() {
		return $this->data_array['submitted_by'];
	}

	/**
	 *	getSubmittedRealName() - get the real name of the submitter
	 *
	 *	@return text name
	 */
	function getSubmittedRealName() {
		return $this->data_array['realname'];
	}

	/**
	 *	getSubmittedUnixName() - get the unix name of the submitter
	 *
	 *	@return text unixname
	 */
	function getSubmittedUnixName() {
		return $this->data_array['user_name'];
	}

}

?>
