<?php
/**
 * ArtifactGroup.class - Class to artifact groups
 *
 * SourceForge: Breaking Down the Barriers to Open Source Development
 * Copyright 1999-2001 (c) VA Linux Systems
 * http://sourceforge.net
 *
 * @version   $Id$
 *
 */
require_once('common/include/Error.class');

class ArtifactGroup extends Error {

	/**
	 * Artifact type object
	 *
	 * @var		object	$ArtifactType
	 */	
	var $ArtifactType; 

	/**
	 * Array of artifact data
	 *
	 * @var		array	$data_array
	 */
	var $data_array;

	/**
	 *  ArtifactGroup() - constructor
	 *
	 *  Use this constructor if you are modifying an existing artifact
	 *
	 *	@param	object	Artifact type object
	 *  @param	array	(all fields from artifact_group) OR id from database
	 *  @return true/false
	 */
	function ArtifactGroup(&$ArtifactType, $data=false) {
		$this->Error(); 

		//was ArtifactType legit?
		if (!$ArtifactType || !is_object($ArtifactType)) {
			$this->setError('ArtifactGroup: No Valid ArtifactType');
			return false;
		}
		//did ArtifactType have an error?
		if ($ArtifactType->isError()) {
			$this->setError('ArtifactGroup: '.$Artifact->getErrorMessage());
			return false;
		}
		$this->ArtifactType =& $ArtifactType;

		if ($data) {
			if (is_array($data)) {
				$this->data_array =& $data;
				return true;
			} else {
				if (!$this->fetchData($data)) {
					return false;
				} else {
					return true;
				}
			}
		}
	}

	/**
	 *	create() - create a new item in the database
	 *
	 *	@param	string	Item name
	 *  @return id on success / false on failure
	 */
	function create($name) {
		//
		//	data validation
		//
		if (!$name) {
			$this->setError('ArtifactGroup: name is Required');
			return false;
		}
		if (!$this->ArtifactType->userIsAdmin()) {
			$this->setError('Permission Denied');
			return false;
		}
		$sql="INSERT INTO artifact_group (group_artifact_id,group_name) 
			VALUES ('".$this->ArtifactType->getID()."','$name')";
		$result=db_query($sql);

		if ($result && db_affected_rows($result) > 0) {
			return true;
		} else {
			$this->setError(db_error());
			return false;
		}

/*
			//
			//	Now set up our internal data structures
			//
			if (!$this->fetchData($id)) {
				return false;
			}
*/
	}

	/**
	 *	fetchData() - re-fetch the data for this ArtifactGroup from the database
	 *
	 *	@param	int		Data ID
	 *	@return true/false
	 */
	function fetchData($id) {
		$res=db_query("SELECT * FROM artifact_group WHERE id='$id'");
		if (!$res || db_numrows($res) < 1) {
			$this->setError('ArtifactGroup: Invalid ArtifactGroup ID');
			return false;
		}
		$this->data_array =& db_fetch_array($res);
		db_free_result($res);
		return true;
	}

	/**
	 *	getArtifactType() - get the ArtifactType Object this ArtifactGroup is associated with
	 *
	 *	@return ArtifactType
	 */
	function &getArtifactType() {
		return $this->ArtifactType;
	}
	
	/**
	 *	getID() - get this ArtifactGroup's ID
	 *
	 *	@return the id #
	 */
	function getID() {
		return $this->data_array['id'];
	}

	/**
	 *	getName() - get the name
	 *
	 *	@return text name
	 */
	function getName() {
		return $this->data_array['group_name'];
	}

	/**
	 *  update() - update an ArtifactGroup
	 *
	 *  @param	string	Name of the group
	 *  @return true/false
	 */
	function update($name) {
		if (!$this->ArtifactType->userIsAdmin()) {
			$this->setError('Permission Denied');
			return false;
		}   
		if (!$name) {
			$this->setError('Missing Params');
			return false;
		}   
		$sql="UPDATE artifact_group
			SET group_name='$name'
			WHERE id='". $this->getID() ."' 
			AND group_artifact_id='". $this->ArtifactType->getID() ."'";

		$result=db_query($sql);

		if ($result && db_affected_rows($result) > 0) {
			return true;
		} else {
			$this->setError(db_error());
			return false;
		}
	}
}

?>
