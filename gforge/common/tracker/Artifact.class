<?php
/**
 *
 * Artifact.class - Main Artifact class
 *
 * SourceForge: Breaking Down the Barriers to Open Source Development
 * Copyright 1999-2001 (c) VA Linux Systems
 * http://sourceforge.net
 *
 * @version   $Id$
 *
 */
require_once('common/include/Error.class');

class Artifact extends Error {

	/**
	 * Resource ID
	 *
	 * @var		int		$status_res
	 */
	var $status_res;

	/**
	 * Artifact Type object
	 *
	 * @var		object	$ArtifactType
	 */
	var $ArtifactType; 

	/**
	 * Array of artifact data
	 *
	 * @var		array	$data_array
	 */
	var $data_array;

	/**
	 * Array of ArtifactFile objects
	 *
	 * @var		array	$files
	 */
	var $files; 

	/**
	 *  Artifact() - constructor
	 *
	 *  Use this constructor if you are modifying an existing artifact
	 *
	 *	@param	object	The artifact type object
	 *  @param	integer	(primary key from database OR complete assoc array) 
	 *		ONLY OPTIONAL WHEN YOU PLAN TO IMMEDIATELY CALL ->create()
	 *  @return true/false
	 */
	function Artifact(&$ArtifactType, $data=false) {
		$this->Error(); 

		$this->ArtifactType =& $ArtifactType;

		//was ArtifactType legit?
		if (!$ArtifactType || !is_object($ArtifactType)) {
			$this->setError('Artifact: No Valid ArtifactType');
			return false;
		}
		//did ArtifactType have an error?
		if ($ArtifactType->isError()) {
			$this->setError('Artifact: '.$ArtifactType->getErrorMessage());
			return false;
		}

		//
		//	make sure this person has permission to view artifacts
		//
		if (!$this->ArtifactType->userCanView()) {
			$this->setError('Artifact: Only Group Members Can View Private ArtifactTypes');
			return false;
		}

		//
		//	set up data structures
		//
		if ($data) {
			if (is_array($data)) {
				$this->data_array =& $data;
//
//	Should verify ArtifactType ID
//
				return true;
			} else {
				if (!$this->fetchData($data)) {
					return false;
				} else {
					return true;
				}
			}
		}
	}


	/**
	 *	create() - construct a new Artifact in the database
	 *
	 *	@param	int		The category ID
	 *	@param	int		The artifact group ID
	 *	@param	string	The artifact summary
	 *	@param	string	Details of the artifact
	 *	@param	int		The ID of the user to which this artifact is to be assigned
	 *	@param	int		The artifacts priority
	 *  @return id on success / false on failure
	 */
	function create($category_id, $artifact_group_id, $summary, $details, $assigned_to=100, $priority=5, $monitor_email=false) {

		//
		//	make sure this person has permission to add artifacts
		//
		if (!$this->ArtifactType->isPublic()) {
			//
			//	Only admins can post/modify private artifacts
			//
			if (!$this->ArtifactType->userIsAdmin()) {
				$this->setError('Artifact: Only Artifact Admins Can Modify Private ArtifactTypes');
				return false;
			}
		}

		//
		//	get the user_id
		//
		if (session_loggedin()) {
			$user=user_getid();
		} else {
			if ($this->ArtifactType->allowsAnon()) {
				$user=100;
			} else {
				$this->setError('Artifact: This ArtifactType Does Not Allow Anonymous Submissions. Please Login.');
				return false;
			}
		}

		//
		//	data validation
		//
		if (!$summary) {
			$this->setError('Artifact: Message Summary Is Required');
			return false;
		}
		if (!$details) {
			$this->setError('Artifact: Message Body Is Required');
			return false;
		}
		if (!$assigned_to) {
			if ($category_id == 100) {
				$assigned_to=100;
			} else {
				//create an ArtifactCategory to determine who to auto-assign to
				$ac=new ArtifactCategory($this->ArtifactType,$category_id);
				if (!$ac || !is_object($ac) || $ac->isError()) {
					$assigned_to=100;
				} else {
					$assigned_to=$ac->getAssignee();
				}
			}
		}
		if ($assigned_to==100 && $category_id != 100) {
			//create an ArtifactCategory to determine who to auto-assign to
			$ac=new ArtifactCategory($this->ArtifactType,$category_id);
			if (!$ac || !is_object($ac) || $ac->isError()) {
				$assigned_to=100;
			} else {
				$assigned_to=$ac->getAssignee();
			}
		}
		if (!$priority) {
			$priority=5;
		}
		if (!$category_id) {
			$category_id=100;
		}
		if (!$artifact_group_id) {
			$artifact_group_id=100;
		}
		if (!$resolution_id) {
			$resolution_id=100;
		}

		db_begin();

		//
		//	Check to see if this idiot user is trying to double-submit
		//
		$res=db_query("SELECT * FROM artifact 
			WHERE summary='$summary' 
			AND submitted_by='$user'
			AND open_date > '". (time() - 86400) ."'");
		if ($res && db_numrows($res) > 0) {
			$this->setError("You Attempted To Double-submit this item. Please avoid double-clicking.");
			db_rollback();
			return false;
		}

		$res=db_query("INSERT INTO artifact 
			(group_artifact_id,status_id,category_id,artifact_group_id,priority,
			submitted_by,assigned_to,open_date,summary,details,resolution_id) 
			VALUES 
			('".$this->ArtifactType->getID()."','1','$category_id','$artifact_group_id',
			'$priority','$user','$assigned_to','". time() ."','". 
			htmlspecialchars($summary)."','". htmlspecialchars($details)."','$resolution_id')");

		$artifact_id=db_insertid($res,'artifact','artifact_id');

		if (!$res || !$artifact_id) {
			$this->setError('Artifact: '.db_error());
			db_rollback();
			return false;
		} else {
			//
			//	Now set up our internal data structures
			//
			if (!$this->fetchData($artifact_id)) {
				db_rollback();
				return false;
			}

			//
			//	now send an email if appropriate
			//
			$this->mailFollowup(1);
			db_commit();

			//
			//  Set up monitoring for the user if requested
			//
			if ($monitor_email) {
				$this->setMonitor($monitor_email);
			}
			return $artifact_id;
		}
	}

	/**
	 *	fetchData() - re-fetch the data for this Artifact from the database
	 *
	 *	@param	int		The artifact ID
	 *	@return true/false
	 */
	function fetchData($artifact_id) {
		$res=db_query("SELECT * FROM artifact_vw 
			WHERE artifact_id='$artifact_id' AND group_artifact_id='".$this->ArtifactType->getID()."'");
		if (!$res || db_numrows($res) < 1) {
			$this->setError('Artifact: Invalid ArtifactID');
			return false;
		}
		$this->data_array =& db_fetch_array($res);
		db_free_result($res);
		return true;
	}

	/**
	 *	getArtifactType() - get the ArtifactType Object this Artifact is associated with
	 *
	 *	@return ArtifactType
	 */
	function &getArtifactType() {
		return $this->ArtifactType;
	}
	
	/**
	 *	getID() - get this ArtifactID
	 *
	 *	@return the group_artifact_id #
	 */
	function getID() {
		return $this->data_array['artifact_id'];
	}

	/**
	 *	getStatusID() - get open/closed/deleted flag
	 *
	 *	@return (1) Open, (2) Closed, (3) Deleted
	 */
	function getStatusID() {
		return $this->data_array['status_id'];
	}

	/**
	 *	getStatusName() - get open/closed/deleted text
	 *
	 *	@return text status name
	 */
	function getStatusName() {
		return $this->data_array['status_name'];
	}

	/**
	 *	getResolutionID() - get resolution flag
	 *
	 *	@return int
	 */
	function getResolutionID() {
		return $this->data_array['resolution_id'];
	}

	/**
	 *	getResolutionName() - get resolution name
	 *
	 *	@return text resolution name
	 */
	function getResolutionName() {
		return $this->data_array['resolution_name'];
	}

	/**
	 *	getCategoryID() - get category_id flag
	 *
	 *	@return int category_id
	 */
	function getCategoryID() {
		return $this->data_array['category_id'];
	}

	/**
	 *	getCategoryName() - get category text name
	 *
	 *	@return text category name
	 */
	function getCategoryName() {
		return $this->data_array['category_name'];
	}

	/**
	 *	getArtifactGroupID() - get artifact_group_id flag
	 *
	 *	@return int artifact_group_id
	 */
	function getArtifactGroupID() {
		return $this->data_array['artifact_group_id'];
	}

	/**
	 *	getArtifactGroupName() - get artifact_group_name text
	 *
	 *	@return text artifact_group name
	 */
	function getArtifactGroupName() {
		return $this->data_array['group_name'];
	}

	/**
	 *	getPriority() - get priority flag
	 *
	 *	@return int priority
	 */
	function getPriority() {
		return $this->data_array['priority'];
	}

	/**
	 *	getSubmittedBy() - get ID of submitter
	 *
	 *	@return int user_id of submitter
	 */
	function getSubmittedBy() {
		return $this->data_array['submitted_by'];
	}

	/**
	 *	getSubmittedEmail() - get email of submitter
	 *
	 *	@return text email of submitter
	 */
	function getSubmittedEmail() {
		return $this->data_array['submitted_email'];
	}

	/**
	 *	getSubmittedRealName() - get real name of submitter
	 *
	 *	@return text real name of submitter
	 */
	function getSubmittedRealName() {
		return $this->data_array['submitted_realname'];
	}

	/**
	 *	getSubmittedUnixName() - get login name of submitter
	 *
	 *	@return text unix name of submitter
	 */
	function getSubmittedUnixName() {
		return $this->data_array['submitted_unixname'];
	}

	/**
	 *	getAssignedTo() - get ID of assignee
	 *
	 *	@return int user_id of assignee
	 */
	function getAssignedTo() {
		return $this->data_array['assigned_to'];
	}

	/**
	 *	getAssignedEmail() - get email of assignee
	 *
	 *	@return text email of assignee
	 */
	function getAssignedEmail() {
		return $this->data_array['assigned_email'];
	}

	/**
	 *	getAssignedRealName() - get real name of assignee
	 *
	 *	@return text real name of assignee
	 */
	function getAssignedRealName() {
		return $this->data_array['assigned_realname'];
	}

	/**
	 *	getAssignedUnixName() - get login name of assignee
	 *
	 *	@return text unix name of assignee
	 */
	function getAssignedUnixName() {
		return $this->data_array['assigned_unixname'];
	}

	/**
	 *	getOpenDate() - get unix time of creation
	 *
	 *	@return int unix time
	 */
	function getOpenDate() {
		return $this->data_array['open_date'];
	}

	/**
	 *	getCloseDate() - get unix time of closure
	 *
	 *	@return int unix time
	 */
	function getCloseDate() {
		return $this->data_array['close_date'];
	}

	/**
	 *	getSummary() - get text summary of artifact
	 *
	 *	@return text summary (subject)
	 */
	function getSummary() {
		return $this->data_array['summary'];
	}

	/**
	 *	getDetails() - get text body (message) of artifact
	 *
	 *	@return text body (message)
	 */
	function getDetails() {
		return $this->data_array['details'];
	}

	/**
	 *  setMonitor() - user can monitor this artifact
	 *
	 *  @return false - always false - always use the getErrorMessage() for feedback
	 */
	function setMonitor() {
		if (session_loggedin()) {

			$user_id=user_getid();
			$user =& user_get_object(user_getid());
			$email=' ';

			//we don't want to include the "And email=" because
			//a logged-in user's email may have changed
			$email_sql='';

		} else {

			$this->setError('SetMonitor::Valid Email Address Required');
			return false;

		}

		$res=db_query("SELECT * FROM artifact_monitor 
			WHERE artifact_id='". $this->getID() ."' 
			AND user_id='$user_id'");

		if (!$res || db_numrows($res) < 1) {
			//not yet monitoring
			$res=db_query("INSERT INTO artifact_monitor (artifact_id,user_id) 
				VALUES ('". $this->getID() ."','$user_id')");
			if (!$res) {
				$this->setError(db_error());
				return false;
			} else {
				$this->setError('Now Monitoring');
				return false;
			}
		} else {
			//already monitoring - remove their monitor
			db_query("DELETE FROM artifact_monitor 
				WHERE artifact_id='". $this->getID() ."' 
				AND user_id='$user_id'");
			$this->setError('Monitoring Deactivated');
			return false;
		}
	}

	/**
	 *  getMonitorIds() - 
	 *
	 *  @return array of email addresses monitoring this ArtifactType
	 */
	function &getMonitorIds() {
		$res=db_query("SELECT user_id
			FROM artifact_monitor 
			WHERE artifact_id='". $this->getID() ."'");
		return util_result_column_to_array($res);
	}

	/**
	 *	getHistory() - returns a result set of audit trail for this support request
	 *
	 *	@return result set
	 */
	function getHistory() {
		$sql="SELECT * ".
		"FROM artifact_history_user_vw ".
		"WHERE artifact_id='". $this->getID() ."' ".
		"ORDER BY entrydate DESC";
		return db_query($sql);
	}

	/**
	 *	getMessages() - get the list of messages attached to this artifact
	 *
	 *	@return database result set
	 */
	function getMessages() {
		$sql="select * ".
			"FROM artifact_message_user_vw ".
			"WHERE artifact_id='". $this->getID() ."' ORDER BY adddate DESC";
		return db_query($sql);
	}

	/**
	 *	getFiles() - get array of ArtifactFile's
	 *
	 *	@return array of ArtifactFile's
	 */
	function &getFiles() {
		if (!isset($this->files)) {
			$sql="select * ".
			"FROM artifact_file_user_vw ".
			"WHERE artifact_id='". $this->getID() ."'";
			$res=db_query($sql);
			$rows=db_numrows($res);
			if ($rows > 0) {
				for ($i=0; $i < $rows; $i++) {
					$this->files[$i]=new ArtifactFile($this,db_fetch_array($res));
				}
			} else {
				$this->files=array();
			}
		}
		return $this->files;
	}

	/**
	 *  addMessage() - attach a text message to this Artifact
	 *
	 *	@param	string	The message being attached
	 *	@param	string	Email address of message creator
	 *	@param	bool	Whether to email out a followup
	 *	@access private
	 *  @return true/false
	 */
	function addMessage($body,$by=false,$send_followup=false) {
		if (!$body) {
			$this->setError('ERROR - addMessage: Missing Parameters');
			return false;
		}

		if (session_loggedin()) {
			$user_id=user_getid();
			$user =& user_get_object($user_id);
			if (!$user || !is_object($user)) {
				$this->setError('ERROR - Logged In User Bug Could Not Get User Object');
				return false;
			}
			$body="Logged In: YES \nuser_id=$user_id\n\n".$body;

			//	we'll store this email even though it will likely never be used - 
			//	since we have their correct user_id, we can join the USERS table to get email
			$by=$user->getEmail();
		} else {
			$body="Logged In: NO \n\n".$body;
			$user_id=100;
			if (!$by || !validate_email($by)) {
				$this->setError('ERROR - addMessage: Missing Or Invalid Email Address');
				return false;
			}
		}

		$sql="insert into artifact_message (artifact_id,submitted_by,from_email,adddate,body) ".
			"VALUES ('". $this->getID() ."','$user_id','$by','". time() ."','". htmlspecialchars($body). "')";
		$res = db_query($sql);
		if ($send_followup) {
			$this->mailFollowup(2,false);
		}
		return $res;
	}

	/**
	 *  addHistory() - add an entry to audit trail
	 *
	 *  @param	string	The name of the field in the database being modified
	 *  @param	string	The former value of this field
	 *  @access private
	 *  @return true/false
	 */
	function addHistory($field_name,$old_value) {
		if (!session_loggedin()) {
			$user=100;
		} else {
			$user=user_getid();
		}
		$sql="insert into artifact_history(artifact_id,field_name,old_value,mod_by,entrydate) 
			VALUES ('". $this->getID() ."','$field_name','$old_value','$user','". time() ."')";
		return db_query($sql);
	}

	/**
	 *	update() - update the fields in this artifact
	 *
	 *	@param	int		The artifact priority
	 *	@param	int		The artifact status ID
	 *	@param	int		The artifact category ID
	 *	@param	int		The artifact group ID
	 *	@param	int		The artifact resolution ID
	 *	@param	int		The person to which this artifact is to be assigned
	 *	@param	int		The artifact summary
	 *	@param	int		The canned response
	 *	@param	int		Attaching another comment
	 *	@param	int		Allows you to move an artifact to another type
	 *	@return true/false
	 */
	function update($priority,$status_id,$category_id,$artifact_group_id,$resolution_id,
		$assigned_to,$summary,$canned_response,$details,$new_artifact_type_id) {

		if (!$this->getID() 
			|| !$assigned_to 
			|| !$status_id 
			|| !$category_id 
			|| !$artifact_group_id 
			|| !$resolution_id
			|| !$canned_response 
			|| !$new_artifact_type_id) {
			$this->setError('Artifact: Missing required parameters to artifact::update()');
			return false;
		}

		// If the current status is Pending then auto-reset it to 'Open'
		// Assumes the status ID for 'Pending' is '4'
		if ($status_id != '2' && $status_id != '3'  && $this->getStatusID() == '4') {
			$status_id = '1';
		}

		//	original submitter can always modify his/her items now
		if (!$this->ArtifactType->userIsAdmin() && ($this->getSubmittedBy() != user_getid())) {
			$this->setError('Artifact: Update Permission Denied');
			return false;
		}

		// Array to record which properties were changed
		$changes = array();

		db_begin();

		//
		//	Get a lock on this row in the database
		//
		$lock=db_query("SELECT * FROM artifact WHERE artifact_id='".$this->getID()."' FOR UPDATE");

		$artifact_type_id = $this->ArtifactType->getID();

		//
		//	Attempt to move this Artifact to a new ArtifactType
		//	need to instantiate new ArtifactType obj and test perms
		//
		if ($new_artifact_type_id != $artifact_type_id) {
			$newArtifactType= new ArtifactType($this->ArtifactType->getGroup(), $new_artifact_type_id);
			if (!is_object($newArtifactType) || $newArtifactType->isError()) {
				$this->setError('Artifact: Could not move to new ArtifactType'.$newArtifactType->getErrorMessage());
				return false;
			}
			//	do they have perms for new ArtifactType?
			if (!$newArtifactType->userIsAdmin()) {
				$this->setError('Artifact: Could not move to new ArtifactType: Permission Denied');
				db_rollback();
				return false;
			}
			//
			//	Now set ArtifactGroup, Category, and Assigned to 100 in the new ArtifactType
			//
			$status_id=1;
			$category_id='100';
			$artifact_group_id='100';
			$assigned_to='100';
			//can't send a canned response when changing ArtifactType
			$canned_response=100;
			$this->ArtifactType =& $newArtifactType;
			$update = true;
		}

		$sqlu='';

		//
		//	handle audit trail & build SQL statement
		//
		if ($this->getStatusID() != $status_id) {
			$this->addHistory('status_id',$this->getStatusID());
			$sqlu .= " status_id='$status_id', ";
			$changes['status'] = 1;
			$update = true;
		}
		if (($this->getResolutionID() != $resolution_id) && ($resolution_id != 100)) {
			$this->addHistory('resolution_id',$this->getResolutionID());
			$sqlu .= " resolution_id='$resolution_id', ";
			$changes['resolution'] = 1;
			$update = true;
		}
		if ($this->getCategoryID() != $category_id) {
			$this->addHistory('category_id',$this->getCategoryID());
			$sqlu .= " category_id='$category_id', ";
			$changes['category'] = 1;
			$update = true;
		}
		if ($this->getArtifactGroupID() != $artifact_group_id) {
			$this->addHistory('artifact_group_id',$this->getArtifactGroupID());
			$sqlu .= " artifact_group_id='$artifact_group_id', ";
			$changes['artifact_group'] = 1;
			$update = true;
		}
		if ($this->getPriority() != $priority) {
			$this->addHistory('priority',$this->getPriority());
			$sqlu .= " priority='$priority', ";
			$changes['priority'] = 1;
			$update = true;
		}

		if ($this->getAssignedTo() != $assigned_to) {
			$this->addHistory('assigned_to',$this->getAssignedTo());
			$sqlu .= " assigned_to='$assigned_to', ";
			$changes['assigned_to'] = 1;
			$update = true;
		}
		if ($summary && (addslashes($this->getSummary()) != htmlspecialchars($summary))) {
			$this->addHistory('summary', addslashes($this->getSummary()));
			$sqlu .= " summary='". htmlspecialchars($summary) ."', ";
			$changes['summary'] = 1;
			$update = true;
		}

		if ($details) {
			$this->addMessage($details);
			$changes['details'] = 1;
			$send_message=true;
		}

		//
		//	Enter the timestamp if we are changing to closed
		//
		if ($status_id != 1) {
			$now=time();
			$sqlu .= " close_date='$now', ";
			$this->addHistory('close_date',$this->getCloseDate());
			$update = true;
		}

		/*
			Finally, update the artifact itself
		*/
		if ($update){
			$sql = "UPDATE artifact 
				SET 
				$sqlu
				group_artifact_id='$new_artifact_type_id'
				WHERE 
				artifact_id='". $this->getID() ."'
				AND group_artifact_id='$artifact_type_id'";

			$result=db_query($sql);

			if (!$result || db_affected_rows($result) < 1) {
				$this->setError('Error - update failed!');
				echo db_error();
				db_rollback();
				return false;
			} else {
				$this->fetchData($this->getID());
//error check the data fetching??
			}
		}

		/*
			handle canned responses

			Instantiate ArtifactCanned and get the body of the message
		*/
		if ($canned_response != 100) {
			//don't care if this response is for this group - could be hacked
			$acr=new ArtifactCanned($this->ArtifactType,$canned_response);
			if (!$acr || !is_object($acr)) {
				$this->setError('Artifact: Could Not Create Canned Response Object');
			} elseif ($acr->isError()) {
				$this->setError('Artifact: '.$acr->getErrorMessage());
			} else {
				$body = addslashes($acr->getBody());
				if ($body) {
					if (!$this->addMessage(util_unconvert_htmlspecialchars($body),user_getname().'@'.$GLOBALS['sys_users_host'])) {
						db_rollback();
						return false;
					} else {
						$send_message=true;
					}
				} else {
					$this->setError('Artifact: Unable to Use Canned Response');
					return false;
				}
			}
		}

		if ($update || $send_message){
			/*
				now send the email
			*/
			$this->mailFollowup(2, false, $changes);
			db_commit();
			return true;
		} else {
			//nothing changed, so cancel the transaction
			$this->setError('Nothing Changed - Update Cancelled');
			db_rollback();
			return false;
		}
	}

	// function which returns proper marker for changed properties
	function marker($prop_name,$changes) {
		if ($changes[$prop_name]) {
			return '>';
		} else {
			return '';
		}
	}				

	/**
	 *	mailFollowup() - send out an email update for this artifact
	 *
	 *	@param	int		(1) initial/creation (2) update
	 *	@param	array	Array of additional addresses to mail to
	 *	@param	array	Array of fields changed in this update 
	 *	@access private
	 *	@return true/false
	 */
	function mailFollowup($type, $more_addresses=false, $changes='') {
		global $sys_datefmt;

		if (!$changes) {
			$changes=array();
		}

		if ($this->ArtifactType->useResolution()) {
			$resolution_text = $this->marker('resolution',$changes).
			 "Resolution: ". $this->getResolutionName() ."\n";
		}

		$body = $this->ArtifactType->getName() ." item #". $this->getID() .", was opened at ". date( $sys_datefmt, $this->getOpenDate() ). 
			"\nYou can respond by visiting: ".
			"\nhttp://".$GLOBALS['sys_default_domain']."/tracker/?func=detail&atid=". $this->ArtifactType->getID() .
				"&aid=". $this->getID() .
				"&group_id=". $this->ArtifactType->Group->getID() .
			"\n\n".
			$this->marker('category',$changes).
			 "Category: ". $this->getCategoryName() ."\n".
			$this->marker('artifact_group',$changes).
			 "Group: ". $this->getArtifactGroupName() ."\n".
			$this->marker('status',$changes).
			 "Status: ". $this->getStatusName() ."\n".
			$resolution_text.
			$this->marker('priority',$changes).
			 "Priority: ". $this->getPriority() ."\n".
			"Submitted By: ". $this->getSubmittedRealName() .
			" (". $this->getSubmittedUnixName(). ")"."\n".
			$this->marker('assigned_to',$changes).
			 "Assigned to: ". $this->getAssignedRealName() .
			 " (". $this->getAssignedUnixName(). ")"."\n".
			$this->marker('summary',$changes).
			 "Summary: ". util_unconvert_htmlspecialchars( $this->getSummary() );
			
			
		$subject='[ '. $this->ArtifactType->Group->getUnixName() . '-' . $this->ArtifactType->getName() . '-' . $this->getID() .' ] '. util_unconvert_htmlspecialchars( $this->getSummary() );

		if ($type > 1) {
			/*
				get all the email addresses that are monitoring this request
			*/
			$monitor_ids =& $this->getMonitorIds();
		}

		if ($more_addresses) {
			$emails[] = $more_addresses;
		}
		//we don't email the current user
		if ($this->getAssignedTo() != user_getid()) {
			$monitor_ids[] = $this->getAssignedTo();
		}
		if ($this->getSubmittedBy() != user_getid()) {
			$monitor_ids[] = $this->getSubmittedBy();
		}
		//initial submission
		if ($type==1) {
			//if an email is set for this ArtifactType
			//add that address to the BCC: list
			if ($this->ArtifactType->getEmailAddress()) {
				$emails[] = $this->ArtifactType->getEmailAddress();
			}
		} else {
			//update
			if ($this->ArtifactType->emailAll()) {
				$emails[] = $this->ArtifactType->getEmailAddress();
			}
		}

		$body .= "\n\nInitial Comment:".
			"\n".util_unconvert_htmlspecialchars( $this->getDetails() ) .
			"\n\n----------------------------------------------------------------------";

		if ($type > 1) {
			/*
				Now include the followups
			*/
			$result2=$this->getMessages();

			$rows=db_numrows($result2);
		
			if ($result2 && $rows > 0) {
				for ($i=0; $i<$rows; $i++) {
					//
					//	for messages posted by non-logged-in users, 
					//	we grab the email they gave us
					//
					//	otherwise we use the confirmed one from the users table
					//
					if (db_result($result2,$i,'user_id') == 100) {
						$emails[] = db_result($result2,$i,'from_email');
					} else {
						$monitor_ids[] = db_result($result2,$i,'user_id');
					}


					$body .= "\n\n";
					if ($i == 0) {
						$body .= $this->marker('details',$changes);
					}
					$body .= "Comment By: ". db_result($result2,$i,'realname') . " (".db_result($result2,$i,'user_name').")".
					"\nDate: ". date( $sys_datefmt,db_result($result2,$i,'adddate') ).
					"\n\nMessage:".
					"\n".util_unconvert_htmlspecialchars( db_result($result2,$i,'body') ).
					"\n\n----------------------------------------------------------------------";
				}	   
			}

		}

		$body .= "\n\nYou can respond by visiting: ".
		"\nhttp://$GLOBALS[sys_default_domain]/tracker/?func=detail&atid=". $this->ArtifactType->getID() .
			"&aid=". $this->getID() .
			"&group_id=". $this->ArtifactType->Group->getID();

		//only send if some recipients were found
		if (count($emails) < 1 && count($monitor_ids) < 1) {
			return true;
		}

		//now remove all duplicates from the email list
		if (count($emails) > 0) {
			$BCC=implode(',',array_unique($emails));
		}

		if (count($monitor_ids) < 1) {
			$monitor_ids=array();
		} else {
			$monitor_ids=array_unique($monitor_ids);
		}
		/*
			Send the email
		*/
		util_handle_message($monitor_ids,$subject,$body,$BCC);
		return true;
	}

}

?>
