<?php   
/**
 *	Group object
 *
 *	Sets up database results and preferences for a group and abstracts this info.
 *
 *	Foundry.class and Project.class call this.
 *
 *	Project.class contains all the deprecated API from the old group.php file
 *
 *	DEPENDS on user.php being present and setup properly
 *
 *	GENERALLY YOU SHOULD NEVER INSTANTIATE THIS OBJECT DIRECTLY
 *	USE group_get_object() to instantiate properly
 *
 * @version   $Id$
 * @author Tim Perdue <tperdue@valinux.com>
 * @date 2000-08-28
 *
 * This file is part of GForge.
 *
 * GForge is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * GForge is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GForge; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

require_once('common/tracker/ArtifactTypes.class');
require_once('common/forum/Forum.class');
require_once('common/pm/ProjectGroup.class');
require_once('common/include/Role.class');
require_once('common/frs/FRSPackage.class');
require_once('common/docman/DocumentGroup.class');
require_once('www/include/BaseLanguage.class');

//the license_id of "Other/proprietary" license
define('GROUP_LICENSE_OTHER',126);

$GROUP_OBJ=array();

/**
 *  group_get_object() - Get the group object.
 *
 *  group_get_object() is useful so you can pool group objects/save database queries
 *  You should always use this instead of instantiating the object directly.
 *
 *  You can now optionally pass in a db result handle. If you do, it re-uses that query
 *  to instantiate the objects.
 *
 *  IMPORTANT! That db result must contain all fields
 *  from groups table or you will have problems
 *
 *  @param		int		Required
 *  @param		int		Result set handle ("SELECT * FROM groups WHERE group_id=xx")
 *  @return a group object or false on failure
 */
function &group_get_object($group_id,$res=false) {
	//create a common set of group objects
	//saves a little wear on the database

	//automatically checks group_type and 
	//returns appropriate object
	
	global $GROUP_OBJ;
	if (!isset($GROUP_OBJ["_".$group_id."_"])) {
		if ($res) {
			//the db result handle was passed in
		} else {
			$res=db_query("SELECT * FROM groups WHERE group_id='$group_id'");
		}
		if (!$res || db_numrows($res) < 1) {
			$GROUP_OBJ["_".$group_id."_"]=false;
		} else {
			/*
				check group type and set up object
			*/
			if (db_result($res,0,'type_id')==1) {
				//project
				$GROUP_OBJ["_".$group_id."_"]= new Group($group_id,$res);
			} else {
				//invalid
				$GROUP_OBJ["_".$group_id."_"]=false;
			}
		}
	}
	return $GROUP_OBJ["_".$group_id."_"];
}

function &group_get_objects($id_arr) {
	global $GROUP_OBJ;
	for ($i=0; $i<count($id_arr); $i++) {
		//
		//	See if this ID already has been fetched in the cache
		//
		if (!isset($GROUP_OBJ["_".$id_arr[$i]."_"])) {
			$fetch[]=$id_arr[$i];
		} else {
			$return[] =& $GROUP_OBJ["_".$id_arr[$i]."_"];
		}
	}
	if (count($fetch) > 0) {
		$res=db_query("SELECT * FROM groups WHERE group_id IN ('".implode($fetch,'\',\'') ."')");
		while ($arr =& db_fetch_array($res)) {
			$GROUP_OBJ["_".$arr['group_id']."_"] = new Group($arr['group_id'],$arr);
			$return[] =& $GROUP_OBJ["_".$arr['group_id']."_"];
		}
	}
	return $return;
}

function &group_get_object_by_name($groupname) {
	$res=db_query("SELECT * FROM groups WHERE unix_group_name='$groupname'");
	return group_get_object(db_result($res,0,'group_id'),$res);
}

function &group_get_objects_by_name($groupname_arr) {
	$sql="SELECT group_id FROM groups WHERE unix_group_name IN ('".implode($groupname_arr,'\',\'')."')";
	$res=db_query($sql);
	$arr =& util_result_column_to_array($res,0);
	return group_get_objects($arr);
}

class Group extends Error {
	/**
	 * Associative array of data from db.
	 * 
	 * @var array $data_array.
	 */
	var $data_array;

	/**
	 * Permissions data row from db.
	 * 
	 * @var array $perm_data_array.
	 */
	var $perm_data_array;

	/**
	 * Whether the use is an admin/super user of this project.
	 *
	 * @var bool $is_admin.
	 */
	var $is_admin;

	/**
	 * Artifact types result handle.
	 * 
	 * @var int $types_res.
	 */
	var $types_res;

	/**
	 * Associative array of data for plugins.
	 * 
	 * @var array $plugins_array.
	 */
	var $plugins_array;

	/**
	 *	Group - Group object constructor - use group_get_object() to instantiate.
	 *
	 *	@param	int		Required - group_id of the group you want to instantiate.
	 *	@param	int		Database result from select query OR associative array of all columns.
	 */
	function Group($id=false, $res=false) {
		$this->Error();
		if (!$id) {
			//setting up an empty object
			//probably going to call create()
			return true;
		}
		if (!$res) {
			if (!$this->fetchData($id)) {
				return false;
			}
		} else {
			//
			//	Assoc array was passed in
			//
			if (is_array($res)) {
				$this->data_array =& $res;
			} else {
				if (db_numrows($res) < 1) {
					//function in class we extended
					$this->setError('Group Not Found');
					$this->data_array=array();
					return false;
				} else {
					//set up an associative array for use by other functions
					db_reset_result($res);
					$this->data_array =& db_fetch_array($res);
				}
			}
		}
		
		$systemGroups = array(GROUP_IS_NEWS, GROUP_IS_STATS, GROUP_IS_PEER_RATINGS);
		if(!$this->isPublic() && !in_array($id, $systemGroups)) {
			$perm =& $this->getPermission(session_get_user());

			if (!$perm || !is_object($perm) || !$perm->isMember()) {
				// cannot use $Language as it is not created yet
				$this->setError('Permission denied');
				return false;
			}
		}
		return true;
	}

	/**
	 *	fetchData - May need to refresh database fields if an update occurred.
	 *
	 *	@param	int	The group_id.
	 */
	function fetchData($group_id) {
		$res = db_query("SELECT * FROM groups WHERE group_id='$group_id'");
		if (!$res || db_numrows($res) < 1) {
			$this->setError('fetchData():: '.db_error());
			return false;
		}
		$this->data_array =& db_fetch_array($res);
		return true;
	}

	/**
	 *	create - Create new group.
	 *
	 *	This method should be called on empty Group object.
	 *  
	 *  @param	object	The User object.
	 *  @param	string	The full name of the user.
	 *  @param	string	The Unix name of the user.
	 *  @param	string	The new group description.
	 *  @param	int	The ID of the license to use.
	 *  @param	string	The 'other' license to use if any.
	 *  @param	string	The purpose of the group.
	 */
	function create(&$user, $full_name, $unix_name, $description, $license, $license_other, $purpose, $unix_box='shell1', $scm_box='cvs1') {

		// $user is ignored - anyone can create pending group

		if ($this->getID()!=0) {
			$this->setError("Group::create: Group object already exists");
			return false;
		}

		srand((double)microtime()*1000000);
		$random_num = rand(0,1000000);

		db_begin();

		$res = db_query("
			INSERT INTO groups (
				group_name,
				is_public,
				unix_group_name,
				short_description,
				http_domain,
				homepage,
				status,
				unix_box,
				scm_box,
				license,
				register_purpose,
				register_time,
				license_other,
				rand_hash
			)
			VALUES (
				'".htmlspecialchars($full_name)."',
				1,
				'$unix_name',
				'".htmlspecialchars($description)."',
				'$unix_name.".$GLOBALS['sys_default_domain']."',
				'$unix_name.".$GLOBALS['sys_default_domain']."',
				'P',
				'$unix_box',
				'$scm_box',
				'$license',
				'".htmlspecialchars($purpose)."',
				".time().",
				'".htmlspecialchars($license_other)."',
				'".md5($random_num)."'
			)
		");

		if (!$res || db_affected_rows($res) < 1) {
			$this->setError('ERROR: Could not create group: '.db_error());
			db_rollback();
			return false;
		}

		$id = db_insertid($res, 'groups', 'group_id');
		if (!$id) {
			$this->setError('ERROR: Could not get group id: '.db_error());
			db_rollback();
			return false;
		}

		//
		// Now, make the user an admin
		//
		$sql="INSERT INTO user_group ( user_id, group_id, admin_flags,
			cvs_flags, artifact_flags, forum_flags, role_id)
			VALUES ( ".$user->getID().", '$id', 'A', 1, 2, 2, 1)";

		$res=db_query($sql);
		if (!$res || db_affected_rows($res) < 1) {
			$this->setError('ERROR: Could not add admin to newly created group: '.db_error());
			db_rollback();
			return false;
		}

		if (!$this->fetchData($id)) {
			db_rollback();
			return false;
		}
		db_commit();
		$this->sendNewProjectNotificationEmail();
		return true;
	}


	/**
	 *	updateAdmin - Update core properties of group object.
	 *
	 *	This function require site admin privilege.
	 *
	 *	@param	object	User requesting operation (for access control).
	 *	@param	bool	Whether group is publicly accessible (0/1).
	 *	@param	string	Project's license (string ident).
	 *	@param	int		Group type (1-project, 2-foundry).
	 *	@param	string	Machine on which group's home directory located.
	 *	@param	string	Domain which serves group's WWW.
	 *	@return status.
	 *	@access public.
	 */
	function updateAdmin(&$user, $is_public, $license, $type_id, $unix_box, $http_domain) {
		global $Language;

		$perm =& $this->getPermission($user);

		if (!$perm || !is_object($perm)) {
			$this->setError($Language->getText('general','permnotget'));
			return false;
		}

		if (!$perm->isSuperUser()) {
			$this->setError($Language->getText('general','permdenied'));
			return false;
		}

		db_begin();

		$res = db_query("
			UPDATE groups
			SET is_public='$is_public',
				license='$license',type_id='$type_id',
				unix_box='$unix_box',http_domain='$http_domain'
			WHERE group_id='".$this->getID()."'
		");

		if (!$res || db_affected_rows($res) < 1) {
			$this->setError('ERROR: DB: Could not change group properties: '.db_error());
			db_rollback();
			return false;
		}

		// Log the audit trail
		if ($is_public != $this->isPublic()) {
			$this->addHistory('is_public', $this->isPublic());
		}
		if ($license != $this->data_array['license']) {
			$this->addHistory('license', $this->data_array['license']);
		}
		if ($type_id != $this->data_array['type_id']) {
			$this->addHistory('type_id', $this->data_array['type_id']);
		}
		if ($unix_box != $this->data_array['unix_box']) {
			$this->addHistory('unix_box', $this->data_array['unix_box']);
		}
		if ($http_domain != $this->data_array['http_domain']) {
			$this->addHistory('http_domain', $this->data_array['http_domain']);
		}

		if (!$this->fetchData($this->getID())) {
			db_rollback();
			return false;
		}
		db_commit();
		return true;
	}

	/**
	 *	update - Update number of common properties.
	 *
	 *	Unlike updateAdmin(), this function accessible to project admin.
	 *
	 *	@param	object	User requesting operation (for access control).
	 *	@param	bool	Whether group is publicly accessible (0/1).
	 *	@param	string	Project's license (string ident).
	 *	@param	int		Group type (1-project, 2-foundry).
	 *	@param	string	Machine on which group's home directory located.
	 *	@param	string	Domain which serves group's WWW.
	 *	@return int	status.
	 *	@access public.
	 */
	function update(&$user, $group_name,$homepage,$short_description,$use_mail,$use_survey,$use_forum,
		$use_pm,$use_pm_depend_box,$use_scm,$use_news,$use_docman,
		$new_doc_address,$send_all_docs,$logo_image_id,
		$enable_pserver,$enable_anonscm,
		$use_ftp,$use_tracker,$use_frs,$use_stats) {
		global $Language;

		$perm =& $this->getPermission($user);

		if (!$perm || !is_object($perm)) {
			$this->setError($Language->getText('general','permnotget'));
			return false;
		}

		if (!$perm->isAdmin()) {
			$this->setError($Language->getText('general','permdenied'));
			return false;
		}

		// Validate some values
		if (!$group_name) {
			$this->setError('Invalid Group Name');
			return false;
		}

		if ($new_doc_address && !validate_email($new_doc_address)) {
			$this->setError('New Doc Address Appeared Invalid');
			return false;
		}

		// in the database, these all default to '1',
		// so we have to explicity set 0
		if (!$use_mail) {
			$use_mail=0;
		}
		if (!$use_survey) {
			$use_survey=0;
		}
		if (!$use_forum) {
			$use_forum=0;
		}
		if (!$use_pm) {
			$use_pm=0;
		}
		if (!$use_pm_depend) {
			$use_pm_depend=0;
		}
		if (!$use_scm) {
			$use_scm=0;
		}
		if (!$use_news) {
			$use_news=0;
		}
		if (!$use_docman) {
			$use_docman=0;
		}
		if (!$send_all_tasks) {
			$send_all_tasks=0;
		}
		if (!$use_ftp) {
			$use_ftp=0;
		}
		if (!$use_tracker) {
			$use_tracker=0;
		}
		if (!$use_frs) {
			$use_frs=0;
		}
		if (!$use_stats) {
			$use_stats=0;
		}
		if (!$send_all_docs) {
			$send_all_docs=0;
		}

		if (!$homepage) {
			$homepage=$GLOBALS['sys_default_domain'].'/projects/'.$this->getUnixName().'/';
		}

		if (strlen($short_description)>255) {
			$this->setError('Error updating project information: Maximum length for Project Description is 255 chars.');
			return false;
		}

		db_begin();

		//XXX not yet actived logo_image_id='$logo_image_id', 
		$sql = "
			UPDATE groups
			SET 
				group_name='".htmlspecialchars($group_name)."',
				homepage='$homepage',
				short_description='".htmlspecialchars($short_description)."',
				use_mail='$use_mail',
				use_survey='$use_survey',
				use_forum='$use_forum',
				use_pm='$use_pm',
				use_pm_depend_box='$use_pm_depend_box',
				use_scm='$use_scm',
				use_news='$use_news',
				use_docman='$use_docman',
				new_doc_address='$new_doc_address',
				send_all_docs='$send_all_docs',
		";
		if ($enable_pserver != '') {
		$sql .= "
				enable_pserver='$enable_pserver',
		";
		}
		if ($enable_anonscm != '') {
		$sql .= "
				enable_anonscm='$enable_anonscm',
		";
		}
		$sql .= "
				use_ftp='$use_ftp',
				use_tracker='$use_tracker',
				use_frs='$use_frs',
				use_stats='$use_stats'
			WHERE group_id='".$this->getID()."'
		";
		$res = db_query($sql);

		if (!$res || db_affected_rows($res) < 1) {
			$this->setError('Error updating project information: '.db_error());
			db_rollback();
			return false;
		}

		// Log the audit trail
		$this->addHistory('Changed Public Info', '');

		if (!$this->fetchData($this->getID())) {
			db_rollback();
			return false;
		}
		db_commit();
		return true;
	}

	/**
	 *	getID - Simply return the group_id for this object.
	 *
	 *	@return int group_id.
	 */
	function getID() {
		return $this->data_array['group_id'];
	}

	/**
	 *	getType() - Foundry, project, etc.
	 *
	 *	@return	int	The type flag from the database.
	 */
	function getType() {
		return $this->data_array['type_id'];
	}


	/**
	 *	getStatus - the status code.
	 *
	 *	Statuses	char	include I,H,A,D.
	 */
	function getStatus() {
		return $this->data_array['status'];
	}

	/**
	 *	setStatus - set the status code.
	 *
	 *	Statuses include I,H,A,D.
	 *
	 *	@param	object	User requesting operation (for access control).
	 *	@param	string	Status value.
	 *	@return	boolean	success.
	 *	@access public.
	 */
	function setStatus(&$user, $status) {
		global $Language,$SYS;

		$perm =& $this->getPermission($user);
		if (!$perm || !is_object($perm)) {
			$this->setPermissionDeniedError();
			return false;
		} elseif (!$perm->isSuperUser()) {
			$this->setPermissionDeniedError();
			return false;
		}

		//	Projects in 'A' status can only go to 'H' or 'D'
		//	Projects in 'D' status can only go to 'A'
		//	Projects in 'P' status can only go to 'A' OR 'D'
		//	Projects in 'I' status can only go to 'P'
		//	Projects in 'H' status can only go to 'A' OR 'D'
		$allowed_status_changes = array(
			'AH'=>1,'AD'=>1,'DA'=>1,'PA'=>1,'PD'=>1,
			'IP'=>1,'HA'=>1,'HD'=>1
		);			  

		// Check that status transition is valid
		if ($this->getStatus() != $status
			&& !$allowed_status_changes[$this->getStatus().$status]) {
			$this->setError('Invalid Status Change');
			return false;
		}

		db_begin();

		$res = db_query("UPDATE groups
			SET status='$status'
			WHERE group_id='". $this->getID()."'");

		if (!$res || db_affected_rows($res) < 1) {
			$this->setError('ERROR: DB: Could not change group status: '.db_error());
			db_rollback();
			return false;
		}

		if ($status=='A') {
			// Activate LDAP group, if not yet
			if (!$SYS->sys_check_group($this->getID())) {

				if (!$SYS->sys_create_group($this->getID())) {
					$this->setError($SYS->getErrorMessage());
					db_rollback();
					return false;
				}

				if (!$this->activateUsers()) {
					db_rollback();
					return false;
				}
			}

		/* Otherwise, the group is not active, and make sure that
		   LDAP group is not active either */
		} else if ($SYS->sys_check_group($this->getID())) {

			if (!$SYS->sys_remove_group($this->getID())) {
				$this->setError($SYS->getErrorMessage());
				db_rollback();
				return false;
			}

		}

		db_commit();

		// Log the audit trail
		if ($status != $this->getStatus()) {
			$this->addHistory('status', $this->getStatus());
		}

		$this->data_array['status'] = $status;
		return true;
	}

	/**
	 *	isProject - Simple boolean test to see if it's a project or not.
	 *
	 *	@return	boolean is_project.
	 */
	function isProject() {
		if ($this->getType()==1) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 *	isPublic - Simply returns the is_public flag from the database.
	 *
	 *	@return	boolean	is_public.
	 */
	function isPublic() {
		return $this->data_array['is_public'];
	}

	/**
	 *	isActive - Database field status of 'A' returns true.
	 *
	 *	@return	boolean	is_active.
	 */
	function isActive() {
		if ($this->getStatus()=='A') {
			return true;
		} else {
			return false;
		}
	}

	/**
	 *  getUnixName - the unix_name
	 *
	 *  @return	string	unix_name.
	 */
	function getUnixName() {
		return strtolower($this->data_array['unix_group_name']);
	}

	/**
	 *  getPublicName - the full-length public name.
	 *
	 *  @return	string	The group_name.
	 */
	function getPublicName() {
		return htmlspecialchars($this->data_array['group_name']);
	}

	/**
	 *  getRegisterPurpose - the text description of the purpose of this project.
	 *
	 *  @return	string	The description.
	 */
	function getRegisterPurpose() {
		return $this->data_array['register_purpose'];
	}

	/**
	 *  getDescription	- the text description of this project.
	 *
	 *  @return	string	The description.
	 */
	function getDescription() {
		return $this->data_array['short_description'];
	}

	/**
	 *  getStartDate - the unix time this project was registered.
	 *
	 *  @return int (unix time) of registration.
	 */
	function getStartDate() {
		return $this->data_array['register_time'];
	}

	/**
	 *  getLogoImageID - the id of the logo in the database for this project.
	 *
	 *  @return	int	The ID of logo image in db_images table (or 100 if none).
	 */
	function getLogoImageID() {
		return $this->data_array['logo_image_id'];
	}

	/**
	 *  getUnixBox - the hostname of the unix box where this project is located.
	 *
	 *  @return	string	The name of the unix machine for the group.
	 */
	function getUnixBox() {
		return $this->data_array['unix_box'];
	}

	/**
	 *  getSCMBox - the hostname of the scm box where this project is located.
	 *
	 *  @return	string	The name of the unix machine for the group.
	 */
	function getSCMBox() {
		if ( $GLOBALS['sys_scm_single_host'] == '1' ) {
			return $GLOBALS['sys_scm_host'];
		} else {
			return $this->data_array['scm_box'];
		}
	}
	/**
	 * setSCMBox - the hostname of the scm box where this project is located.
	 *
	 * @param	string The name of the new SCM_BOX
	 */
	function setSCMBox($scm_box) {
		if ( $GLOBALS['sys_scm_single_host'] == '1' ) {
			$this->setError('Trying to change SCM_BOX when sys_scm_single_host selected');
			return false;
		} else {
			db_begin();
			$sql = "UPDATE groups SET scm_box = '$scm_box' WHERE group_id = ".$this->getID();
			$res = db_query($sql);
			if ($res) {
				$this->data_array['scm_box']=$scm_box;
				db_commit();
				return true;
			} else {
				db_rollback();
				$this->setError('Couldn\'t insert SCM_BOX to database');
				return false;
			}
		}
	}

	/**
	 *  getDomain - the hostname.domain where their web page is located.
	 *
	 *  @return	string	The name of the group [web] domain.
	 */
	function getDomain() {
		return $this->data_array['http_domain'];
	}

	/**
	 *  getLicense	- the license they chose.
	 *
	 *  @return	string	ident of group license.
	 */
	function getLicense() {
		return $this->data_array['license'];
	}

	/**
	 *  getLicenseOther - optional string describing license.
	 *
	 *  @return	string	The custom license.
	 */
	function getLicenseOther() {
		if ($this->getLicense() == GROUP_LICENSE_OTHER) {
			return $this->data_array['license_other'];
		} else {
			return '';
		}
	}

	/**
	 *  getRegistrationPurpose - the text description of the purpose of this project.
	 *
	 *  @return	string	The application for project hosting.
	 */
	function getRegistrationPurpose() {
		return $this->data_array['register_purpose'];
	}


	/**
	 * getGroupAdmins() - Get group admin list
	 *
	 */
	function getGroupAdmins() {
		// this function gets all group admins in order to send Jabber and mail messages
		$q = "SELECT user_id FROM user_group WHERE admin_flags = 'A' AND group_id = ".$this->getID();
		$res = db_query($q);
		$users = array();
		for($i=0;$i<db_numrows($res);$i++) {
			array_push($users,db_result($res,$i,'user_id'));
		}
		return implode(",",$users);
	}
		
	/**
	 * getMemberRole() - Get member role
	 *
	 * @param	   int	 The user ID
	 *
	 */
	function getMemberRole($user_id) {
		$q = "SELECT member_role FROM user_group WHERE user_id = $user_id AND group_id = ".$this->getID();
		$res = db_query($q);
		if(db_numrows($res)) {
			return db_result($res,0,'member_role');
		}
		return 0;
	}
		
	/*

		Common Group preferences for tools

	*/

	/**
	 *	enableAnonSCM - whether or not this group has opted to enable Anonymous SCM.
	 *
	 *	@return boolean enable_scm.
	 */
	function enableAnonSCM() {
		if ($this->usesSCM()) {
			return $this->data_array['enable_anonscm'];
		} else {
			return false;
		}
	}

	function SetUsesAnonSCM ($booleanparam) {
		db_begin () ;
		$booleanparam = $booleanparam ? 1 : 0 ;
		$sql = "UPDATE groups SET enable_anonscm = $booleanparam WHERE group_id = ".$this->getID() ;
		$res = db_query($sql);
		if ($res) {
			$this->data_array['enable_anonscm']=$booleanparam;
			db_commit () ;
		} else {
			db_rollback ();
			return false;
		}
	}

	/**
	 *	enablePserver - whether or not this group has opted to enable Pserver.
	 *
	 *	@return boolean	enable_pserver.
	 */
	function enablePserver() {
		if ($this->usesSCM()) {
			return $this->data_array['enable_pserver'];
		} else {
			return false;
		}
	}

	function SetUsesPserver ($booleanparam) {
		db_begin () ;
		$booleanparam = $booleanparam ? 1 : 0 ;
		$sql = "UPDATE groups SET enable_pserver = $booleanparam WHERE group_id = ".$this->getID() ;
		$res = db_query($sql);
		if ($res) {
			$this->data_array['enable_pserver']=$booleanparam;
			db_commit () ;
		} else {
			db_rollback();
			return false;
		}
	}

	/**
	 *	usesSCM - whether or not this group has opted to use SCM.
	 *
	 *	@return	boolean	uses_scm.
	 */
	function usesSCM() {
		global $sys_use_scm;
		if ($sys_use_scm) {
			return $this->data_array['use_scm'];
		} else {
			return false;
		}
	}

	/**
	 *	usesMail - whether or not this group has opted to use mailing lists.
	 *
	 *	@return	boolean uses_mail.
	 */
	function usesMail() {
		global $sys_use_mail;
		if ($sys_use_mail) {
			return $this->data_array['use_mail'];
		} else {
			return false;
		}
	}

	/**
	 * 	usesNews - whether or not this group has opted to use news.
	 *
	 *	@return	boolean	uses_news.
	 */
	function usesNews() {
		global $sys_use_news;
		if ($sys_use_news) {
			return $this->data_array['use_news'];
		} else {
			return false;
		}
	}

	/**
	 *	usesForum - whether or not this group has opted to use discussion forums.
	 *
	 *  @return	boolean	uses_forum.
	 */
	function usesForum() {
		global $sys_use_forum;
		if ($sys_use_forum) {
			return $this->data_array['use_forum'];
		} else {
			return false;
		}
	}	   

	/**
	 *  usesStats - whether or not this group has opted to use stats.
	 *
	 *  @return	boolean	uses_stats.
	 */
	function usesStats() {
		return $this->data_array['use_stats'];
	}

	/**
	 *  usesFRS - whether or not this group has opted to use file release system.
	 *
	 *  @return	boolean	uses_frs.
	 */
	function usesFRS() {
		global $sys_use_frs;
		if ($sys_use_frs) {
			return $this->data_array['use_frs'];
		} else {
			return false;
		}
	}

	/**
	 *  usesTracker - whether or not this group has opted to use tracker.
	 *
	 *  @return	boolean	uses_tracker.
	 */
	function usesTracker() {
		global $sys_use_tracker;
		if ($sys_use_tracker) {
			return $this->data_array['use_tracker'];
		} else {
			return false;
		}
	}

	/**
	 *  usesDocman - whether or not this group has opted to use docman.
	 *
	 *  @return	boolean	uses_docman.
	 */
	function usesDocman() {
		global $sys_use_docman;
		if ($sys_use_docman) {
			return $this->data_array['use_docman'];
		} else {
			return false;
		}
	}

	/**
	 *  usesFTP - whether or not this group has opted to use FTP.
	 *
	 *  @return	boolean	uses_ftp.
	 */
	function usesFTP() {
		global $sys_use_ftp;
		if ($sys_use_ftp) {
			return $this->data_array['use_ftp'];
		} else {
			return false;
		}
	}

	/**
	 *  usesSurvey - whether or not this group has opted to use surveys.
	 *
	 *  @return	boolean	uses_survey.
	 */
	function usesSurvey() {
		global $sys_use_survey;
		if ($sys_use_survey) {
			return $this->data_array['use_survey'];
		} else {
			return false;
		}
	}	   

	/**
	 *  usesPM - whether or not this group has opted to Project Manager.
	 *
	 *  @return	boolean	uses_projman.
	 */
	function usesPM() {
		global $sys_use_pm;
		if ($sys_use_pm) {
			return $this->data_array['use_pm'];
		} else {
			return false;
		}
	}

	function getPlugins() {
		if (!isset($this->plugins_data)) {
			$this->plugins_data = array () ;
			$sql="SELECT group_plugin.plugin_id, plugins.plugin_name
							  FROM group_plugin, plugins
				  WHERE group_plugin.group_id=".$this->getID()."
								AND group_plugin.plugin_id = plugins.plugin_id" ;
			$res=db_query($sql);
			$rows = db_numrows($res);

			for ($i=0; $i<$rows; $i++) {
				$plugin_id = db_result($res,$i,'plugin_id');
				$this->plugins_data[$plugin_id] = db_result($res,$i,'plugin_name');
			}
		}
		return $this->plugins_data ;
	}

	function usesPlugin($pluginname) {
		$plugins_data = $this->getPlugins() ;
		foreach ($plugins_data as $p_id => $p_name) {
			if ($p_name == $pluginname) {
				return true ;
			}
		}
		return false ;
	}

	function setPluginUse($pluginname, $val=true) {
		if ($val == $this->usesPlugin($pluginname)) {
			// State is already good, returning
			return true ;
		}
		$sql="SELECT plugin_id
			  FROM plugins
			  WHERE plugin_name = '" . $pluginname . "'" ;
		$res=db_query($sql);
		$rows = db_numrows($res);
		if ($rows == 0) {
			// Error: no plugin by that name
			return false ;
		}
		$plugin_id = db_result($res,0,'plugin_id');
		// Invalidate cache
		unset ($this->plugins_data) ;
		if ($val) {
			$sql="INSERT INTO group_plugin (group_id, plugin_id)
							  VALUES (". $this->getID() . ", ". $plugin_id .")" ;
			$res=db_query($sql);
			return $res ;
		} else {
			$sql="DELETE FROM group_plugin
				WHERE group_id = ". $this->getID() . "
				AND plugin_id = ". $plugin_id ;
			$res=db_query($sql);
			return $res ;
		}
	}

	/**
	 *  getDocEmailAddress - get email address to send doc notifications to.
	 *
	 *  @return	string	email address.
	 */
	function getDocEmailAddress() {
		return $this->data_array['new_doc_address'];
	}

	/**
	 *  DocEmailAll - whether or not this group has opted to use receive notices on all doc updates.
	 *
	 *  @return	boolean	email_on_all_doc_updates.
	 */
	function docEmailAll() {
		return $this->data_array['send_all_docs'];
	}


	/**
	 *	getHomePage - The URL for this project's home page.
	 *
	 *	@return	string	homepage URL.
	 */
	function getHomePage() {
		return $this->data_array['homepage'];
	}

	/**
	 *	getPermission - Return a Permission for this Group and the specified User.
	 *
	 *	@param	object	The user you wish to get permission for (usually the logged in user).
	 *	@return	object	The Permission.
	 */
	function &getPermission(&$_user) {
		return permission_get_object(&$this, &$_user);
	}


	/**
	 *	userIsAdmin - Return if for this Group the User is admin.
	 *
	 *	@return boolean	is_admin.
	 */
	function userIsAdmin() {
		$perm =& $this->getPermission( session_get_user() );
		return $perm->isAdmin();
	}

	/*


		Basic functions to add/remove users to/from a group
		and update their permissions


	*/

	/**
	 *	addUser - controls adding a user to a group.
	 *  
	 *  @param	string	Unix name of the user to add OR integer user_id.
	 *	@param	int	The role_id this user should have.
	 *	@return	boolean	success.
	 *	@access public.
	 */
	function addUser($user_unix_name,$role_id) {
		global $Language,$SYS;
		/*
			Admins can add users to groups
		*/

		$perm =& $this->getPermission( session_get_user() );
		if (!$perm || !is_object($perm) || !$perm->isAdmin()) {
			$this->setPermissionDeniedError();
			return false;
		}

		db_begin();
		
		/*
			get user id for this user's unix_name
		*/
		if (eregi('[^0-9]',$user_unix_name)) {
			$res_newuser = db_query("SELECT * FROM users WHERE user_name='". strtolower($user_unix_name) ."'");
		} else {
			$res_newuser = db_query("SELECT * FROM users WHERE user_id='". intval($user_unix_name) ."'");
		}
		if (db_numrows($res_newuser) > 0) {
			//
			//	make sure user is active
			//
			if (db_result($res_newuser,0,'status') != 'A') {
				$this->setError('User is not active. Only active users can be added.');
				db_rollback();
				return false;
			}

			//
			//	user was found - set new user_id var
			//
			$user_id = db_result($res_newuser,0,'user_id');

			//
			//	if not already a member, add them
			//
			$res_member = db_query("SELECT user_id 
				FROM user_group 
				WHERE user_id='$user_id' AND group_id='". $this->getID() ."'");

			if (db_numrows($res_member) < 1) {
				//
				//	user was not already a member
				//
				//	if no unix account, give them a unix_uid
				//
				if ( !db_result($res_newuser,0,'unix_uid') ) {
					$user=&user_get_object($user_id,$res_newuser);
					if (!$user->setUpUnixUID()) {
						$this->setError('ERROR: Cannot assign UNIX uid to the user: '.$user->getErrorMessage());
						db_rollback();
						return false;
					}
					if (!$SYS->sys_create_user($user_id)) {
						$this->setError($SYS->getErrorMessage());
						db_rollback();
						return false;
					}
				} else {
					//
					//	User already had unix account
					//
					if (!$SYS->sys_check_create_user($user_id)) {
						$this->setError($SYS->getErrorMessage());
						db_rollback();
						return false;
					}
				}
				//
				//	Create this user's row in the user_group table
				//
				$res=db_query("INSERT INTO user_group 
					(user_id,group_id,admin_flags,forum_flags,project_flags,
					doc_flags,cvs_flags,member_role,release_flags,artifact_flags)
					VALUES ('$user_id','". $this->getID() ."','','0','0','0','1','100','0','0')");

				//verify the insert worked
				if (!$res || db_affected_rows($res) < 1) {
					$this->setError('ERROR: Could Not Add User To Group: '.db_error());
					db_rollback();
					return false;
				}
				//
				//	set up their ldap info
				//
				if (!$SYS->sys_group_add_user($this->getID(),$user_id)) {
					$this->setError('addUser::ld3::'.$SYS->getErrorMessage());
					db_rollback();
					return false;
				}
				//
				//	Add to all forums
				//
				$sql="INSERT INTO forum_perm (group_forum_id,user_id,perm_level) 
					SELECT group_forum_id,$user_id,1
					FROM forum_group_list 
					WHERE group_id='".$this->getID()."'";
				$res=db_query($sql);
				if (!$res) {
					$this->setError('Adding to forums: '.db_error());
					db_rollback();
					return false;
				}
				//
				//	Add to all subprojects
				//
				$sql="INSERT INTO project_perm (group_project_id,user_id,perm_level) 
					SELECT group_project_id,$user_id,2
					FROM project_group_list 
					WHERE group_id='".$this->getID()."'";
				$res=db_query($sql);
				if (!$res) {
					$this->setError('Adding to subprojects: '.db_error());
					db_rollback();
					return false;
				}
				//
				//	Add to all trackers
				//
				$sql="INSERT INTO artifact_perm (group_artifact_id,user_id,perm_level) 
					SELECT group_artifact_id,$user_id,2
					FROM artifact_group_list 
					WHERE group_id='".$this->getID()."'";
				$res=db_query($sql);
				if (!$res) {
					$this->setError('Adding to subprojects: '.db_error());
					db_rollback();
					return false;
				}

				$role = new Role($this,$role_id);
				if (!$role || !is_object($role)) {
					$this->setError('Error Getting Role Object');
					db_rollback();
					return false;
				} elseif ($role->isError()) {
					$this->setError('addUser::roleget::'.$role->getErrorMessage());
					db_rollback();
					return false;
				}
				if (!$role->setUser($user_id)) {
					$this->setError('addUser::role::setUser'.$role->getErrorMessage());
					db_rollback();
					return false;
				}

			} else {
				//
				//  user was already a member
				//  make sure they are set up with a unix_uid,
				//  LDAP entry and membership
				//
				$user=&user_get_object($user_id,$res_newuser);
				if (!$user->setUpUnixUID()) {
					$this->setError('ERROR: Cannot assign UNIX uid to the user: '.$user->getErrorMessage());
					db_rollback();
					return false;
				} else {
					$user->fetchData($user->getID());
					if (!$SYS->sys_check_create_user($user_id)) {
						$this->setError($SYS->getErrorMessage());
						db_rollback();
						return false;
					}
					$role = new Role($this,$role_id);
					if (!$role || !is_object($role)) {
						$this->setError('Error Getting Role Object');
						db_rollback();
						return false;
					} elseif ($role->isError()) {
						$this->setError('addUser::roleget::'.$role->getErrorMessage());
						db_rollback();
						return false;
					}
					if (!$role->setUser($user_id)) {
						$this->setError('addUser::role::setUser'.$role->getErrorMessage());
						db_rollback();
						return false;
					}
					db_commit();
					return true;
				}
			}
		} else {
			//
			//	user doesn't exist
			//
			$this->setError('ERROR: User does not exist');
			db_rollback();
			return false;
		}
		//
		//	audit trail
		//
		$this->addHistory('Added User',$user_unix_name);
		db_commit();
		return true;
	}

	/**
	 *  removeUser - controls removing a user from a group.
	 * 
	 *  Users can remove themselves.
	 *
	 *  @param	int		The ID of the user to remove.
	 *	@return	boolean	success.
	 */ 
	function removeUser($user_id) {
		global $Language,$SYS;

		if ($user_id==user_getid()) {
			//users can remove themselves
			//everyone else must be a project admin
		} else {
			$perm =& $this->getPermission( session_get_user() );

			if (!$perm || !is_object($perm) || !$perm->isAdmin()) {
				$this->setPermissionDeniedError();
				return false;
			}
		}
	
		db_begin();
		$res=db_query("DELETE FROM user_group 
			WHERE group_id='".$this->getID()."' 
			AND user_id='$user_id'");
		if (!$res || db_affected_rows($res) < 1) {
			$this->setError('ERROR: DB: User not removed.'.db_error());
			db_rollback();
			return false;
		} else {
			//
			//	remove them from artifact types
			//
			db_query("DELETE FROM artifact_perm 
				WHERE group_artifact_id 
				IN (SELECT group_artifact_id 
				FROM artifact_group_list 
				WHERE group_id='".$this->getID()."') 
				AND user_id='$user_id'");
			//
			//	remove them from subprojects
			//
			db_query("DELETE FROM project_perm 
				WHERE group_project_id 
				IN (SELECT group_project_id 
				FROM project_group_list 
				WHERE group_id='".$this->getID()."') 
				AND user_id='$user_id'");
			//
			//	remove them from forums
			//
			db_query("DELETE FROM forum_perm 
				WHERE group_forum_id 
				IN (SELECT group_forum_id 
				FROM forum_group_list 
				WHERE group_id='".$this->getID()."') 
				AND user_id='$user_id'");

			if (!$SYS->sys_group_remove_user($this->getID(),$user_id)) {
				$this->setError($SYS->getErrorMessage());
				db_rollback();
				return false;
			}
			//audit trail
			$this->addHistory('removed user',$user_id);
		}
		db_commit();
		return true;
	}

	/**	 
	 *  updateUser - controls updating a user's role in this group.
	 *
	 *  @param	int		The ID of the user.
	 *	@param	int		The role_id to set this user to.
	 *	@return	boolean	success.
	 */	 
	function updateUser($user_id,$role_id) {
		global $Language,$SYS;

		$perm =& $this->getPermission( session_get_user() );
		if (!$perm || !is_object($perm) || !$perm->isAdmin()) {
			$this->setPermissionDeniedError();
			return false;
		}

		$role = new Role($this,$role_id);
		if (!$role || !is_object($role)) {
			$this->setError('Could Not Get Role');
			return false;
		} elseif ($role->isError()) {
			$this->setError('Role: '.$role->getErrorMessage());
			return false;
		}
		if (!$role->setUser($user_id)) {
			$this->setError('Role: '.$role->getErrorMessage());
			return false;
		}

		$this->addHistory('updated user',$user_id);
		return true;
	}

	/**
	 *	addHistory - Makes an audit trail entry for this project.
	 *
	 *  @param	string	The name of the field.
	 *  @param	string	The Old Value for this $field_name.
	 *	@return database result handle.
	 *	@access public.
	 */
	function addHistory($field_name, $old_value) {
		$sql="
			INSERT INTO group_history(group_id,field_name,old_value,mod_by,adddate) 
			VALUES ('". $this->getID() ."','$field_name','$old_value','". user_getid() ."','".time()."')
		";
		return db_query($sql);
	}		  

	/**
	 *	activateUsers - Make sure that group members have unix accounts.
	 *
	 *	Setup unix accounts for group members. Can be called even
	 *	if members are already active. 
	 *
	 *	@access private.
	 */
	function activateUsers() {

		/*
			Activate member(s) of the project
		*/

		$member_res = db_query("SELECT user_id
			FROM user_group
			WHERE group_id='".$this->getID()."'");

		$rows = db_numrows($member_res);

		if ($rows > 0) {

			for ($i=0; $i<$rows; $i++) {

				$member =& user_get_object(db_result($member_res,$i,'user_id'));

				if (!$member || !is_object($member)) {
					$this->setError('Error getting member object');
					return false;
				} else if ($member->isError()) {
					$this->setError('Error getting member object: '.$member->getErrorMessage());
					return false;
				}

				if (!$this->addUser($member->getUnixName(),1)) {
					return false;
				}
			}

		 }

		 return true;
	}

	/**
	 *	approve - Approve pending project.
	 *
	 *	@param	object	The User object who is doing the updating.
	 *	@access public
	 */
	function approve(&$user) {

		if ($this->getStatus()=='A') {
			$this->setError("Group already active");
			return false;
		}

		db_begin();

		// Step 1: Activate group and create LDAP entries
		if (!$this->setStatus($user, 'A')) {
			db_rollback();
			return false;
		}

		//
		//
		//	Tracker Integration
		//
		//
		$ats = new ArtifactTypes($this);
		if (!$ats || !is_object($ats)) {
			$this->setError('Error creating ArtifactTypes object');
			db_rollback();
			return false;
		} else if ($ats->isError()) {
			$this->setError('ATS1 '.$ats->getErrorMessage());
			db_rollback();
			return false;
		}
		if (!$ats->createTrackers()) {
			$this->setError('ATS2 '.$ats->getErrorMessage());
			db_rollback();
			return false;
		}

		//
		//
		//	Forum Integration
		//
		//
		$f = new Forum($this);
		if (!$f->create('Open-Discussion','General Discussion',1,'',1,0)) {
			$this->setError('F1 '.$f->getErrorMessage());
			db_rollback();
			return false;
		}
		$f = new Forum($this);
		if (!$f->create('Help','Get Public Help',1,'',1,0)) {
			$this->setError('F2 '.$f->getErrorMessage());
			db_rollback();
			return false;
		}
		$f = new Forum($this);
		if (!$f->create('Developers','Project Developer Discussion',0,'',1,0)) {
			$this->setError('F3 '.$f->getErrorMessage());
			db_rollback();
			return false;
		}

		//
		//
		//	Doc Mgr Integration
		//
		//
		$dg = new DocumentGroup($this);
		if (!$dg->create('Uncategorized Submissions')) {
			$this->setError('DG1 '.$dg->getErrorMessage());
			db_rollback();
			return false;
		}

		//
		//
		//	FRS integration
		//
		//
		$frs = new FRSPackage($this);
		if (!$frs->create($this->getUnixName())) {
			$this->setError('FRSP '.$frs->getErrorMessage());
			db_rollback();
			return false;
		}

		//
		//
		//	PM Integration
		//
		//
		$pg = new ProjectGroup($this);
		if (!$pg->create('To Do','Things We Have To Do',1)) {
			$this->setError('PG1 '.$pg->getErrorMessage());
			db_rollback();
			return false;
		}
		$pg = new ProjectGroup($this);
		if (!$pg->create('Next Release','Items For Our Next Release',1)) {
			$this->setError('PG2 '.$pg->getErrorMessage());
			db_rollback();
			return false;
		}

		//
		//
		//	Set Default Roles
		//
		//
		$role = new Role($this);
		$todo = array_keys($role->defaults);
		for ($c=0; $c<count($todo); $c++) {
			$role = new Role($this);
			if (!$role->createDefault($todo[$c])) {
				$this->setError('R'.$c.' '.$role->getErrorMessage());
				db_rollback();
				return false;
			}
		}
		db_commit();

		$this->sendApprovalEmail();
		$this->addHistory('approved', 'x');

		return true;
	}



	/**
	 *	sendApprovalEmail - Send new project email.
	 *
	 *	@return	boolean	success.
	 *	@access public.
	 */
	function sendApprovalEmail() {
		$res_admins = db_query("
			SELECT users.user_name,users.email,users.language
			FROM users,user_group
			WHERE users.user_id=user_group.user_id
			AND user_group.group_id='".$this->getID()."'
			AND user_group.admin_flags='A'
		");

		if (db_numrows($res_admins) < 1) {
			$this->setError("Group does not have any administrators.");
			return false;
		}

		// send one email per admin
		while ($row_admins = db_fetch_array($res_admins)) {
			$l = new BaseLanguage () ;
			$l->loadLanguageID($row_admins['language']);

			//																			   $1					  $2					$3							  $4						  $5						$6
			$message=stripcslashes($l->getText('classgroup', 'acceptedproject', array($this->getPublicName(), $this->getUnixName(), $GLOBALS['sys_default_domain'], $GLOBALS['sys_shell_host'], $GLOBALS['sys_scm_host'], $this->getID(), $GLOBALS['sys_name'])));
	
			util_send_message($row_admins['email'], $l->getText('classgroup', 'acceptedprojecttitle', array($GLOBALS['sys_name'])), $message);
		}

		return true;
	}


	/**
	 *	sendRejectionEmail - Send project rejection email.
	 *
	 *	This function sends out a rejection message to a user who
	 *	registered a project.
	 *
	 *	@param	int	The id of the response to use.
	 *	@param	string	The rejection message.
	 *	@return completion status.
	 *	@access public.
	 */
	function sendRejectionEmail($response_id, $message="zxcv") {
		$res_admins = db_query("
			SELECT u.email, u.language
			FROM users u, user_group ug
			WHERE ug.group_id='".$this->getID()."'
			AND u.user_id=ug.user_id;
		");

		if (db_numrows($res_admins) < 1) {
			$this->setError("Group does not have any administrators.");
			return false;
		}
		
		while ($row_admins = db_fetch_array($res_admins)) {
			$l = new BaseLanguage () ;
			$l->loadLanguageID($row_admins['language']);

			$response=stripcslashes($l->getText('classgroup', 'rejectedproject', array($this->getPublicName(), $this->getUnixName(), $GLOBALS['sys_name'])));

			// Check to see if they want to send a custom rejection response
			if ($response_id == 0) {
				$response .= stripcslashes($message);
			} else {
				$response .= db_result(db_query("
				SELECT response_text
				FROM canned_responses
				WHERE response_id='$response_id'
			"), 0, "response_text");
			}

			util_send_message($row_admins['email'], $l->getText('classgroup', 'rejectedprojecttitle', array($GLOBALS['sys_name'])), $response);
		}

		return true;
	}

	/**
	 *	sendNewProjectNotificationEmail - Send new project notification email.
	 *
	 *	This function sends out a notification email to the
	 *	SourceForge admin user when a new project is
	 *	submitted.
	 *
	 *	@return	boolean	success.
	 *	@access public.
	 */
	function sendNewProjectNotificationEmail() {

		$res = db_query("SELECT users.email, users.language
	 			FROM users,user_group
				WHERE group_id=1 
				AND user_group.admin_flags='A'
				AND users.user_id=user_group.user_id;");
		
		if (db_numrows($res) < 1) {
			$this->setError("There is no administrator to send the mail.");
			return false;
		} else {
			for ($i=0; $i<db_numrows($res) ; $i++) {
				$admin_email = db_result($res,$i,'email') ;
				$l = new BaseLanguage () ;
				$l->loadLanguageID(db_result($res,$i,'language'));
				
				$message=stripcslashes($l->getText('classgroup', 'newprojectnotification', array($GLOBALS['sys_name'], $this->getPublicName(), $this->getRegistrationPurpose(), $this->getLicense(), $GLOBALS['sys_default_domain'])));
				util_send_message($admin_email, $l->getText('classgroup', 'newprojectnotificationtitle', array($GLOBALS['sys_name'])), $message);
			}
		}
		
		// Get the email of the user who wants to register the project
		$res = db_query("SELECT u.email, u.language
				 FROM users u, user_group ug
				 WHERE ug.group_id='".$this->getID()."' AND u.user_id=ug.user_id;");

		if (db_numrows($res) < 1) {
			$this->setError("Cound not find user who has submitted the project.");
			return false;
		} else {
			for ($i=0; $i<db_numrows($res) ; $i++) {
				$email = db_result($res, $i, 'email');
				$l = new BaseLanguage () ;
				$l->loadLanguageID(db_result($res,$i,'language'));
				
				$message=stripcslashes($l->getText('classgroup', 'newprojectnotification_submitter', array($GLOBALS['sys_name'], $this->getPublicName(), $this->getRegistrationPurpose(), $this->getLicense(), $GLOBALS['sys_default_domain'])));
				
				util_send_message($email, $l->getText('classgroup', 'newprojectnotificationtitle', array($GLOBALS['sys_name'])), $message);
			}
		}
		

	  return true;
	}
}

/**
 * group_getname() - get the group name
 *
 * @param	   int	 The group ID
 * @deprecated
 *
 */
function group_getname ($group_id = 0) {
	$grp = &group_get_object($group_id);
	if ($grp) {
		return $grp->getPublicName();
	} else {
		return 'Invalid';
	}
}

/**
 * group_getunixname() - get the unixname for a group
 *
 * @param	   int	 The group ID
 * @deprecated
 *
 */
function group_getunixname ($group_id) {
	$grp = &group_get_object($group_id);
	if ($grp) {
		return $grp->getUnixName();
	} else {
		return 'Invalid';
	}
}

/**
 * group_get_result() - Get the group object result ID.
 *
 * @param	   int	 The group ID
 * @deprecated
 *
 */
function &group_get_result($group_id=0) {
	$grp = &group_get_object($group_id);
	if ($grp) {
		return $grp->getData();
	} else {
		return 0;
	}
}

// Local Variables:
// mode: php
// c-file-style: "bsd"
// End:

?>
