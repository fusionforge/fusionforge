<?php
/**
 *	PluginManager object
 *
 *	Provides an abstract way to handle plugins
 *
 * SourceForge: Breaking Down the Barriers to Open Source Development
 * This file is copyright (c) Roland Mas <lolando@debian.org>, 2002
 *
 * $Id$
 *
 */

/**
 *  plugin_manager_get_object() - Get the Plugin Manager object.
 */
function &plugin_manager_get_object() {
	//create a common set of group objects
	//saves a little wear on the database

	//automatically checks group_type and 
	//returns appropriate object

	global $PLUGINMANAGER_OBJ;
	if (!isset($PLUGINMANAGER_OBJ)) {
		$PLUGINMANAGER_OBJ = new PluginManager() ;
	}
	return $PLUGINMANAGER_OBJ ;
}

class PluginManager extends Error {
	var $data_array ;
	var $db_result ;
	var $plugins_array ;
	var $plugins_objects ;
	var $plugins_to_hooks ;
	var $hooks_to_plugins ;

	function PluginManager () {
		$this->Error() ;
		$this->plugins_objects = array () ;
	}

	function GetPlugins () {
		if (!isset($this->plugins_data)) {
			$this->plugins_data = array () ;
			$sql="SELECT * FROM plugins" ;
			$res=db_query($sql);
			$rows = db_numrows($res);

			for ($i=0; $i<$rows; $i++) {
				$plugin_id = db_result($res,$i,'plugin_id');
				$this->plugins_data[$plugin_id] = db_result($res,$i,'plugin_name');
			}
		}
		return $this->plugins_data ;
	}

	function PluginIsInstalled ($pluginname) {
		$plugins_data = $this->getPlugins() ;
		foreach ($plugins_data as $p_id => $p_name) {
			if ($p_name == $pluginname) {
				return true ;
			}
		}
		return false ;
	}

	function RegisterPlugin ($pluginname, $pluginobject) {
		$this->plugins_objects[$pluginname] = $pluginobject ;
	}

	function Init () {
		$this->LoadPlugins ;
		$this->SetupHooks ;
	}

	function LoadPlugins () {
		$plugins_data = $this->getPlugins() ;
		$include_path = "/usr/lib/sourceforge/plugins/" ;
		foreach ($plugins_data as $p_id => $p_name) {
			$filename = $include_path . $p_name . "/include/".$p_name."-init.php" ;
			if (file_exists ($filename)) {
				require_once ($filename) ;
			}
		}
	}

	function SetupHooks () {
		$this->plugins_to_hooks = array ();
		foreach ($this->plugins_objects as $p_name => $p_obj) {
			$this->plugins_to_hooks [$p_name] = $p_obj->GetHooks () ;
		}
		$this->hooks_to_plugins = array () ;
		foreach ($this->plugins_to_hooks as $p_name => $hook_name) {
			if (!isset ($this->hooks_to_plugins[$hook_name])) {
				$this->hooks_to_plugins[$hook_name] = array () ;
			}
			$this->hooks_to_plugins[$hook_name][] = $p_name ;
		}
	}

	function RunHooks ($hookname, $params=false) {
		echo "\n<!-- Starting hook $hookname -->" ;
		$p_list = $this->hooks_to_plugins[$hookname] ;
		if (isset ($p_list)) {
			echo "hooks_to_plugins: --" . $this->hooks_to_plugins . "-- <br>\n" ;
			echo "p_list: --" . $p_list . "-- <br>\n" ;
			foreach ($p_list as $p_name) {
				$p_obj = $this->plugins_objects[$p_name] ;
				$p_obj->CallHook ($hookname, $params) ;
			}
		} 
		echo "<!-- End of hook $hookname -->\n" ;
	}
}

plugin_manager_get_object() ;

$PLUGINMANAGER_OBJ->Init () ;

// Local Variables:
// mode: php
// c-file-style: "bsd"
// End:

?>
