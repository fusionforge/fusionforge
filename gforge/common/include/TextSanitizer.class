<?php

/**
 * GForge Text Sanitizer Class
 *
 * 
 *
 * This file is part of GForge.
 *
 * GForge is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * GForge is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GForge; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/* Text Sanitizer Class
	by Daniel Perez (danielperez.arg@gmail.com) - 2005
*/


Class TextSanitizer extends Error {
	
	
			/**
	 *  convertExtendedCharsForEmail - Grabs some text with html special characters and converts them to the corresponding character. 
	 *
	 *	@param   string		The input string
	 *	@return  string		The output string
	 */
	function convertExtendedCharsForEmail($text) {
		$text = str_replace("&acute;","'",$text); //it´s better to see that char in the email than the html entity
		$text = str_replace("&amp;","&",$text);
		$text = str_replace("&quot;",'"',$text);
		$text = str_replace("&nbsp;",' ',$text);
		$text = str_replace("&lt;",'<',$text);
		$text = str_replace("&gt;",'>',$text);
		$text = str_replace("&deg;",'°',$text);
		$text = str_replace("&lt;br&gt;","\n",$text);
		$text = str_replace("&lt;br /&gt;","\n",$text);
		return $text;
	}
	
			/**
	 *  convertNeededTagsForEmail - Grabs some text with html tags and those which are important for display (<br>, <p>) convert accordingly
	 *
	 *	@param   string		The input string
	 *	@return  string		The output string
	 */	
	function convertNeededTagsForEmail($text) {
		$text = str_replace("<br>","\n",$text);
		$text = str_replace("<br />","\n",$text);
		$text = str_replace("<br/>","\n",$text);
		return $text;
	}
	
	function unhtmlentities ($string) {
		$trans_tbl = get_html_translation_table (HTML_SPECIALCHARS );
		$trans_tbl = array_flip ($trans_tbl );
		$res = strtr ($string ,$trans_tbl );
		$res = str_replace("&amp;quot;",'"',$res);
		return $res;
	}
	
		/**
	 *  SanitizeHtml - Grabs some text with all kinds of html code and parses it to make it safe
	 *
	 *	@param   string		The HTML Code
	 *	@return  string		The HTML output
	 */
	function SanitizeHtml($input) {
		
	$input = htmlspecialchars($input); // first strip all chars
		
	//to hell with <script> </script> tags
	$script_open = '/(&lt;\s*[s|S][c|C][r|R][i|I][p|P][t|T]\s*&gt;)/';
	$input = preg_replace($script_open,"<b>No script tags of any kind allowed</b>",$input);
		
	//search for <strong>
	// for some tags -> ^¬ is used because we don´t want to match the last &gt;, but the most near one.. so to "cheat" on the regexp we use a character we know won´t 
	// 					appear between the tag and the closing >, but however anything else is permitted. this is used for tags like <img> which have 
	//					attributes apart from the tag
	$strong_open = '/(&lt;[^&lt;|^&gt;|^\/]*[s|S][t|T][r|R][o|O][n|N][g|G][^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
	while (preg_match($strong_open,$input)) {
		$input = preg_replace($strong_open,"<strong>",$input);
	}
	$strong_close = '/(&lt;[^&lt;|^&gt;]*\/[s|S][t|T][r|R][o|O][n|N][g|G][^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
	while (preg_match($strong_close,$input)) {
		$input = preg_replace($strong_close,"</strong>",$input);
	}
	
		
	//search for <em>
		$em_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[e|E][m|M][^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($em_open,$input)) {
			$input = preg_replace($em_open,"<em>",$input);
		}
		$em_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[e|E][m|M][^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($em_close,$input)) {
			$input = preg_replace($em_close,"</em>",$input);
		}
		
		
	//search for <u>
		$u_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[u|U][^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($u_open,$input)) {
			$input = preg_replace($u_open,"<u>",$input);
		}
		$u_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[u|U][^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($u_close,$input)) {
			$input = preg_replace($u_close,"</u>",$input);
		}	
		
	//search for <strike>
		$strike_open = '/(&lt;[^&lt;|^&gt;|^\/]*[s|S][t|T][r|R][i|I][k|K][e|E][^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($strike_open,$input)) {
			$input = preg_replace($strike_open,"<strike>",$input);			
		}
		$strike_close = '/(&lt;[^&lt;|^&gt;]*\/[s|S][t|T][r|R][i|I][k|K][e|E][^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($strike_close,$input)) {
			$input = preg_replace($strike_close,"</strike>",$input);			
		}		
		
	//search for <sub>
		$sub_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[s|S][u|U][b|B][^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($sub_open,$input)) {
			$input = preg_replace($sub_open,"<sub>",$input);					
		}
		$sub_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[s|S][u|U][b|B][^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($sub_close,$input)) {
			$input = preg_replace($sub_close,"</sub>",$input);					
		}		

	//search for <sup>
		$sup_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[s|S][u|U][p|P][^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($sup_open,$input)) {
			$input = preg_replace($sup_open,"<sup>",$input);
		}
		$sup_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[s|S][u|U][p|P][^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($sup_close,$input)) {
			$input = preg_replace($sup_close,"</sup>",$input);
		}		
		
	//search for <h1>
		$h1_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[h|H]1[^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($h1_open,$input)) {
			$input = preg_replace($h1_open,"<h1>",$input);
		}
		$h1_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[h|H]1[^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($h1_close,$input)) {
			$input = preg_replace($h1_close,"</h1>",$input);
		}

	//search for <h2>
		$h2_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[h|H]2[^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($h2_open,$input)) {
			$input = preg_replace($h2_open,"<h2>",$input);
		}
		$h2_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[h|H]2[^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($h2_close,$input)) {
			$input = preg_replace($h2_close,"</h2>",$input);
		}
				
	//search for <h3>
		$h3_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[h|H]3[^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($h3_open,$input)) {
			$input = preg_replace($h3_open,"<h3>",$input);
		}
		$h3_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[h|H]3[^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($h3_close,$input)) {
			$input = preg_replace($h3_close,"</h3>",$input);
		}

	//search for <h4>
		$h4_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[h|H]4[^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($h4_open,$input)) {
			$input = preg_replace($h4_open,"<h4>",$input);
		}
		$h4_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[h|H]4[^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($h4_close,$input)) {
			$input = preg_replace($h4_close,"</h4>",$input);
		}

	//search for <h5>
		$h5_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[h|H]5[^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($h5_open,$input)) {
			$input = preg_replace($h5_open,"<h5>",$input);
		}
		$h5_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[h|H]5[^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($h5_close,$input)) {
			$input = preg_replace($h5_close,"</h5>",$input);
		}

	//search for <h6>
		$h6_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[h|H]6[^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($h6_open,$input)) {
			$input = preg_replace($h6_open,"<h6>",$input);
		}
		$h6_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[h|H]6[^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($h6_close,$input)) {
			$input = preg_replace($h6_close,"</h6>",$input);
		}			
		
	//search for <address>
		$address_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[a|A][d|D][d|D][r|R][e|E][s|S][s|S][^\w]*&gt;)/ms';
		while (preg_match($address_open,$input)) {
			$input = preg_replace($address_open,"<address>",$input);
		}
		$address_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[a|A][d|D][d|D][r|R][e|E][s|S][s|S][^\w]*&gt;)/ms';
		while (preg_match($address_close,$input)) {
			$input = preg_replace($address_close,"</address>",$input);
		}		
		
	//search for <td>
		$td_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[t|T][d|D][^¬]*&gt;)/ms';
		while (preg_match($td_open,$input,$matches)) {
			$input = preg_replace($td_open,$this->unhtmlentities($matches[1]),$input,1);
		}
		$td_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[t|T][d|D][^\w]*&gt;)/ms';
		while (preg_match($td_close,$input)) {
			$input = preg_replace($td_close,"</td>",$input);
		}
		
	//search for <table>
		$table_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[t|T][a|A][b|B][l|L][e|E][^¬]*&gt;)/ms';
		while (preg_match($table_open,$input,$matches)) {
			$input = preg_replace($table_open,$this->unhtmlentities($matches[1]),$input,1);
		}		
		$table_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[t|T][a|A][b|B][l|L][e|E][^\w]*&gt;)/ms';
		while (preg_match($table_close,$input)) {
			$input = preg_replace($table_close,"</table>",$input);
		}
		
	//search for <tr>
		$tr_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[t|T][r|R][^¬]*&gt;)/ms';
		while (preg_match($tr_open,$input,$matches)) {
			$input = preg_replace($tr_open,$this->unhtmlentities($matches[1]),$input,1);
		}
		$tr_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[t|T][r|R][^\w]*&gt;)/ms';
		while (preg_match($tr_close,$input)) {
			$input = preg_replace($tr_close,"</tr>",$input);
		}
		
	//search for <tbody>
		$tbody_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[t|T][b|B][o|O][d|D][y|Y][^¬]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($tbody_open,$input)) {
			$input = preg_replace($tbody_open,"<tbody>",$input);
		}
		$tbody_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[t|T][b|B][o|O][d|D][y|Y][^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($tbody_close,$input)) {
			$input = preg_replace($tbody_close,"</tbody>",$input);
		}		
		

	//search for <caption>
		$caption_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[c|C][a|A][p|P][t|T][i|I][o|O][n|N][^\w]*&gt;)/ms';
		while (preg_match($caption_open,$input)) {
			$input = preg_replace($caption_open,"<caption>",$input);
		}
		$caption_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[c|C][a|A][p|P][t|T][i|I][o|O][n|N][^\w]*&gt;)/ms';
		while (preg_match($caption_close,$input)) {
			$input = preg_replace($caption_close,"</caption>",$input);
		}		
		
	//search for <ol>
		$ol_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[o|O][l|L][^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($ol_open,$input)) {
			$input = preg_replace($ol_open,"<ol>",$input);
		}
		$ol_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[o|O][l|L][^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($ol_close,$input)) {
			$input = preg_replace($ol_close,"</ol>",$input);
		}		
		
	//search for <ul>
		$ul_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[u|U][l|L][^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($ul_open,$input)) {
			$input = preg_replace($ul_open,"<ul>",$input);
		}
		$ul_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[u|U][l|L][^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($ul_close,$input)) {
			$input = preg_replace($ul_close,"</ul>",$input);
		}

	//search for <li>
		$li_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[l|L][i|I][^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($li_open,$input)) {
			$input = preg_replace($li_open,"<li>",$input);
		}
		$li_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[l|L][i|I][^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($li_close,$input)) {
			$input = preg_replace($li_close,"</li>",$input);
		}

	//search for <blockquote>
		$blockquote_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[b|B][l|L][o|O][c|C][k|K][q|Q][u|U][o|O][t|T][e|E][^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($blockquote_open,$input)) {
			$input = preg_replace($blockquote_open,"<blockquote>",$input);				
		}
		$blockquote_close = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*\/[b|B][l|L][o|O][c|C][k|K][q|Q][u|U][o|O][t|T][e|E][^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($blockquote_close,$input)) {
			$input = preg_replace($blockquote_close,"</blockquote>",$input);				
		}
		
	//search for <pre>
		$pre_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[p|P][r|R][e|E][^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($pre_open,$input)) {
			$input = preg_replace($pre_open,"<pre>",$input);				
		}
		$pre_close = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*\/[p|P][r|R][e|E][^\w]*&gt;)/ms'; // the ms modifier at the end needed because of newline.
		while (preg_match($pre_close,$input)) {
			$input = preg_replace($pre_close,"</pre>",$input);				
		}
		
	//search for <p>
		$p_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[p|P][^¬]*&gt;)/ms';
		while (preg_match($p_open,$input,$matches)) {
			$input = preg_replace($p_open,$this->unhtmlentities($matches[1]),$input,1);
		}
		$p_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[p|P][^\w]*&gt;)/ms';
		while (preg_match($p_close,$input)) {
			$input = preg_replace($p_close,"</p>",$input);
		}
	//search for <div>
		$div_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[d|D][i|I][v|V][^¬]*&gt;)/ms';
		while (preg_match($div_open,$input,$matches)) {
			$input = preg_replace($div_open,$this->unhtmlentities($matches[1]),$input,1);
		}
		$div_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[d|D][i|I][v|V][^\w]*&gt;)/ms';
		while (preg_match($div_close,$input)) {
			$input = preg_replace($div_close,"</div>",$input);
		}
	//search for <span>	
		$span_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[s|S][p|P][a|A][n|N][^¬]*&gt;)/ms';
		while (preg_match($span_open,$input,$matches)) {
			$input = preg_replace($span_open,$this->unhtmlentities($matches[1]),$input,1);
		}
		$span_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[s|S][p|P][a|A][n|N][^\w]*&gt;)/ms';
		while (preg_match($span_close,$input)) {
			$input = preg_replace($span_close,"</span>",$input);
		}
	//search for <img>
		$img_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[i|I][m|M][g|G][^¬]*&gt;)/ms';
		while (preg_match($img_open,$input,$matches)) {
			$input = preg_replace($img_open,$this->unhtmlentities($matches[1]),$input,1);
		}
		$img_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[i|I][m|M][g|G][^\w]*&gt;)/ms';
		while (preg_match($img_close,$input)) {
			$input = preg_replace($img_close,"</span>",$input);
		}
	//search for <a>	
		$a_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[a|A][^¬]*&gt;)/ms';
		while (preg_match($a_open,$input,$matches)) {
			$input = preg_replace($a_open,$this->unhtmlentities($matches[1]),$input,1);
		}
		$a_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[a|A][^\w]*&gt;)/ms';
		while (preg_match($a_close,$input)) {
			$input = preg_replace($a_close,"</a>",$input);
		}
	//search for <font>	
		$font_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[f|F][o|O][n|N][t|T][^¬]*&gt;)/ms';
		while (preg_match($font_open,$input,$matches)) {
			$input = preg_replace($font_open,$this->unhtmlentities($matches[1]),$input,1);
		}
		$font_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[f|F][o|O][n|N][t|T][^\w]*&gt;)/ms';
		while (preg_match($font_close,$input)) {
			$input = preg_replace($font_close,"</font>",$input);
		}
	//search for <hr>
		$hr_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*[h|H][r|R][^¬]*&gt;)/ms';
		while (preg_match($hr_open,$input,$matches)) {
			$input = preg_replace($hr_open,$this->unhtmlentities($matches[1]),$input,1);
		}
		$hr_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/[h|H][r|R][^\w]*&gt;)/ms';
		while (preg_match($hr_close,$input)) {
			$input = preg_replace($hr_close,"</hr>",$input);
		}

		/* if we leave this people could use css style in the forum... but that would apply to all messages... i´m leaving this commented for the moment
		$style_open = '/(&lt;[^&lt;|^&gt;|^\/|^\w]*style[^¬]*&gt;)/msi';
		while (preg_match($style_open,$input,$matches)) {
			$input = preg_replace($style_open,$this->unhtmlentities($matches[1]),$input,1);
		}
		$style_close = '/(&lt;[^&lt;|^&gt;|^\w]*\/style[^\w]*&gt;)/msi';
		while (preg_match($style_close,$input)) {
			$input = preg_replace($style_close,"</style>",$input);
		}	*/		
		
	//search for &nbsp; and let them be
		$nonbreakingspace = '/&amp;nbsp;/';
		$input = preg_replace($nonbreakingspace,"&nbsp;",$input);
		
	//search for &amp; and let them be
		$ampersand = '/&amp;amp;/';
		$input = preg_replace($ampersand,"&amp;",$input);
		
	//search for &quot; and let them be
		$quote = '/&amp;quot;/';
		$input = preg_replace($quote,"&quot;",$input);
		
	//search for &acute; and let them be
		
		$cute = '/&amp;acute;/';
		$input = preg_replace($cute,"&acute;",$input);
		
	//search for <br /> and let them be
		$br = '/&lt;br\s{0,3}\/&gt;/';
		$input = preg_replace($br,"<br/>",$input);
	
		return $input;
	}
}


?>
