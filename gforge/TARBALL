#!/usr/bin/perl
#
# SourceForge: Breaking Down the Barriers to Open Source Development
# Copyright 1999-2001 (c) VA Linux Systems
# http://sourceforge.net
#
# $Id: TARBALL,v 1.14 2001/07/09 21:54:14 pfalcon Exp $
#

use strict;

my $CVS_TAG;
tarball_init();

# ------------------------------------------------------------------------------
# 1. TARBALL
# ------------------------------------------------------------------------------
# 
# This document describes and executes the steps to create a SourceForge tarball
# release from CVS.  This file should be up to date in CVS for each
# release but should not be included in the actual tarball.
# 
# ------------------------------------------------------------------------------
# 2. RELEASE VERSION
# ------------------------------------------------------------------------------
# 
#
# RELEASE_VERSION=2.6.1pre4
# 
# The above string should be updated with each tarball release to be in
# the form "MAJOR.MINOR.REVISION".
# 
# ------------------------------------------------------------------------------
# 3. PROCESS
# ------------------------------------------------------------------------------
# 
# 0. tag CVS at SF_<VERSION>pre<N> where VERSION is listed above (2. RELEASE
#    VERSION) and (with dots replaced with underscores) N is an increasing
#    integer starting at 1.

system('cvs -Q tag SF_' . $CVS_TAG);

# 1. create a scratch directory 

system("rm -rf /tmp/scratch");
system('mkdir /tmp/scratch');
chdir('/tmp/scratch');

# 2. check out CVS into this directory 

system('cvs -z9 -Q export -rHEAD alexandria');

# 3. process the file removal list (4. REMOVE) 

process_removes();

# 4. process the file addition list (5. ADD) 

process_adds();

# 5. read and act on any notes (6. NOTES)

process_notes();

# 6. Create tarball in the form "SourceForge-VERSIONpreN.tar.gz"
#    and email a URL to the tarball to:
# 
#    - Engine Team and PS (sf-engine@valinux.com)
#    - SF.net Team (staff@sourceforge.net)

create_tarball();

# 7. review should generate changes in CVS to:
# 
#    - critical bugs
#    - files missing copyright statements
#    - README, AUTHORS, and other administrative files
# 
# 8. Goto 0.  Repeat until step 7 generates no comments.  Upon approval,
#    tag CVS at VERSION and repeat steps 1 through 5.  Create tarball in
#    the form "SourceForge-VERSION.tar.gz" and release on SourceForge.net.
# 
# ------------------------------------------------------------------------------
# 4. REMOVE
# ------------------------------------------------------------------------------
# 
# Note: this section should be a list of 'rm path/to/file'
# statements, suitable to be pasted into a console.

sub process_removes {
	my @stuff_to_remove = (
		'rm -rf alexandria/include',
		'rm -rf alexandria/backend/',
		'rm -rf alexandria/monitor/',
		'rm -rf alexandria/docs/',
		'rm -rf alexandria/utils/',
		'rm -f alexandria/TARBALL',
		'rm -f alexandria/pager.php3',
		'rm -f alexandria/www/my/intelagreement.php',
		'rm -f alexandria/www/admin/intelapprove.php',
		'rm -rf alexandria/www/themes/forged/',
		'rm -rf alexandria/www/themes/classic/',
		'rm -f alexandria/cronjobs/kt_dump.php',
		'rm -f alexandria/www/kernel_traffic.php'
	);

	foreach(@stuff_to_remove) {
		system $_;
	}
}

# ------------------------------------------------------------------------------
# 5. ADD
# ------------------------------------------------------------------------------

sub process_adds {
}

# ------------------------------------------------------------------------------
# 6. NOTES
# ------------------------------------------------------------------------------

sub process_notes {
        print "
WARNING: PLEASE READ CAREFULLY!

Automated preparation of SF source code snapshot has been completed.
In particular, removals and additions has been performed. You should
check that the latter were correct, however.

For your convenience, as the next step, tarball package will be created,
put at the appropriate place, and notice about snapshot availability
will be sent to concerned parties. But you should review resulting tarball
immediately to make sure it is correct, including (but not limited to):
1. Additions made are based on the latest versions of subfacilities.
2. Source code does not contain elements pertinent only to .net
   installation (www/index.php is obvious candidate for review).
If in doubt, ask via the staff list or IRC.

If you will find that changes are required you may make them (among
other means) to snapshot tree residing in /tmp/scratch and
recreate tarball with following command:

cd /tmp/scratch; tar cfz /usr/local/sourceforge.net/www/SourceForge-$ARGV[0].tar.gz alexandria

";
}

################################################################################

sub tarball_init {
	# Check that CVS tag is in place
	if (!$ARGV[0] || !($ARGV[0] =~ /((\d+)\.(\d+)\.(\d+))(\w*)/)) {
		print("Usage: TARBALL <major.minor.revision>\n");
		print("Example: TARBALL 1.2.3pre4\n");
		exit;
	}

	# Replace '.' with '_'
	$CVS_TAG = $ARGV[0];
	$CVS_TAG =~ s/[\.]/_/g;

	# Update this file with the new release name
	open(FH, "+< TARBALL") or die("Opening: $!");
	my $out = '';
	while (<FH>) {
		s/# RELEASE_VERSION=((\d+)\.(\d+)\.(\d+))(\w*)/# RELEASE_VERSION=$ARGV[0]/g;
		$out .= $_;
	}

	seek(FH, 0, 0)          or die("Can't seek to start of file: $!");
	print FH $out           or die("Can't print to file: $!");
	truncate(FH, tell(FH))  or die("Can't truncate file: $!");
	close(FH)               or die("Can't close file: $!");
}

sub create_tarball {
	# Create the tarball 
	system('tar cfz /usr/local/sourceforge.net/www/SourceForge-' . $ARGV[0] . '.tar.gz alexandria');

	# Send email notices
##	open(SENDMAIL, "|/usr/sbin/sendmail -oi -t -odq") or die("Can't fork for sendmail: $!\n");
	open(SENDMAIL, "|/usr/sbin/sendmail -oi -t") or die("Can't fork for sendmail: $!\n");
##	my $body = "From: noreply\@sourceforge.net
	my $body = "To: sf-engine\@valinux.com, staff\@sourceforge.net
Subject: New Tarball ($ARGV[0]) Created

A new SourceForge tarball is available for review at http://webdev.sourceforge.net/SourceForge-$ARGV[0].tar.gz";
	print SENDMAIL $body;
	close(SENDMAIL)	or warn("sendmail didn't close nicely: $!\n");

	# Remove the scratch dir
	# Don't do this as source tree will likely need manual
	# augmentation/cleanup for package release
#	system("rm -rf /tmp/scratch");
}
