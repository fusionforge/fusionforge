#! /usr/bin/make -f

FUSIONFORGE=FusionForge
PKGDIR=gforge
PKGNAME=$(shell head -1 $(PKGDIR)/debian/changelog | sed 's/ .*//')
PKGLETTER=$(shell echo $(PKGNAME) | cut -c1)
ORIGIN=debian.fusionforge.org
BRANCH=$(shell [ "$(shell echo $(basename $(CURDIR)) | sed 's/.*runk.*/trunk/')" = "trunk" ] && echo svn || echo brc)
BUILDPLACE=$(CURDIR)/builder/buildplace
BUILDFILES=$(CURDIR)/builder/buildfiles
BUILDRESULT=$(CURDIR)/result
COWBUILDERBASE=$(CURDIR)/builder/cow
PBUILDERTGZ=$(CURDIR)/builder/tgz
TARBALLS=$(CURDIR)/tarballs
APTCACHE=$(CURDIR)/builder/cache
DISTRIB=$(shell echo $(XDISTRIB) | cut -c2-)
LOCALREPODEB=/var/www/debian-fusionforge-$(BRANCH)
LOCALREPOUBU=/var/www/ubuntu-fusionforge-$(BRANCH)
SIGNKEY=yes
DEBIANLIST=1lenny 2squeeze 3sid
DEBIANLISTP=1etch
DEBLIST=$(DEBIANLIST) $(DEBIANLISTP)
UBUNTULIST=1hardy 1intrepid 1jaunty 1karmic
UBUNTULIST=1jaunty 1karmic 1lucid
UBUNTULISTP=1gutsy
UBULIST=$(UBUNTULIST) $(UBUNTULISTP)
# Try if a local mirror is available
LOCALMIRROR=http://localhost/ubuntu
UBUNTUOP=$(shell wget -q -S http://localhost/ubuntu -O /dev/null 2>&1 && echo "--mirror $(LOCALMIRROR)" || echo "--mirror http://archive.ubuntu.com/ubuntu") --debootstrap debootstrap
UBUNTUOP=--mirror http://archive.ubuntu.com/ubuntu --debootstrap debootstrap
DEBIANOP=--debootstrapopts --include=apt --debootstrap debootstrap
ASKPASS=--ask-passphrase
ASKPASS=

MAJOR=$(shell head -1 $(PKGDIR)/debian/changelog | sed 's/.*(\(.*\)-[^-]*).*/\1/')
in_svn_repo:= $(wildcard .svn/) 
ifeq ($(strip $(in_svn_repo)),) 
#in_bzr_repo:= $(shell bzr info | grep parent | cut -d: -f2-)
in_bzr_repo:= $(wildcard .bzr/)
ifeq ($(strip $(in_bzr_repo)),)
	svnrev=unknown
else
	#svnrev=$(shell LANG=C bzr log -r-1 2>&1 | grep "svn revno" | cut -d" " -f3)
	svnrev=bzr$(shell bzr revno)
endif
else
	svnrev=$(shell LANG=C svn info 2>&1 | grep Revision | cut -d: -f2| sed 's/ //g')
endif

MINOR=-1
MINOR=-$(BRANCH)$(svnrev)+$(XDISTRIB)

DEBUG=--debug
DEBUG=
DEBBUILDOPTS=--debbuildopts -sa 
ARCH=$(shell dpkg-architecture -qDEB_BUILD_ARCH)

UBUHOOK="--hookdir $(CURDIR)/hook/ubuntu"
# Some doc found there http://wiki.debian.org/cowbuilder
# Hook are not anymore necessary, but I keep as an example
UBUHOOK="--components 'main universe' --debootstrapopts --exclude=udev,pcmciautils,initramfs-tools"
UBUHOOK=--components "main universe" --hookdir $(CURDIR)/hook/ubuntu

ORIGFILE=$(PKGNAME)_$(MAJOR).orig.tar.gz
DSCFILE=$(PKGNAME)_$(MAJOR)$(MINOR).dsc
PDSCFILE=$(PKGNAME)_$(MAJOR)$(MINOR)+p.dsc
CHANGEFILE=$(PKGNAME)_$(MAJOR)$(MINOR)_$(ARCH).changes
PCHANGEFILE=$(PKGNAME)_$(MAJOR)$(MINOR)+p_$(ARCH).changes

# Quite heavy version, but still requires to be root
COWBUILDERCMD=cd $(BUILDPLACE) && dpkg-source -x $(BUILDFILES)/$(DSCFILE) ; cd $(BUILDPLACE)/$(PKGNAME)-$(MAJOR) && pdebuild --pbuilder cowbuilder --buildresult $(BUILDRESULT) -- --basepath $(COWBUILDERBASE)/base-$(DISTRIB).cow --buildplace $(BUILDPLACE) --aptcache $(APTCACHE) ; rm -rf $(BUILDPLACE)/$(PKGNAME)-$(MAJOR) 
# This one is with sudo and probably faster
COWBUILDERCMD=sudo /usr/sbin/cowbuilder --build --basepath $(COWBUILDERBASE)/base-$(DISTRIB).cow --configfile $(COWBUILDERBASE)/config $(BUILDFILES)/$(DSCFILE) $(DEBBUILDOPTS)

# This one is with pbuilder
PBUILDERCMD=cd $(BUILDFILES) && sudo /usr/sbin/pbuilder --build --basetgz $(PBUILDERTGZ)/base-$(DISTRIB).tgz --configfile $(PBUILDERTGZ)/config $(BUILDFILES)/$(PDSCFILE)

default: list

list:
	@echo ======================================================================================
	@echo '=                    Available targets are listed below ($(BRANCH))($(ARCH))         ='
	@echo ======================================================================================
	@cat Makefile.debian | grep '^.*:.*#$$' | sed 's/FUSIONFORGE/$(FUSIONFORGE)/' | sed 's/^\(.*:\).*#\(.*\)#$$/\1		\2/'
	@echo ======================================================================================

#
# Simple targets
#
#:======== Debian Builds ============#
lenny:    # Simply build lenny packages #
	$(MAKE) cowbuilddeb DEBIANLIST=1lenny

rlenny:   # Make a lenny repository #
	$(MAKE) repodeb DEBIANLIST=1lenny

squeeze:  # Simply build squeeze packages #
	$(MAKE) cowbuilddeb DEBIANLIST=2squeeze

rsqueeze: # Make a squeeze repository #
	$(MAKE) repodeb DEBIANLIST=2squeeze

sid:      # Simply build sid packages #
	$(MAKE) cowbuilddeb DEBIANLIST=3sid

rsid:     # Make a sid repository #
	$(MAKE) repodeb DEBIANLIST=3sid

#:======== Ubuntu Builds ============#
intrepid:  # Simply build intrepid packages #
	$(MAKE) cowbuildubu UBUNTULIST=1intrepid

rintrepid: # Make an intrepid repository #
	$(MAKE) repoubu UBUNTULIST=1intrepid

jaunty:    # Simply build jaunty packages #
	$(MAKE) cowbuildubu UBUNTULIST=1jaunty

rjaunty:   # Make a jaunty repository #
	$(MAKE) repoubu UBUNTULIST=1jaunty

karmic:    # Simply build karmic packages #
	$(MAKE) cowbuildubu UBUNTULIST=1karmic

rkarmic:   # Make a karmic repository #
	$(MAKE) repoubu UBUNTULIST=1karmic

lucid:    # Simply build lucid packages #
	$(MAKE) cowbuildubu UBUNTULIST=1lucid

rlucid:   # Make a lucid repository #
	$(MAKE) repoubu UBUNTULIST=1lucid

#:======== Other and Multiple Builds ============#
documentor_path=/tmp
documentor_url=http://downloads.sourceforge.net/project/phpdocu/PhpDoc/phpDocumentor-1.4.3/PhpDocumentor-1.4.3.tgz
documentor_file=PhpDocumentor-1.4.3.tgz
documentor_subdir=PhpDocumentor-1.4.3

#
# FUSIONFORGE
#

orig: $(TARBALLS)/$(ORIGFILE) # Make FUSIONFORGE orig file

#
# PHPDOCUMENTOR
#
# Get phpdocumentor, install phpdocumentor, build $(PKGNAME) phpdoc
phpdoc: $(PKGDIR)/docs/phpdoc/docs 

doc:
	(cd gforge/docs/docbook ; make debian)

cleandoc:
	(cd gforge/docs/docbook ; make clean)

phpdocumentor_get:
	[ ! -f $(documentor_path)/$(documentor_file) ] && \
        cd $(documentor_path) && \
        wget $(documentor_url) || true
phpdocumentor_unpack: phpdocumentor_get
	[ ! -d $(documentor_path)/$(documentor_subdir) ] && \
        cd $(documentor_path) && \
        tar -xvzf $(documentor_file) || true
$(documentor_path)/$(documentor_subdir)/patched: phpdocumentor_unpack
	cd $(documentor_path)/$(documentor_subdir) && \
        patch < $(CURDIR)/$(PKGDIR)/docs/phpdoc/phpDocumentor.ini.patch \
        && touch $(documentor_path)/$(documentor_subdir)/patched 
$(PKGDIR)/docs/phpdoc/docs: $(documentor_path)/$(documentor_subdir)/patched
	cd $(PKGDIR)/docs/phpdoc/ && ./makedoc.sh

#
# Build with cowbuilder or pbuilder
#

all: cleanorig cowbuilddeb cowbuildubu # ***** Build all package for debian and ubuntu ***** #

deploy: repodeb repoubu # ***** Deploy packages in Debian and Ubuntu repositories ***** #

repodeb: cowbuilddeb
	@for dist in $(DEBIANLIST); do \
	$(MAKE) -f Makefile.debian localrepo reprepro XDISTRIB=$$dist LOCALREPO=$(LOCALREPODEB) DISTRIBLIST="$(DEBLIST)" ; \
	done

repoubu: cowbuildubu
	@for dist in $(UBUNTULIST); do \
	$(MAKE) -f Makefile.debian localrepo reprepro XDISTRIB=$$dist LOCALREPO=$(LOCALREPOUBU) DISTRIBLIST="$(UBULIST)" ; \
	done

cowbuildtest:
	@echo "Will build $(PKGNAME)_$(MAJOR)$(MINOR)$(DISTRIB)"

cowbuilddeb: # ***** This is the one to cowbuild debian packages ***** #
	@for dist in $(DEBIANLIST); do \
	$(MAKE) -f Makefile.debian cowbuilddist XDISTRIB=$$dist DISTROOP="$(DEBIANOP)" ; \
	done

cowbuildubu: # ***** This is the one to cowbuild ubuntu packages ***** #
	@for dist in $(UBUNTULIST); do \
	$(MAKE) -f Makefile.debian cowbuilddist XDISTRIB=$$dist DISTROOP="$(UBUNTUOP)" HOOK='$(UBUHOOK)' ; \
	done

pbuilddeb: # pbuild debian packages (less recommended) #
	@for dist in $(DEBIANLISTP); do \
	$(MAKE) -f Makefile.debian pbuilddist XDISTRIB=$$dist DISTROOP="$(DEBIANOP)" LOCALREPO=$(LOCALREPODEB) ; \
	done

pbuildubu: # pbuild ubuntu packages (less recommended) #
	@for dist in $(UBUNTULISTP); do \
	$(MAKE) -f Makefile.debian pbuilddist XDISTRIB=$$dist DISTROOP="$(UBUNTUOP)" LOCALREPO=$(LOCALREPOUBU) ; \
	done

cowbuilddist: cowbuilderenv $(BUILDFILES) $(BUILDRESULT)/$(CHANGEFILE)

pbuilddist: pbuilderenv $(BUILDFILES) $(BUILDRESULT)/$(PCHANGEFILE)

$(BUILDRESULT)/$(CHANGEFILE): $(BUILDFILES)/$(DSCFILE)
	$(COWBUILDERCMD)

$(BUILDRESULT)/$(PCHANGEFILE): $(BUILDFILES)/$(PDSCFILE)
	$(PBUILDERCMD)

$(BUILDFILES)/$(DSCFILE):
	@echo "================> Have to cowbuild $@ <=================="
	cd $(PKGDIR) ; debclean
	find $(PKGDIR) -type f -or -type l | grep -v '/CVS/' | \
		grep -v '/.svn/' | grep -v '/.testbox/' | \
		grep -v rpm-specific | grep -v docs/phpdoc/docs | \
		grep -v ^./debian/ | cpio -pdumB $(BUILDFILES)/
	# Set version for given distrib
	cd $(BUILDFILES)/$(PKGDIR); dch -b -v $(MAJOR)$(MINOR) -D UNRELEASED "This is $(DISTRIB) autobuild"
	perl -pi -e "s/UNRELEASED/$(DISTRIB)/" $(BUILDFILES)/$(PKGDIR)/debian/changelog
	cd $(BUILDFILES) ; dpkg-source -b $(PKGDIR)
	rm -rf $(BUILDFILES)/$(PKGDIR)

$(BUILDFILES)/$(PDSCFILE):
	@echo "================> Have to pbuild $@ <=================="
	cd $(PKGDIR) ; debclean
	find $(PKGDIR) -type f -or -type l | grep -v '/CVS/' | \
		grep -v '/.svn/' | grep -v '/.testbox/' | \
		grep -v rpm-specific | grep -v docs/phpdoc/docs | \
		grep -v ^./debian/ | cpio -pdumB $(BUILDFILES)/
	# Set version for given distrib
	cd $(BUILDFILES)/$(PKGDIR); dch -b -v $(MAJOR)$(MINOR)+p -D UNRELEASED "This is $(DISTRIB) autobuild"
	perl -pi -e "s/UNRELEASED/$(DISTRIB)/" $(BUILDFILES)/$(PKGDIR)/debian/changelog
	cd $(BUILDFILES) ; dpkg-source -b $(PKGDIR)
	rm -rf $(BUILDFILES)/$(PKGDIR)

$(BUILDFILES)/$(ORIGFILE): $(TARBALLS)/$(ORIGFILE)
	cp $(TARBALLS)/$(ORIGFILE) $(BUILDFILES)

$(TARBALLS)/$(ORIGFILE): $(TARBALLS)
	cd $(PKGDIR) ; debclean
	find $(PKGDIR) -type f -or -type l | grep -v '/CVS/' | \
		grep -v '/.svn/' | grep -v '/.testbox/' | \
		grep -v rpm-specific | grep -v docs/phpdoc/docs | \
		grep -v ^./debian/ | grep -v \\.jar$$ | \
		grep -v \\.pdf$$ | grep -v plugins/fckeditor/www/_samples | \
		grep -v plugins/wiki/www/lib/pear | \
		cpio -o -H ustar | gzip > $(TARBALLS)/$(ORIGFILE)

pbuilderenv: $(PBUILDERTGZ) $(PBUILDERTGZ)/base-$(DISTRIB).tgz
	@echo "=========> Ready for $(DISTRIB)"

cowbuilderenv: $(COWBUILDERBASE) $(COWBUILDERBASE)/base-$(DISTRIB).stamp.update
	@echo "=========> Ready for $(DISTRIB)"

forceupdatecow: # Force update of cowbuilder env #
	rm -f $(COWBUILDERBASE)/base-*.stamp.update

$(COWBUILDERBASE)/base-$(DISTRIB).stamp.update: $(COWBUILDERBASE)/base-$(DISTRIB).stamp
	sudo /usr/sbin/cowbuilder --update $(HOOK) --distribution $(DISTRIB) --basepath $(COWBUILDERBASE)/base-$(DISTRIB).cow --configfile $(COWBUILDERBASE)/config $(DISTROOP)
	touch $@

$(PBUILDERTGZ)/base-$(DISTRIB).tgz: $(PBUILDERTGZ)/config
	sudo /usr/sbin/pbuilder --create --distribution $(DISTRIB) --basetgz $(PBUILDERTGZ)/base-$(DISTRIB).tgz --configfile $(PBUILDERTGZ)/config $(DISTROOP)

$(COWBUILDERBASE)/base-$(DISTRIB).stamp: $(COWBUILDERBASE)/config
	sudo /usr/sbin/cowbuilder --create $(HOOK) --distribution $(DISTRIB) --basepath $(COWBUILDERBASE)/base-$(DISTRIB).cow --configfile $(COWBUILDERBASE)/config $(DISTROOP)
	touch $@.update
	touch $@

$(PBUILDERTGZ)/config: /usr/sbin/pbuilder
	echo "APTCACHE=$(APTCACHE)" > $(PBUILDERTGZ)/config
	echo "BUILDPLACE=$(BUILDPLACE)" >> $(PBUILDERTGZ)/config
	echo "BUILDRESULT=$(BUILDRESULT)" >> $(PBUILDERTGZ)/config

$(COWBUILDERBASE)/config: /usr/sbin/cowbuilder
	echo "APTCACHE=$(APTCACHE)" > $(COWBUILDERBASE)/config
	echo "BUILDPLACE=$(BUILDPLACE)" >> $(COWBUILDERBASE)/config
	echo "BUILDRESULT=$(BUILDRESULT)" >> $(COWBUILDERBASE)/config

/usr/sbin/pbuilder:
	sudo apt-get install pbuilder

ubukey:
	gpg --keyserver keyserver.ubuntu.com --recv-keys 40976EAF437D05B5
	gpg --export --armor 40976EAF437D05B5 | sudo apt-key add -

/usr/sbin/cowbuilder:
	sudo apt-get install cowdancer

localrepo: $(LOCALREPO) $(LOCALREPO)/conf $(LOCALREPO)/conf/distributions

reprepro: $(LOCALREPO)/pool/main/$(PKGLETTER)/$(PKGNAME)/$(DSCFILE) # Install in repository

$(LOCALREPO)/pool/main/$(PKGLETTER)/$(PKGNAME)/$(DSCFILE): $(BUILDRESULT)/$(CHANGEFILE)
	@echo "Installing $(BUILDRESULT)/$(CHANGEFILE) in $@"
	cd $(BUILDRESULT); reprepro $(ASKPASS) -Vb $(LOCALREPO) include $(DISTRIB) $(CHANGEFILE)

$(LOCALREPO)/conf/distributions:
	for xdist in $(DISTRIBLIST) ; do \
	dist=`echo $$xdist | cut -c2-` ; \
	echo "Codename: $$dist" ; \
	echo "Suite: $$dist" ; \
	echo "Components: main" ; \
	echo "UDebComponents: main" ; \
	echo "Architectures: amd64 i386 source" ; \
	echo "Origin: $(ORIGIN)" ; \
	echo "Version: 5.0" ; \
	echo "Description: My $(FUSIONFORGE) $$dist repository" ; \
	echo "SignWith: $(SIGNKEY)" ; \
	echo "" ; done >> $(LOCALREPO)/conf/distributions

$(LOCALREPO)/conf:
	mkdir $(LOCALREPO)/conf

$(TARBALLS):
	mkdir -p $(TARBALLS)

$(BUILDFILES):
	mkdir -p $(BUILDFILES)

$(COWBUILDERBASE):
	mkdir -p $(COWBUILDERBASE)

$(PBUILDERTGZ):
	mkdir -p $(PBUILDERTGZ)

$(LOCALREPO):
	sudo mkdir $@
	sudo chown `id -u`.`id -g` $@

clean: # Clean $(BUILDPLACE) $(BUILDFILES) $(TARBALLS) (intermediate files) #
	rm -rf $(BUILDPLACE) $(BUILDFILES) $(TARBALLS) 

cleanenv: # Clean $(COWBUILDERBASE) $(PBUILDERTGZ) (chroots)#
	rm -rf $(COWBUILDERBASE) $(PBUILDERTGZ)

cleancache: # Clean $(APTCACHE) (apt cache) #
	rm -rf $(APTCACHE)

cleanorig: # Clean $(TARBALLS)/$(ORIGFILE) #
	rm -f $(TARBALLS)/$(ORIGFILE)
