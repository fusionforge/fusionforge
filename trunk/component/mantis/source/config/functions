#---------------------------------------------------------------------------
# Novaforge is a registered trade mark from Bull S.A.S
# Copyright (C) 2007 Bull S.A.S.
# 
# http://novaforge.org/
#
#
# This file has been developped within the Novaforge(TM) project from Bull S.A.S
# and contributed back to GForge community.
#
# GForge is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# GForge is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this file; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#---------------------------------------------------------------------------

#
# Functions
#

# Backup directories
BACKUP_CONFIG_DIR="%SYSCONFDIR%/%NAME%"
BACKUPED_CONFIG_FILTER=".[a-z]*"
BACKUP_MYSQL_DIR="%LOCALSTATEDIR%/lib/mysql"

# Initialize variables
init_variables ()
{
	PREFIX_CHAR="#"
	EXIT=0
	if [ -n "$1" ] ; then
		PREFIX_CHAR=$1
	fi
}

# Read config parameters
source_config_parameters ()
{
	echo -e "$PREFIX_CHAR Reading config parameters from file '%SYSCONFDIR%/%NAME%/.config'"
	ADMIN_MAIL=""
	DB_NAME=""
	if [ -e %SYSCONFDIR%/%NAME%/.config ] ; then
		. %SYSCONFDIR%/%NAME%/.config
		if [ -z "$ADMIN_MAIL" ] ; then
			echo -e "$PREFIX_CHAR -> Parameter ADMIN_MAIL is empty or not defined"
			EXIT=1
		fi
		if [ -z "$DB_NAME" ] ; then
			echo -e "$PREFIX_CHAR -> Parameter DB_NAME is empty or not defined"
			EXIT=1
		fi
	else
		echo -e "$PREFIX_CHAR -> No file to read from"
	fi
}

# Stop service
# Parameters:
#   Service name
stop_service ()
{
	SERVICE_NAME=$1
	echo -e "$PREFIX_CHAR Stopping service $SERVICE_NAME"
	if [ -x %INITRDDIR%/$SERVICE_NAME ] ; then
		service $SERVICE_NAME stop >> /dev/null 2>&1
		if [ $? -ne 0 ] ; then
			echo -e "$PREFIX_CHAR -> Error while stopping"
		fi
	else
		echo -e "$PREFIX_CHAR -> Script '%INITRDDIR%/$SERVICE_NAME' does not exist"
	fi
}

# Start service
# Parameters:
#   Service name
start_service ()
{
	SERVICE_NAME=$1
	echo -e "$PREFIX_CHAR Starting service $SERVICE_NAME"
	if [ -x %INITRDDIR%/$SERVICE_NAME ] ; then
		service $SERVICE_NAME start >> /dev/null 2>&1
		if [ $? -ne 0 ] ; then
			echo -e "$PREFIX_CHAR -> Error while starting"
			EXIT=1
		fi
	else
		echo -e "$PREFIX_CHAR -> Script '%INITRDDIR%/$SERVICE_NAME' does not exist"
		EXIT=1
	fi
}

# Restart service
# Parameters:
#   Service name
restart_service ()
{
	SERVICE_NAME=$1
	echo -e "$PREFIX_CHAR Restarting service $SERVICE_NAME"
	if [ -x %INITRDDIR%/$SERVICE_NAME ] ; then
		service $SERVICE_NAME restart >> /dev/null 2>&1
		if [ $? -ne 0 ] ; then
			echo -e "$PREFIX_CHAR -> Error while restarting"
			EXIT=1
		fi
	else
		echo -e "$PREFIX_CHAR -> Script '%INITRDDIR%/$SERVICE_NAME' does not exist"
		EXIT=1
	fi
}

# Display a right-padded item
# Parameters:
#   Item string
#   padding size
display_padded_item ()
{
	echo -en "`echo "$1         " | cut -c1-$2`"
}

# Restore the content of a directory
# Parameters:
#   Source directory
#   Target directory
restore_directory_content ()
{
	if [ $EXIT -eq 0 ] ; then
		echo -e "$PREFIX_CHAR Restoring to directory '$2'"
		if [ -d $1 ] ; then
			FILES_NUMBER=`find $1 | wc -l`
			if [ $FILES_NUMBER -le 1 ] ; then
				echo -e "$PREFIX_CHAR -> Warning: source directory '$1' is empty"
			else
				if [ -n "$2" -a "$2" != "/" ] ; then
					if [ -d $2 ] ; then
						rm -rf $2/*
						if [ $? -ne 0 ] ; then
							echo -e "$PREFIX_CHAR -> Error while emptying target directory"
							EXIT=1
						fi
					else
						mkdir $2
						if [ $? -ne 0 ] ; then
							echo -e "$PREFIX_CHAR -> Error while creating target directory"
							EXIT=1
						fi
					fi
				else
					echo -e "$PREFIX_CHAR -> Target directory '$2' is incorrect"
					EXIT=1
				fi
				if [ $EXIT -eq 0 ] ; then
					cp -a $1/* $2/
					if [ $? -ne 0 ] ; then
						echo -e "$PREFIX_CHAR -> Error while restoring from source directory '$1'"
						EXIT=1
					fi
				fi
			fi
		else
			echo -e "$PREFIX_CHAR -> Warning: source directory '$1' is missing"
		fi
	fi
}
