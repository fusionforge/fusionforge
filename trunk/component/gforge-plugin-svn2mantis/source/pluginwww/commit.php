<?
/*
 * Novaforge is a registered trade mark from Bull S.A.S
 * Copyright (C) 2007 Bull S.A.S.
 *
 * http://novaforge.org/
 *
 *
 * This file has been developped within the Novaforge(TM) project from Bull S.A.S
 * and contributed back to GForge community.
 *
 * GForge is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * GForge is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this file; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

require_once ("squal_pre.php");
require_once ("common/novaforge/log.php");
require_once ("plugins/svn2mantis/include/functions.php");
require_once ("plugins/mantis/include/gforgefunctions.php");
require_once ("plugins/mantis/include/mantisfunctions.php");

$ok = true;
if (array_key_exists ("group_id", $_GET) == false)
{
	$ok = false;
	log_error ("The group identifier is missing", __FILE__);
}
else
{
	$group_id = $_GET ["group_id"];
}
if (array_key_exists ("revision", $_GET) == false)
{
	$ok = false;
	log_error ("The revision number is missing", __FILE__);
}
else
{
	$revision = $_GET ["revision"];
}
if ($ok == true)
{
	$group = group_get_object ($group_id);
	if ((isset ($group) == false) || (is_object ($group) == false))
	{
		$ok = false;
		log_error ("Error while getting object for group " . $group_id, __FILE__);
	}
}
if ($ok == true)
{
	if (($group->usesPlugin ("svn2mantis") == true)
	&&  ($group->usesPlugin ("mantis") == true))
	{
		$repository = $svndir_prefix;
		if ($repository [strlen ($repository) - 1] != "/")
		{
			$repository .= "/";
		}
		$repository .= $group->getUnixName ();
		$array_lines = array ();
		$author = exec ("svnlook author -r " . $revision . " " . $repository, $array_lines, $exit_code);
		if ($exit_code !== 0)
		{
			$ok = false;
			$output = "";
			foreach ($array_lines as $line)
			{
				if (empty ($output) == false)
				{
					$output .= "\n";
				}
				$output .= $line;
			}
			log_error ("Error while getting author of revision " . $revision . " for repository " . $repository . "(" . $output . ")", __FILE__);
		}
		if ($ok == true)
		{
			$array_lines = array ();
			$date = exec ("svnlook date -r " . $revision . " " . $repository, $array_lines, $exit_code);
			if ($exit_code !== 0)
			{
				$ok = false;
				$output = "";
				foreach ($array_lines as $line)
				{
					if (empty ($output) == false)
					{
						$output .= "\n";
					}
					$output .= $line;
				}
				log_error ("Error while getting date of revision " . $revision . " for repository " . $repository . "(" . $output . ")", __FILE__);
			}
		}
		if ($ok == true)
		{
			$array_lines = array ();
			exec ("svnlook log -r " . $revision . " " . $repository, $array_lines, $exit_code);
			if ($exit_code !== 0)
			{
				$ok = false;
				$output = "";
				foreach ($array_lines as $line)
				{
					if (empty ($output) == false)
					{
						$output .= "\n";
					}
					$output .= $line;
				}
				log_error ("Error while getting log of revision " . $revision . " for repository " . $repository . "(" . $output . ")", __FILE__);
			}
			else
			{
				$message = "";
				$array_mantis_lines = array ();
				foreach ($array_lines as $line)
				{
					if (strncasecmp ($line, "MANTIS:", 7) == 0)
					{
						array_push ($array_mantis_lines, substr ($line, 7));
					}
					else
					{
						if (empty ($message) == false)
						{
							$message .= "\n";
						}
						$message .= $line;
					}
				}
			}
		}
		if ($ok == true)
		{
			$array_lines = array ();
			exec ("svnlook changed -r " . $revision . " " . $repository, $array_lines, $exit_code);
			if ($exit_code !== 0)
			{
				$ok = false;
				$output = "";
				foreach ($array_lines as $line)
				{
					if (empty ($output) == false)
					{
						$output .= "\n";
					}
					$output .= $line;
				}
				log_error ("Error while getting list of changed files for revision " . $revision . " for repository " . $repository . "(" . $output . ")", __FILE__);
			}
			else
			{
				$changed = "";
				foreach ($array_lines as $line)
				{
					if (empty ($changed) == false)
					{
						$changed .= "\n";
					}
					$changed .= $line;
				}
			}
		}
		if ($ok == true)
		{
			if (count ($array_mantis_lines) > 0)
			{
				$comment = "This note has been generated by a Subversion commit.\n\nRevision: " . $revision;
				$comment .= "\n\nDate: " . $date;
				if (empty ($message) == false)
				{
					$comment .= "\n\nMessage :\n" . $message;
				}
				if (empty ($changed) == false)
				{
					$comment .= "\n\nChanged files and directories:\n" . $changed;
				}
				foreach ($array_mantis_lines as $mantis_line)
				{
					$position = strpos ($mantis_line, ":");
					if ($position === false)
					{
						if (getProjects ($group_id,
						                 $array_project_ids,
						                 $array_names) == false)
						{
							log_error ("Error while getting Mantis projects for group " . $group_id, __FILE__);
							break;
						}
						else
						{
							if (count ($array_project_ids) == 0)
							{
								log_error ("No Mantis project defined for group " . $group_id, __FILE__);
								break;
							}
							else
							{
								$project_id = $array_project_ids [0];
							}
						}
						$bug_ids = $mantis_line;
					}
					else
					{
						$project_id = substr ($mantis_line, 0, $position);
						$bug_ids = substr ($mantis_line, $position + 1);
					}
					if (getProject ($project_id,
					                $gforge_id,
					                $url,
					                $mantis_id,
					                $name,
					                $description,
					                $status,
					                $visibility,
					                $css_regex_1,
					                $css_regex_2,
					                $css_regex_3,
					                $css_regex_4) == false)
					{
						log_error ("Error while getting Mantis project " . $project_id, __FILE__);
						break;
					}
					else
					{
						$encoding = mb_detect_encoding ($comment, "UTF-8", true);
						if ($encoding != "UTF-8")
						{
							$comment = mb_convert_encoding ($comment, "UTF-8");
						}
						if (checkinMantisBugs ($url,
						                       $author,
						                       $bug_ids,
						                       $comment) == false)
						{
							log_error ("Error while calling Mantis on URL '" . $url . "'", __FILE__);
							break;
						}
					}
				}
			}
		}
	}
}
?>
