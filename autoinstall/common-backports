#!/bin/bash
# Tricks to install unavailable packages - used by install.sh and install-src.sh
#
# Copyright (C) 2011  Roland Mas
# Copyright (C) 2011  Olivier Berger - Institut Telecom
# Copyright (C) 2014  Inria (Sylvain Beucler)
#
# This file is part of FusionForge. FusionForge is free software;
# you can redistribute it and/or modify it under the terms of the
# GNU General Public License as published by the Free Software
# Foundation; either version 2 of the Licence, or (at your option)
# any later version.
#
# FusionForge is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with FusionForge; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


function backports_deb {
    if grep -q ^7 /etc/debian_version; then
	# Install OpenSSH 6.6 to get AuthorizedKeysCommand support
	if [ ! -f /etc/apt/sources.list.d/backports.list ]; then
	    echo 'deb http://http.debian.net/debian wheezy-backports main' \
		> /etc/apt/sources.list.d/backports.list
	    apt-get update
	fi
	if dpkg-query -s openssh-server | grep -q 'Version: 1:6.0'; then
	    apt-get -y install openssh-server -t wheezy-backports
	fi

	# fusionforge-plugin-scmbzr depends on loggerhead (>=
	# 1.19~bzr477~), but wheezy only has 1.19~bzr461-1, so we need
	# to manually "Backport" a more recent dependency
	if ! dpkg-query -s loggerhead >/dev/null 2>&1 ; then
	    # install loggerhead with its dependencies
	    # we need gdebi to make sure dependencies are installed too (simple dpkg -i won't)
	    apt-get -y install gdebi-core wget
	    wget -c http://snapshot.debian.org/archive/debian/20121107T152130Z/pool/main/l/loggerhead/loggerhead_1.19%7Ebzr477-1_all.deb
	    gdebi --non-interactive loggerhead_1.19~bzr477-1_all.deb
	fi
    fi
}

function backport_rpm_from_fedora {
    rebuild_one_rpm --enablefedora $*
}

function rebuild_rpm_from_centos {
    rebuild_one_rpm --rebuild $*
}

function rebuild_one_rpm {
    enablefedsrc=
    enablefed=
    if [ "$1" = "--enablefedora" ] ; then
	enablefedsrc="--enablerepo=fedora-source"
    	shift
    fi

    rebuild=no
    if [ "$1" = "--rebuild" ] ; then
    	rebuild=yes
    	shift
    fi

    src=
    if [ "$1" = "--source-package" ] ; then
    	src=$2
    	shift
    	shift
    fi

    target=$1
    shift
    others="$*"
    
    src=${src:-$target}

    if yum list $target >/dev/null 2>&1; then
	yum install -y $target
    else
	for i in $target $others ; do
	    if ! yum list $i >/dev/null 2>&1; then
		rebuild_needed=yes
		break
	    fi
	done
    fi

    if [ $rebuild_needed = yes ] ; then
	yumdownloader $enablefedsrc --source $src

	if [ -n "$DEPS" ]; then
	    yum install -y $DEPS
	fi

	for i in $src-*.src.rpm ; do
	    if [ $rebuild = yes ] || [ ! -e "$i.done" ] ; then
		rpmbuild --rebuild $src-*.src.rpm
	    fi
	    mv -f "$i" "$i.done"
	done
	if [ -n "$REMOVEDEPS" ] ; then
	    yum remove -y $REMOVEDEPS
	fi

	for i in $target $others ; do
	    yum remove -y $i
	done
	for i in $target $others ; do
	    yum install -y ~/rpmbuild/RPMS/*/$i-[0-9]*.*.rpm || rpm -i ~/rpmbuild/RPMS/*/$i-[0-9]*.*.rpm
	done
    else
	yum install -y $target $others
    fi
}

# TODO: compile in a different job and use mockbuild?
function backports_rpm {
    # Fedora/RHEL/CentOS version:
    os_version=$(rpm -q --qf "%{VERSION}" $(rpm -q --whatprovides redhat-release))

    if ! rpm -q fedora-release >/dev/null; then
	# EPEL - http://download.fedoraproject.org/pub/epel/6/i386/repoview/epel-release.html
	#      - http://download.fedoraproject.org/pub/epel/7/x86_64/repoview/epel-release.html
	if ! rpm -q epel-release >/dev/null; then
	    case $os_version in
		6)
		    rpm -ivh http://rpmfind.net/linux/epel/6/i386/epel-release-6-8.noarch.rpm
		    ;;
		7)
		    rpm -ivh http://rpmfind.net/linux/epel/7/x86_64/e/epel-release-7-5.noarch.rpm
		    ;;
	    esac
	fi

	# Prepare manual backports
	cat <<'EOF' > /etc/yum.repos.d/fedora-source.repo
[fedora]
name=Fedora 20
failovermethod=priority
metalink=https://mirrors.fedoraproject.org/metalink?repo=fedora-20&arch=$basearch
enabled=0
gpgcheck=0
[fedora-source]
name=Fedora 20 - Source
failovermethod=priority
metalink=https://mirrors.fedoraproject.org/metalink?repo=fedora-source-20&arch=$basearch
enabled=0
gpgcheck=0
EOF

	# Speed-up by recreating 'fastestmirror' now partial cache
	# (/var/cache/yum/x86_64/7/timedhost.txt)
        yum clean plugins

	yum install -y yum-utils  # yumdownloader
	if [ ! -e /usr/bin/rpmbuild ] ; then
	    yum install -y rpm-build
	fi
    fi

    DEPS="gcc postgresql-devel xmlto"
    REMOVEDEPS=$DEPS
    backport_rpm_from_fedora libnss-pgsql

    DEPS="python-devel"
    REMOVEDEPS=$DEPS
    backport_rpm_from_fedora moin

    DEPS="php-channel-htmlpurifier"
    REMOVEDEPS=""
    backport_rpm_from_fedora php-htmlpurifier-htmlpurifier

    DEPS="dos2unix"
    REMOVEDEPS=$DEPS
    backport_rpm_from_fedora php-nusoap

    case $os_version in
	7)
	    DEPS="gcc gd-devel byacc freetype-devel libpng-devel libjpeg-devel"
	    REMOVEDEPS=$DEPS
	    backport_rpm_from_fedora cvsgraph
	    
	    DEPS="python-devel python-pygments"
	    REMOVEDEPS=$DEPS
	    backport_rpm_from_fedora viewvc
	    
	    DEPS=""
	    REMOVEDEPS=$DEPS
	    backport_rpm_from_fedora mediawiki
	    ;;
    esac

    # TODO: postfix: rebuild from RHEL/CentOS sources with pgsql enabled,
    # so we can test mta-postfix
}
