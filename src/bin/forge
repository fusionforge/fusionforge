#! /usr/bin/php -f
<?php
/**
 * FusionForge source control management
 *
 * Copyright 2012, Alain Peyrat
 * Copyright 2017, Franck Villaume - TrivialDev
 *
 * This file is part of FusionForge.
 *
 * FusionForge is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * FusionForge is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FusionForge; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

require (dirname(__FILE__).'/../common/include/env.inc.php');
require_once $gfcommon.'include/pre.php';
require_once $gfcommon.'tracker/ArtifactFactory.class.php';

class CliActions {
	function help($method = null) {
		$methods = join('|', get_class_methods($this));
		switch ($method) {
			case 'help':
				echo "Use: .../forge help ($methods)\n";
				echo "to get detail on each command\n";
				break;
			case 'pluginActivate':
				echo "Use: .../forge pluginActivate <pluginName>\n";
				echo "to activate the <pluginName> plugin\n";
				break;
			case 'pluginDeactivate':
				echo "Use: .../forge pluginDeactivate <pluginName>\n";
				echo "to deactivate the <pluginName> plugin\n";
				break;
			case 'trackerDump':
				echo "Use: .../forge trackerDump <atid> [setup|artifacts] [json|raw]\n";
				echo "to dump a tracker from a specific project.\n";
				echo "the following functions are available:\n";
				echo " - setup: (default option)\n";
				echo "   use it to dump the full configuration of the tracker\n";
				echo " - artifacts:\n";
				echo "   use it to dump all the artifacts of the tracker\n";
// 				echo " - all:\n";
// 				echo "   use it to dump the full configuration of the tracker and the artifacts + any attachements if any\n";
				echo "the following output formats are available:\n";
				echo " - json:\n";
				echo "   pretty json formated string output\n";
				echo " - raw: (default)\n";
				echo "   standard PHP array print_r format\n";
				break;
			case 'docmanDump':
				echo "Use: .../forge trackerDump <groupid> [setup|tree|all] [json|raw]\n";
				echo "to dump docman from a specific project.\n";
				echo "the following functions are available:\n";
				echo " - setup: (default option)\n";
				echo "   use it to dump the full configuration of the document management tool\n";
				echo " - tree:\n";
				echo "   use it to dump the complete tree of the document management tool\n";
				echo " - all:\n";
				echo "   use it to dump the full configuration and the tree\n";
				echo "the following output formats are available:\n";
				echo " - json:\n";
				echo "   pretty json formated string output\n";
				echo " - raw: (default)\n";
				echo "   standard PHP array print_r format\n";
				break;
			default:
				echo "Usage: .../forge ($methods) [arguments...]\n" ;
				echo "Get more info use: .../forge help help\n";
				break;
		}
	}

	function pluginActivate ($name) {
		$pm = plugin_manager_get_object();
		$pm->activate($name);
		$pm->LoadPlugin($name);
		$plugin = $pm->GetPluginObject($name);
		$plugin->install();
	}

	function pluginDeactivate ($name) {
		$pm = plugin_manager_get_object();
		$pm->deactivate($name);
	}

	function trackerDump($atid, $params = array('setup', 'json')) {
		$at = artifactType_get_object($atid);
		$trackerDump = array();
		if ($at && is_object($at) && !$at->isError()) {
			switch ($params[0]) {
				case 'all':
					$trackerDump['setup'] = $at->getSettings();
				case 'artifacts':
					$af = new ArtifactFactory($at);
					if ($af && is_object($af) && !$at->isError()) {
						$af->setup(0, '', '', 0, 'overwrite', false, false, array(), false);
						$artifacts = $af->getArtifacts();
						foreach ($artifacts as $artf) {
							//we do not need this information.
							unset($artf->ArtifactType);
						}
						$trackerDump['artifacts'] = $artifacts;
					} else {
						$trackerDump['error'][] = _('Unable to retrieve artifacts');
					}
					break;
				case 'setup':
					$trackerDump['setup'] = $at->getSettings();
					break;
				default:
					$trackerDump['error'][] = _('Unknown function');
					break;
			}
		} else {
			$trackerDump['error'][] = _('Unable to get tracker id')._(': ').$atid;
		}

		if (isset($params[1])) {
			if (in_array($params[1], array('json', 'raw'))) {
				$format = $params[1];
			} else {
				$trackerDump['error'][] = _('Unknown format. Fallback to raw');
			}
		} else {
			$format = 'raw';
		}
		$this->print_result($trackerDump, $format);
	}

	function docmanDump($group_id, $params = array('setup', 'json')) {
		$group = group_get_object($group_id);
		if ($group && is_object($group) && !$group->isError()) {
			if ($group->usesDocman()) {
				$dm = new DocumentManager($group);
				$docmanDump = array();
				if ($dm && is_object($dm) && !$dm->isError()) {
					switch ($params[0]) {
						case 'all':
							$docmanDump['setup'] = $dm->getSettings();
						case 'tree':
							$tree = $dm->getTree();
							$docmanDump['tree'] = $tree;
							break;
						case 'setup':
							$docmanDump['setup'] = $dm->getSettings();
							break;
						default:
							$docmanDump['error'][] = _('Unknown function');
							break;
					}
				} else {
					$docmanDump['error'][] = _('Unable to get document manager for group id')._(': ').$group_id;
				}
			} else {
				$docmanDump['error'][] = _('Document manager not enabled for group id')._(': ').$group_id;
			}
		} else {
			$docmanDump['error'][] = _('Unable to get group id')._(': ').$group_id;
		}
		if (isset($params[1])) {
			if (in_array($params[1], array('json', 'raw'))) {
				$format = $params[1];
			} else {
				$docmanDump['error'][] = _('Unknown format. Fallback to raw');
			}
		} else {
			$format = 'raw';
		}
		$this->print_result($docmanDump, $format);
	}

	function print_result($arrayDump, $format) {

		switch ($format) {
			case 'json':
				echo json_encode($arrayDump, JSON_PRETTY_PRINT)."\n";
				break;
			case 'raw':
			default:
				print_r($arrayDump);
		}
	}
}

session_set_admin();

if (count($argv) >= 3) {
	$action = $argv[1];
	$name   = $argv[2];
	if (count($argv) >= 3) {
		$j = 0;
		for ($i = 3; $i < count($argv); $i++) {
			$params[$j] = $argv[$i];
			$j++;
		}
	}
} else {
	$action = 'help';
	$name   = '';
}

$ctl = new CliActions();
if (method_exists($ctl, $action)) {
	if (isset($params)) {
		$ctl->$action($name, $params);
	} else {
		$ctl->$action($name);
	}
} else {
	$ctl->help();
}
