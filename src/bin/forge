#! /usr/bin/php -f
<?php
/**
 * FusionForge source control management
 *
 * Copyright 2012, Alain Peyrat
 * Copyright 2017, Franck Villaume - TrivialDev
 *
 * This file is part of FusionForge.
 *
 * FusionForge is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * FusionForge is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FusionForge; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

require (dirname(__FILE__).'/../common/include/env.inc.php');
require_once $gfcommon.'include/pre.php';
require_once $gfcommon.'tracker/ArtifactFactory.class.php';
require_once $gfcommon.'tracker/ArtifactTypeFactory.class.php';
require_once $gfcommon.'docman/DocumentReviewFactory.class.php';

class CliActions {
	function help($method = null) {
		$methods = join('|', get_class_methods($this));
		switch ($method) {
			case 'help':
				echo "Use: .../forge help ($methods)\n";
				echo "to get detail on each command\n";
				break;
			case 'pluginActivate':
				echo "Use: .../forge pluginActivate <pluginName>\n";
				echo "to activate the <pluginName> plugin\n";
				break;
			case 'pluginDeactivate':
				echo "Use: .../forge pluginDeactivate <pluginName>\n";
				echo "to deactivate the <pluginName> plugin\n";
				break;
			case 'artifactDump':
				echo "Use: .../forge artifactDump <aid> [latest|all] [json|raw]\n";
				echo "to dump an artifact from a specific tracker of a project.\n";
				echo "the following functions are available:\n";
				echo " - latest: (default option)\n";
				echo "   use it to dump the latest value of the artifact\n";
				echo " - all:\n";
				echo "   use it to dump the full history and latest value of the artifact\n";
				echo "the following output formats are available:\n";
				echo " - json:\n";
				echo "   pretty json formated string output\n";
				echo " - raw: (default)\n";
				echo "   standard PHP array print_r format\n";
				break;
			case 'trackerDump':
				echo "Use: .../forge trackerDump <atid> [setup|data|all] [json|raw]\n";
				echo "to dump a tracker from a specific project.\n";
				echo "the following functions are available:\n";
				echo " - setup: (default option)\n";
				echo "   use it to dump the full configuration of the tracker\n";
				echo " - data:\n";
				echo "   use it to dump all the artifacts of the tracker\n";
				echo " - all:\n";
				echo "   use it to dump the full configuration of the tracker and the artifacts\n";
				echo "the following output formats are available:\n";
				echo " - json:\n";
				echo "   pretty json formated string output\n";
				echo " - raw: (default)\n";
				echo "   standard PHP array print_r format\n";
				break;
			case 'documentDump':
				echo "Use: .../forge documentDump <docid> [latest|all] [json|raw]\n";
				echo "to dump a document from a specific project.\n";
				echo "the following functions are available:\n";
				echo " - latest: (default option)\n";
				echo "   use it to dump the latest value of the document\n";
				echo " - all:\n";
				echo "   use it to dump the full history and latest value of the document\n";
				echo "the following output formats are available:\n";
				echo " - json:\n";
				echo "   pretty json formated string output\n";
				echo " - raw: (default)\n";
				echo "   standard PHP array print_r format\n";
				break;
			case 'docmanDump':
				echo "Use: .../forge docmanDump <groupid> [setup|data|all] [json|raw]\n";
				echo "to dump docman from a specific project.\n";
				echo "the following functions are available:\n";
				echo " - setup: (default option)\n";
				echo "   use it to dump the full configuration of the document management tool\n";
				echo " - data:\n";
				echo "   use it to dump the complete tree of the document management tool\n";
				echo " - all:\n";
				echo "   use it to dump the full configuration and the tree\n";
				echo "the following output formats are available:\n";
				echo " - json:\n";
				echo "   pretty json formated string output\n";
				echo " - raw: (default)\n";
				echo "   standard PHP array print_r format\n";
				break;
			case 'packageDump':
				echo "Use: .../forge packageDump <packageid> [setup|data|all] [json|raw]\n";
				echo "to dump a spectific FRS package from a specific project.\n";
				echo "the following functions are available:\n";
				echo " - setup: (default option)\n";
				echo "   use it to dump all releases of this package & setup of this package\n";
				echo " - data:\n";
				echo "   use it to dump all files of this package\n";
				echo " - all:\n";
				echo "   use it to dump all releases + setup & files of this package\n";
				echo "the following output formats are available:\n";
				echo " - json:\n";
				echo "   pretty json formated string output\n";
				echo " - raw: (default)\n";
				echo "   standard PHP array print_r format\n";
				break;
			case 'frsDump':
				echo "Use: .../forge frsDump <groupid> [setup|data|all] [json|raw]\n";
				echo "to dump FRS from a specific project.\n";
				echo "the following functions are available:\n";
				echo " - setup: (default option)\n";
				echo "   use it to dump all packages & releases of the FRS management tool\n";
				echo " - data:\n";
				echo "   use it to dump all files of the FRS management tool\n";
				echo " - all:\n";
				echo "   use it to dump all packages & releases and the files\n";
				echo "the following output formats are available:\n";
				echo " - json:\n";
				echo "   pretty json formated string output\n";
				echo " - raw: (default)\n";
				echo "   standard PHP array print_r format\n";
				break;
			case 'groupDump':
				echo "Use: .../forge groupDump <groupid> [setup|data|all] [json|raw]\n";
				echo "to dump a group.\n";
				echo "the following functions are available:\n";
				echo " - setup: (default option)\n";
				echo "   use it to dump the full configuration of the group including configuration of each feature used\n";
				echo " - data:\n";
				echo "   use it to dump the complete data\n";
				echo " - all:\n";
				echo "   use it to dump the full configuration and the data\n";
				echo "the following output formats are available:\n";
				echo " - json:\n";
				echo "   pretty json formated string output\n";
				echo " - raw: (default)\n";
				echo "   standard PHP array print_r format\n";
			default:
				echo "Usage: .../forge ($methods) [arguments...]\n" ;
				echo "Get more info use: .../forge help help\n";
				break;
		}
	}

	function pluginActivate ($name) {
		$pm = plugin_manager_get_object();
		$pm->activate($name);
		$pm->LoadPlugin($name);
		$plugin = $pm->GetPluginObject($name);
		$plugin->install();
	}

	function pluginDeactivate ($name) {
		$pm = plugin_manager_get_object();
		$pm->deactivate($name);
	}

	function artifactDump($aid, $params = array('latest', 'json')) {
		$artifactDump = array();
		$artifactDump['id'] = $aid;
		$artf = artifact_get_object($aid);
		if ($artf && is_object($artf) && !$artf->isError()) {
			switch ($params[0]) {
				case 'all':
					$artifactDump['history'] = array();
					$hist = $artf->getHistory();
					if (db_numrows($hist) > 0) {
						while ($arr = db_fetch_array($hist, PGSQL_ASSOC)) {
							$artifactDump['history'][] = $arr;
						}
					}
				case 'latest':
					$artifactDump['artifact'] = (array)$artf;
					unset($artifactDump['artifact']['ArtifactType']);
					$artifactDump['monitor'] = $artf->getMonitorIds();
					$artifactDump['messages'] = array();
					$messages = $artf->getMessages();
					if (db_numrows($messages) > 0) {
						while ($arr = db_fetch_array($messages, PGSQL_ASSOC)) {
							$artifactDump['messages'][] = $arr;
						}
					}
					$files = $artf->getFiles();
					foreach ($files as $file) {
						unset($file->Artifact);
						$artifactDump['artifact']['files'][] = (array)$file;
					}
					$artifactDump['artifact']['relatedtasks'] = array();
					$tasks = $artf->getRelatedTasks();
					if (db_numrows($tasks) > 0) {
						while ($arr = db_fetch_array($tasks, PGSQL_ASSOC)) {
							$artifactDump['artifact']['relatedtasks'][] = $arr;
						}
					}
					$artifactDump['artifact']['votes'] = $artf->getVotes();
					$artifactDump['artifact']['extra_field_data'] = $artf->getExtraFieldDataText();
					break;
				default:
					$artifactDump['error'][] = _('Unknown function');
					break;
			}
		} else {
			$artifactDump['error'][] = _('Unable to get artifact id')._(': ').$aid;
		}
		ksort($artifactDump);
		$this->print_result($artifactDump, $params);
		return $artifactDump;
	}

	function groupDump($group_id, $params = array('setup', 'json')) {
		$groupDump = array();
		$groupDump['id'] = $group_id;
		$group = group_get_object($group_id);
		if ($group && is_object($group) && !$group->isError()) {
			switch ($params[0]) {
				case 'all':
					$groupDump['setup'] = (array)$group;
					$groupDump['setup']['membersArr'] = $group->getMembers(false);
					if ($group->usesDocman()) {
						$groupDump['docman'] = $this->docmanDump($group_id, array('all', 'return'));
					}
					if ($group->usesTracker()) {
						$atf = new ArtifactTypeFactory($group);
						$atid_arr = $atf->getAllArtifactTypeIds();
						foreach ($atid_arr as $atid) {
							$groupDump['trackers'][] = $this->trackerDump($atid, array('all', 'return'));
						}
					}
					if ($group->usesForum()) {
						$groupDump['forums'] = array();
					}
					if ($group->usesFRS()) {
						$groupDump['frs'] = array();
					}
					if ($group->usesNews()) {
						$groupDump['news'] = array();
					}
					break;
				case 'data':
					if ($group->usesDocman()) {
						$groupDump['docman'] = $this->docmanDump($group_id, array('data', 'return'));
					}
					if ($group->usesTracker()) {
						$atf = new ArtifactTypeFactory($group);
						$atid_arr = $atf->getAllArtifactTypeIds();
						foreach ($atid_arr as $atid) {
							$groupDump['trackers'][] = $this->trackerDump($atid, array('data', 'return'));
						}
					}
					if ($group->usesForum()) {
						$groupDump['forums'] = array();
					}
					if ($group->usesFRS()) {
						$groupDump['frs'] = array();
					}
					if ($group->usesNews()) {
						$groupDump['news'] = array();
					}
					break;
				case 'setup':
					$groupDump['setup'] = (array)$group;
					$groupDump['setup']['membersArr'] = $group->getMembers(false);
					if ($group->usesDocman()) {
						$groupDump['docman'] = $this->docmanDump($group_id, array('setup', 'return'));
					}
					if ($group->usesTracker()) {
						$atf = new ArtifactTypeFactory($group);
						$atid_arr = $atf->getAllArtifactTypeIds();
						foreach ($atid_arr as $atid) {
							$groupDump['trackers'][] = $this->trackerDump($atid, array('setup', 'return'));
						}
					}
					if ($group->usesForum()) {
						$groupDump['forums'] = array();
					}
					if ($group->usesFRS()) {
						$groupDump['frs'] = $this->frsDump($group_id, array('setup', 'return'));
					}
					if ($group->usesNews()) {
						$groupDump['news'] = array();
					}
					break;
				default:
					$groupDump['error'][] = _('Unknown function');
					break;
			}
		} else {
			$groupDump['error'][] = _('Unable to get group id')._(': ').$group_id;
		}
		ksort($groupDump);
		$this->print_result($groupDump, $params);
	}

	function trackerDump($atid, $params = array('setup', 'json')) {
		$trackerDump['id'] = $atid;
		$at = artifactType_get_object($atid);
		if ($at && is_object($at) && !$at->isError()) {
			switch ($params[0]) {
				case 'all':
					$trackerDump['setup'] = $at->getSettings();
				case 'data':
					$af = new ArtifactFactory($at);
					if ($af && is_object($af) && !$at->isError()) {
						$af->setup(0, '', '', 0, 'overwrite', false, false, array(), false);
						$artifacts = $af->getArtifacts();
						foreach ($artifacts as $artf) {
							$trackerDump['data'][] = $this->artifactDump($artf->getID(), array('all', 'return'));
						}
					} else {
						$trackerDump['error'][] = _('Unable to retrieve artifacts');
					}
					break;
				case 'setup':
					$trackerDump['setup'] = $at->getSettings();
					break;
				default:
					$trackerDump['error'][] = _('Unknown function');
					break;
			}
		} else {
			$trackerDump['error'][] = _('Unable to get tracker id')._(': ').$atid;
		}
		ksort($trackerDump);
		$this->print_result($trackerDump, $params);
		return $trackerDump;
	}

	function documentDump($docid, $params = array('latest', 'json')) {
		$documentDump = array();
		$documentDump['id'] = $docid;
		$doc = document_get_object($docid);
		if ($doc && is_object($doc) && !$doc->isError()) {
			switch ($params[0]) {
				case 'all':
					$dvf = new DocumentVersionFactory($doc);
					$documentDump['versions'] = $dvf->getVersions();
					$serialIDs = $dvf->getSerialIDs();
					$drf = new DocumentReviewFactory($doc);
					$documentDump['reviews'] = $drf->getReviews($serialIDs);
				case 'latest':
					$documentDump['document'] = (array)$doc;
					unset($documentDump['document']['Group']);
					$documentDump['monitor'] = $doc->getMonitorIds();
					break;
				default:
					$documentDump['error'][] = _('Unknown function');
					break;
			}
		} else {
			$documentDump['error'][] = _('Unable to get document id')._(': ').$docid;
		}
		ksort($documentDump);
		$this->print_result($documentDump, $params);
		return $documentDump;
	}

	function docmanDump($group_id, $params = array('setup', 'json')) {
		$docmanDump = array();
		$group = group_get_object($group_id);
		if ($group && is_object($group) && !$group->isError()) {
			if ($group->usesDocman()) {
				$dm = new DocumentManager($group);
				if ($dm && is_object($dm) && !$dm->isError()) {
					switch ($params[0]) {
						case 'all':
							$docmanDump['setup'] = $dm->getSettings();
						case 'data':
							$tree = $dm->getTree();
							$docmanDump['data'] = $tree;
							break;
						case 'setup':
							$docmanDump['setup'] = $dm->getSettings();
							break;
						default:
							$docmanDump['error'][] = _('Unknown function');
							break;
					}
				} else {
					$docmanDump['error'][] = _('Unable to get document manager for group id')._(': ').$group_id;
				}
			} else {
				$docmanDump['error'][] = _('Document manager not enabled for group id')._(': ').$group_id;
			}
		} else {
			$docmanDump['error'][] = _('Unable to get group id')._(': ').$group_id;
		}
		ksort($docmanDump);
		$this->print_result($docmanDump, $params);
		return $docmanDump;
	}

	function frsDump($group_id, $params = array('setup', 'json')) {
		$frsDump = array();
		$group = group_get_object($group_id);
		if ($group && is_object($group) && !$group->isError()) {
			if ($group->usesFRS()) {
				$frsp = new FRSPackageFactory($group);
				if ($frsp && is_object($frsp) && !$frsp->isError()) {
					switch ($params[0]) {
						case 'all':
							$frss = $frsp->getFRSs();
							foreach ($frss as $frs) {
								unset($frs->Group);
								$frsDump['setup'][] = $frs;
							}
						case 'data':
							break;
						case 'setup':
							$frss = $frsp->getFRSs();
							foreach ($frss as $frs) {
								unset($frs->Group);
								$frsDump['setup'][] = $frs;
							}
							break;
						default:
							$frsDump['error'][] = _('Unknown function');
							break;
					}
				} else {
					$frsDump['error'][] = _('Unable to get FRS for group id')._(': ').$group_id;
				}
			} else {
				$frsDump['error'][] = _('FRS not enabled for group id')._(': ').$group_id;
			}
		} else {
			$frsDump['error'][] = _('Unable to get group id')._(': ').$group_id;
		}
		ksort($frsDump);
		$this->print_result($frsDump, $params);
		return $frsDump;
	}

	function packageDump($packageid, $params = array('setup', 'json')) {
		$packageDump = array();
		$package = frspackage_get_object($packageid);
		if ($package && is_object($package) && !$package->isError()) {
			switch ($params[0]) {
				case 'all':
					$frsrs = $package->getReleases();
					foreach ($frsrs as $frsr) {
						$packageDump['setup'][] = $frsr;
					}
				case 'data':
					break;
				case 'setup':
					$frsrs = $package->getReleases();
					foreach ($frsrs as $frsr) {
						unset($frsr->FRSPackage);
						$packageDump['setup'][] = $frsr;
					}
					break;
				default:
					$packageDump['error'][] = _('Unknown function');
					break;
			}
		} else {
			$packageDump['error'][] = _('Unable to get package id')._(': ').$packageid;
		}
		ksort($packageDump);
		$this->print_result($packageDump, $params);
		return $packageDump;
	}

	function print_result($arrayDump, $params) {
		if (isset($params[1])) {
			if (in_array($params[1], array('json', 'raw', 'return'))) {
				$format = $params[1];
			} else {
				$arrayDump['error'][] = _('Unknown format. Fallback to raw');
			}
		} else {
			$format = 'raw';
		}
		switch ($format) {
			case 'return':
				return true;
				break;
			case 'json':
				echo json_encode($arrayDump, JSON_PRETTY_PRINT)."\n";
				break;
			case 'raw':
			default:
				print_r($arrayDump);
		}
	}
}

session_set_admin();

if (count($argv) >= 3) {
	$action = $argv[1];
	$name   = $argv[2];
	if (count($argv) >= 3) {
		$j = 0;
		for ($i = 3; $i < count($argv); $i++) {
			$params[$j] = $argv[$i];
			$j++;
		}
	}
} else {
	$action = 'help';
	$name   = '';
}

$ctl = new CliActions();
if (method_exists($ctl, $action)) {
	if (isset($params)) {
		$ctl->$action($name, $params);
	} else {
		$ctl->$action($name);
	}
} else {
	$ctl->help();
}
