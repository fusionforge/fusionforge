#! /usr/bin/php -f
<?php
/**
 * FusionForge source control management
 *
 * Copyright 2012, Alain Peyrat
 * Copyright 2017, Franck Villaume - TrivialDev
 *
 * This file is part of FusionForge.
 *
 * FusionForge is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * FusionForge is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FusionForge; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

require (dirname(__FILE__).'/../common/include/env.inc.php');
require_once $gfcommon.'include/pre.php';
require_once $gfcommon.'tracker/ArtifactFactory.class.php';
require_once $gfcommon.'tracker/ArtifactTypeFactory.class.php';
require_once $gfcommon.'docman/DocumentReviewFactory.class.php';

class CliActions {
	function help($method = null) {
		$methods = join('|', get_class_methods($this));
		$dumpFormatInfo = "the following output formats are available:\n".
				  " - json:\n".
				  "   pretty json formated string output\n".
				  " - raw: (default)\n".
				  "   standard PHP array print_r format\n";
		$importFormatInfo = "The <file> must contain the exact information to import.\n".
				    "Best practice is to reuse the result of an export and modify it.\n".
				    "Use getZipDump function to get binary organization sample.\n";
		switch ($method) {
			case 'help':
				echo "Use: .../forge help ($methods)\n";
				echo "to get detail on each command\n";
				break;
			case 'pluginActivate':
				echo "Use: .../forge pluginActivate <pluginName>\n";
				echo "to activate the <pluginName> plugin\n";
				break;
			case 'pluginDeactivate':
				echo "Use: .../forge pluginDeactivate <pluginName>\n";
				echo "to deactivate the <pluginName> plugin\n";
				break;
			case 'artifactDump':
				echo "Use: .../forge artifactDump <aid> [json|raw]\n";
				echo "to dump an artifact from a specific tracker of a project.\n";
				echo $dumpFormatInfo;
				break;
			case 'trackerDump':
				echo "Use: .../forge trackerDump <atid> [json|raw]\n";
				echo "to dump a tracker from a specific project.\n";
				echo $dumpFormatInfo;
				break;
			case 'documentDump':
				echo "Use: .../forge documentDump <docid> [json|raw]\n";
				echo "to dump a document from a specific project.\n";
				echo $dumpFormatInfo;
				break;
			case 'documentImport':
				echo "Use: .../forge documentImport <file> [json|raw]\n";
				echo "to import a document.\n";
				echo $dumpFormatInfo.$importFormatInfo;
				break;
			case 'docgroupDump':
				echo "Use: .../forge docgroupDump <docgroupid> [json|raw]\n";
				echo "to dump a document group (folder) from a specific project.\n";
				echo $dumpFormatInfo;
				break;
			case 'docmanDump':
				echo "Use: .../forge docmanDump <groupid> [json|raw]\n";
				echo "to dump docman from a specific project.\n";
				echo $dumpFormatInfo;
				break;
			case 'releaseDump':
				echo "Use: .../forge releaseDump <releaseid> [json|raw]\n";
				echo "to dump a spectific FRS release from a specific project.\n";
				echo $dumpFormatInfo;
				break;
			case 'packageDump':
				echo "Use: .../forge packageDump <packageid> [json|raw]\n";
				echo "to dump a spectific FRS package from a specific project.\n";
				echo $dumpFormatInfo;
				break;
			case 'frsDump':
				echo "Use: .../forge frsDump <groupid> [json|raw]\n";
				echo "to dump FRS from a specific project.\n";
				echo $dumpFormatInfo;
				break;
			case 'surveyDump':
				echo "Use: .../forge surveyDump <surveyid> [json|raw]\n";
				echo "to dump a specific survey from a specific project.\n";
				echo $dumpFormatInfo;
				break;
			case 'groupDump':
				echo "Use: .../forge groupDump <groupid> [json|raw]\n";
				echo "to dump a group.\n";
				echo $dumpFormatInfo;
				break;
			case 'getZipDump':
				echo "Use: .../forge getDataDump file [json|raw]\n";
				echo "to generate a zip file that includes all data based on parameter file.\n";
				echo "The file can be generated by using other Dump functions such as groupDump.\n";
				break;
			default:
				echo "Usage: .../forge ($methods) [arguments...]\n" ;
				echo "Get more info use: .../forge help help\n";
				break;
		}
	}

	function pluginActivate ($name) {
		$pm = plugin_manager_get_object();
		$pm->activate($name);
		$pm->LoadPlugin($name);
		$plugin = $pm->GetPluginObject($name);
		$plugin->install();
	}

	function pluginDeactivate ($name) {
		$pm = plugin_manager_get_object();
		$pm->deactivate($name);
	}

	function getZipDump($file, $format = 'json') {
		$stream = $this->loadFile($file, $format);
		if (!$stream) {
			return false;
		}
		$time = time();
		$zipfile = 'fusionforge-zipDump-'.$time.'.zip';
		global $zip;
		$zip = new ZipArchive();
		if($zip->open($zipfile, ZIPARCHIVE::CREATE | ZIPARCHIVE::OVERWRITE) !== true) {
			echo _('Unable to create zip file')._(': ').$zipfile;
			return false;
		}

		function copyStorageRef(&$value, $key) {
			global $zip;
			if ($key == 'storageref' && $value != null) {
				if (is_file($value) && is_readable($value)) {
					$localname = str_replace(forge_get_config('data_path').'/', '', $value);
					$zip->addFile($value, $localname);
					$value = $localname;
				}
			}
		}

		array_walk_recursive($stream, 'copyStorageRef');
		if ($format == 'json') {
			$stream  = json_encode($stream, JSON_PRETTY_PRINT);
		}
		file_put_contents('parameter.'.$format, $stream);
		$zip->addFile('parameter.'.$format, basename('parameter.'.$format));
		$zip->close();
		@unlink('parameter.'.$format);
		return file_exists($zipfile);
	}

	function artifactDump($aid, $format = 'json') {
		$artifactDump['id'] = $aid;
		$artf = artifact_get_object($aid);
		if ($artf && is_object($artf) && !$artf->isError()) {
			$artifactDump['history'] = array();
			$hist = $artf->getHistory();
			if (db_numrows($hist) > 0) {
				while ($arr = db_fetch_array($hist, PGSQL_ASSOC)) {
					$artifactDump['history'][] = $arr;
				}
			}
			$artifactDump['artifact'] = (array)$artf;
			unset($artifactDump['artifact']['ArtifactType']);
			$artifactDump['monitor'] = $artf->getMonitorIds();
			$artifactDump['messages'] = array();
			$messages = $artf->getMessages();
			if (db_numrows($messages) > 0) {
				while ($arr = db_fetch_array($messages, PGSQL_ASSOC)) {
					$artifactDump['messages'][] = $arr;
				}
			}
			$files = $artf->getFiles();
			foreach ($files as $key => $file) {
				unset($file->Artifact);
				$artifactDump['artifact']['files'][$key] = (array)$file;
				$artifactDump['artifact']['files'][$key]['storageref'] = $file->getFile();
			}
			$artifactDump['artifact']['relatedtasks'] = array();
			$tasks = $artf->getRelatedTasks();
			if (db_numrows($tasks) > 0) {
				while ($arr = db_fetch_array($tasks, PGSQL_ASSOC)) {
					$artifactDump['artifact']['relatedtasks'][] = $arr;
				}
			}
			$artifactDump['artifact']['votes'] = $artf->getVotes();
			$artifactDump['artifact']['extra_field_data'] = $artf->getExtraFieldDataText();
		} else {
			$artifactDump['error'][] = _('Unable to get artifact id')._(': ').$aid;
		}
		ksort($artifactDump);
		$this->print_result($artifactDump, $format);
		return $artifactDump;
	}

	function groupDump($lgroup_id, $format = 'json') {
		// that is ugly... group_id is used as global var. it needs to be defined.
		global $group_id;
		$group_id = $lgroup_id;
		$groupDump['id'] = $group_id;
		$group = group_get_object($group_id);
		if ($group && is_object($group) && !$group->isError()) {
			$groupDump['setup'] = (array)$group;
			$groupDump['setup']['membersArr'] = $group->getMembers(false);
			$groupDump['setup']['roles'] = $group->getRoles();
			$groupDump['setup']['homepage'] = $group->getWidgetLayoutConfig();
			if ($group->usesDocman()) {
				$groupDump['docman'] = $this->docmanDump($group_id, 'return');
			}
			if ($group->usesTracker()) {
				$groupDump['trackers'] = array();
				$atf = new ArtifactTypeFactory($group);
				$atid_arr = $atf->getAllArtifactTypeIds();
				foreach ($atid_arr as $atid) {
					$groupDump['trackers'][] = $this->trackerDump($atid, 'return');
				}
			}
			if ($group->usesForum()) {
				$groupDump['forums'] = array();
				$ff = new ForumFactory($group);
				$ffid_arr = $ff->getAllForumIds();
				foreach ($ffid_arr as $ffid) {
					$groupDump['forums'][] = $this->forumDump($ffid, 'return');
				}
			}
			if ($group->usesFRS()) {
				$groupDump['frs'] = $this->frsDump($group_id, 'return');
			}
			if ($group->usesNews()) {
				$groupDump['news'] = array();
				$resultdb = db_query_params ('SELECT forum_id FROM news_bytes WHERE news_bytes.group_id = $1',
								array($group_id));
				$forumIds = array();
				if ($resultdb && db_numrows($resultdb)) {
					$forumIds = util_result_column_to_array($resultdb);
				}
				foreach ($forumIds as $forumId) {
					$groupDump['news'][] = $this->forumDump($forumId, 'return');
				}
			}
			if ($group->usesSurvey()) {
				$groupDump['surveys'] = array();
				$sf = new SurveyFactory($group);
				$sfid_arr = $sf->getSurveysIds();
				foreach ($sfid_arr as $sfid) {
					$groupDump['surveys'][] = $this->surveyDump($sfid, 'return');
				}
			}
			plugin_hook_by_reference('pluginDump', $groupDump);
		} else {
			$groupDump['error'][] = _('Unable to get group id')._(': ').$group_id;
		}
		ksort($groupDump);
		$this->print_result($groupDump, $format);
	}

	function surveyDump($sid, $format = 'json') {
		$surveyDump['id'] = $sid;
		$surveyObject = survey_get_object($sid);
		$surveyObject->getQuestionInstances();
		$surveyDump['setup'] = (array)$surveyObject;
		unset($surveyDump['setup']['Group']);
		foreach($surveyDump['setup']['all_question_array'] as $question) {
			unset($question->Group);
		}
		ksort($surveyDump);
		$this->print_result($surveyDump, $format);
		return $surveyDump;
	}

	function forumDump($fid, $format = 'json') {
		$forumDump['id'] = $fid;
		$forum = forum_get_object($fid);
		if ($forum && is_object($forum) && !$forum->isError()) {
			unset($forum->Group);
			$forumDump['setup'] = (array)$forum;
		} else {
			$forumDump['error'][] = _('Unable to get forum id')._(': ').$fid;
		}
		ksort($forumDump);
		$this->print_result($forumDump, $format);
		return $forumDump;
	}

	function trackerDump($atid, $format = 'json') {
		$trackerDump['id'] = $atid;
		$at = artifactType_get_object($atid);
		if ($at && is_object($at) && !$at->isError()) {
			$trackerDump['setup'] = $at->getSettings();
			$af = new ArtifactFactory($at);
			if ($af && is_object($af) && !$at->isError()) {
				$af->setup(0, '', '', 0, 'overwrite', false, false, array(), false);
				$artifacts = $af->getArtifacts();
				foreach ($artifacts as $artf) {
					$trackerDump['data'][] = $this->artifactDump($artf->getID(), 'return');
				}
				$trackerDump['monitor'] = $at->getMonitorIds();
			} else {
				$trackerDump['error'][] = _('Unable to retrieve artifacts');
			}
		} else {
			$trackerDump['error'][] = _('Unable to get tracker id')._(': ').$atid;
		}
		ksort($trackerDump);
		$this->print_result($trackerDump, $format);
		return $trackerDump;
	}

	function documentDump($docid, $format = 'json') {
		$doc = document_get_object($docid);
		if ($doc && is_object($doc) && !$doc->isError()) {
			$dvf = new DocumentVersionFactory($doc);
			$documentDump = (array)$doc;
			unset($documentDump['Group']);
			$documentDump['versions'] = $dvf->getVersions();
			$serialIDs = $dvf->getSerialIDs();
			$drf = new DocumentReviewFactory($doc);
			$documentDump['reviews'] = $drf->getReviews($serialIDs);
			$documentDump['monitor'] = $doc->getMonitorIds();
		} else {
			$documentDump['error'][] = _('Unable to get document id')._(': ').$docid;
		}
		$documentDump['id'] = $docid;
		ksort($documentDump);
		$this->print_result($documentDump, $format);
		return $documentDump;
	}

	function documentImport($file, $format = 'json') {
		global $importRefMapping;
		$stream = $this->loadFile($file, $format);
		if (!$stream) {
			return false;
		}
		$group_id = $this->getMappingId($stream['data_array']['group_id'], 'group');
		$group = group_get_object($group_id);
		$importSerialIdRef = array();
		if ($group && is_object($group) && !$group->isError() && $group->usesDocman()) {
			db_begin();
			$firstversion = true;
			$path = getcwd();
			foreach ($stream['versions'] as $key => $version) {
				if ($version['filetype'] != 'URL' && $version['storageref'] != null) {
					if (!is_file($path.'/'.$version['storageref'])) {
						echo _('Invalid file name.')."\n";
						db_rollback();
						return false;
					}
					$filedataname = $path.'/'.$version['storageref'];
					if (function_exists('finfo_open')) {
						$finfo = finfo_open(FILEINFO_MIME_TYPE);
						$filedatatype = finfo_file($finfo, $filedataname);
					} else {
						$filedatatype = 'application/binary';
					}
				} else {
					$filedatatype = $version['filetype'];
					$filedataname = '';
				}

				$doc_group_id = $this->getMappingId($stream['data_array']['doc_group'], 'doc_group');
				$doc_group = documentgroup_get_object_byid($doc_group_id);
				if (!$doc_group || !is_object($doc_group) || $doc_group->isError()) {
					echo _('Invalid document group (folder)')._(': ').$doc_group_id."\n";
					db_rollback();
					return false;
				}
				$created_by = $this->getMappingId($version['created_by'], 'user');
				$importData['user'] = $created_by;
				$importData['nopermcheck'] = true;
				$importData['nonotice'] = true;
				$importData['time'] = $version['createdate'];
				if ($firstversion == true) {
					$d = new Document($group);
					if (!$d->create($version['filename'], $filedatatype, $filedataname, $doc_group_id, $version['title'], $version['description'], $stream['data_array']['stateid'], $version['vcomment'], $importData)) {
						echo $d->getErrorMessage()."\n";
						db_rollback();
						return false;
					} else {
						$firstversion = false;
					}
				} else {
					if (!$d->update($version['filename'], $filedatatype, $filedataname, $doc_group_id, $version['title'], $version['description'], $stream['data_array']['stateid'], 0, $version['current_version'], 1, $importData, $version['vcomment'])) {
						echo $d->getErrorMessage()."\n";
						db_rollback();
						return false;
					}
				}
				$dv = new DocumentVersion($d, $key + 1);
				$importSerialIdRef[$version['serial_id']] = $dv->getID();
			}
			if ($d && !$d->isError()) {
				foreach($stream['reviews'] as $review) {
					$dr = new DocumentReview($d);
					$reviewmandatoryusers = array();
					$reviewoptionalusers = array();
					foreach($review['users'] as $reviewuser) {
						$userid = $this->getMappingId($reviewuser['userid'], 'user');
						if ($reviewuser['typeid'] == 1) {
							$reviewmandatoryusers[] = $userid;
						} elseif ($reviewuser['typeid'] == 2) {
							$reviewoptionalusers[] = $userid;
						}
					}
					$created_by = $this->getMappingId($review['created_by'], 'user');
					$importData['user'] = $created_by;
					$importData['startdate'] = $review['startdate'];
					$importData['enddate'] = $review['enddate'];
					$importData['nonotice'] = true;
					if (!$dr->create($importSerialIdRef[$review['serialid']], $review['title'], $review['description'], $review['enddate'], $reviewmandatoryusers, $reviewoptionalusers, false, $importData)) {
						echo $dr->getErrorMessage()."\n";
						db_rollback();
						return false;
					} else {
						foreach($review['comments'] as $comment) {
							$nc = new DocumentReviewComment($dr);
							if (!$nc->create($comment['data_array']['userid'], $dr->getID(), $comment['data_array']['rcomment'], $comment['data_array']['createdate'])) {
								echo $nc->getErrorMessage()."\n";
								db_rollback();
								return false;
							} else {
								if (isset($comment['attachment']['storageref']) && $comment['attachment']['storageref'] != null) {
									if (!$nc->attachFile($comment['attachment']['data_array']['filename'], $comment['attachment']['data_array']['filetype'], $comment['attachment']['data_array']['createdate'], $comment['attachment']['storageref'])) {
										echo $nc->getErrorMessage()."\n";
										db_rollback();
										return false;
									}
								}
							}
						}
					}
				}
			}
			db_commit();
			$importRefMapping['document'][$stream['data_array']['docid']] = $d->getID();
			echo _('Document injected')."\n";
			return true;
		} else {
			echo _('Unable to get project to inject document')._(': ').$group_id."\n";
			return false;
		}
	}

	function docgroupDump($docgroup_id, $format = 'json') {
		$docgroup = documentgroup_get_object_byid($docgroup_id);
		if ($docgroup && is_object($docgroup) && !$docgroup->isError()) {
			$dm = new DocumentManager($docgroup->getGroup());
			if ($dm && is_object($dm) && !$dm->isError()) {
				$docgroupDump = (array)$docgroup;
				unset($docgroupDump['Group']);
				$docgroupDump['subdocgroups'] = $dm->getTree($docgroup_id);
				$df = new DocumentFactory($docgroup->getGroup());
				$df->setDocGroupID($docgroup_id);
				$df->setStateID(array(1, 2, 3, 4, 5));
				$df->setOrder(array('docid'));
				$docgroupDump['files'] = (array)$df->getDocumentsWithVersions();
			} else {
				$docgroupDump['error'][] = _('Unable to get document manager for docgroup id')._(': ').$docgroup_id;
			}
		} else {
			$docgroupDump['error'][] = _('Unable to get docgroup id')._(': ').$docgroup_id;
		}
		$docgroupDump['id'] = $docgroup_id;
		ksort($docgroupDump);
		$this->print_result($docgroupDump, $format);
		return $docgroupDump;
	}

	function docgroupImport($file, $format = 'json') {
		global $importRefMapping;
		$stream = $this->loadFile($file, $format);
		if (!$stream) {
			return false;
		}
		$group_id = $this->getMappingId($stream['data_array']['group_id'], 'group');
		$group = group_get_object($group_id);
		$importSerialIdRef = array();
		if ($group && is_object($group) && !$group->isError() && $group->usesDocman()) {
			db_begin();
			$dg = new DocumentGroup($group);
			$parent_doc_group = (int)$this->getMappingId($stream['data_array']['parent_doc_group'], 'doc_group');
			if (!$dg->create($stream['data_array']['groupname'], $parent_doc_group, $stream['data_array']['stateid'], $stream['data_array']['createdate'])) {
				echo $dg->getErrorMessage()."\n";
				db_rollback();
				return false;
			}
			$importRefMapping['doc_group'][$stream['data_array']['doc_group']] = $dg->getID();
			if (isset($stream['subdocgroups']) && is_array($stream['subdocgroups'])) {
				foreach ($stream['subdocgroups'] as $subdocgroup) {
					$filename = 'docgroupDump-'.$subdocgroup['data_array']['doc_group'].'.'.$format;
					$this->createSubfile($filename, $subdocgroup, $format);
					if (!$this->docgroupImport($filename, $format)) {
						echo _('Unable to inject child docgroup')."\n";
						db_rollback();
						return false;
					}
					@unlink($filename);
				}
			}
			db_commit();
			echo _('Document Group injected')."\n";
			return true;
		} else {
			echo _('Unable to get project to inject document group')._(': ').$group_id."\n";
			return false;
		}
	}

	function docmanDump($group_id, $format = 'json') {
		$docmanDump = array();
		$group = group_get_object($group_id);
		if ($group && is_object($group) && !$group->isError()) {
			if ($group->usesDocman()) {
				$dm = new DocumentManager($group);
				if ($dm && is_object($dm) && !$dm->isError()) {
					$docmanDump['setup'] = $dm->getSettings();
					$docmanDump['data'] = $dm->getTree();
				} else {
					$docmanDump['error'][] = _('Unable to get document manager for group id')._(': ').$group_id;
				}
			} else {
				$docmanDump['error'][] = _('Document manager not enabled for group id')._(': ').$group_id;
			}
		} else {
			$docmanDump['error'][] = _('Unable to get group id')._(': ').$group_id;
		}
		ksort($docmanDump);
		$this->print_result($docmanDump, $format);
		return $docmanDump;
	}

	function frsDump($group_id, $format = 'json') {
		$frsDump = array();
		$group = group_get_object($group_id);
		if ($group && is_object($group) && !$group->isError()) {
			if ($group->usesFRS()) {
				$frsfp = new FRSPackageFactory($group);
				if ($frsfp && is_object($frsfp) && !$frsfp->isError()) {
					$frspIds = $frsfp->getAllPackagesIds();
					foreach ($frspIds as $frspId) {
						$frsDump['package'][] = $this->packageDump($frspId, 'return');
					}
				} else {
					$frsDump['error'][] = _('Unable to get FRS for group id')._(': ').$group_id;
				}
			} else {
				$frsDump['error'][] = _('FRS not enabled for group id')._(': ').$group_id;
			}
		} else {
			$frsDump['error'][] = _('Unable to get group id')._(': ').$group_id;
		}
		ksort($frsDump);
		$this->print_result($frsDump, $format);
		return $frsDump;
	}

	function packageDump($packageid, $format = 'json') {
		$packageDump['id'] = $packageid;
		$package = frspackage_get_object($packageid);
		if ($package && is_object($package) && !$package->isError()) {
			unset($package->Group);
			$packageDump['setup'] = (array)$package;
			$frsrs = $package->getReleases();
			$packageDump['setup']['package_releases'] = array();
			foreach ($frsrs as $frsr) {
				unset($frsr->FRSPackage);
				$packageDump['setup']['package_releases'][] = $frsr;
			}
			$packageDump['monitor'] = $package->getMonitorIds();
		} else {
			$packageDump['error'][] = _('Unable to get package id')._(': ').$packageid;
		}
		ksort($packageDump);
		$this->print_result($packageDump, $format);
		return $packageDump;
	}

	function releaseDump($releaseid, $format = 'json') {
		$releaseDump['id'] = $releaseid;
		$release = frsrelease_get_object($releaseid);
		if ($release && is_object($release) && !$release->isError()) {
			unset($release->FRSPackage);
			$releaseDump['setup'] = $release;
		} else {
			$releaseDump['error'][] = _('Unable to get release id')._(': ').$releaseid;
		}
		ksort($releaseDump);
		$this->print_result($releaseDump, $format);
		return $releaseDump;
	}

	function print_result($arrayDump, $format = 'json') {
		if (in_array($format, array('json', 'raw', 'return'))) {
			$lformat = $format;
		} else {
			$arrayDump['error'][] = _('Unknown format. Fallback to raw');
			$lformat = 'raw';
		}
		switch ($lformat) {
			case 'return':
				return true;
				break;
			case 'json':
				echo json_encode($arrayDump, JSON_PRETTY_PRINT)."\n";
				break;
			case 'raw':
			default:
				print_r($arrayDump);
		}
	}

	function loadFile($file, $format) {
		if (!is_file($file)) {
			echo _('Unable to load file')._(': ').$file;
			return false;
		}
		if (!in_array($format, array('json', 'raw'))) {
			echo _('Wrong file format')._('? ').$format;
			return false;
		}
		$stream_ori = file_get_contents($file);
		if ($format == 'json') {
			$stream = json_decode($stream_ori, true);
		} else {
			$stream = $stream_ori;
		}
		unset($stream_ori);
		return $stream;
	}

	function getMappingId($idtofind, $objecttofind) {
		global $importRefMapping;
		if (isset($importRefMapping[$objecttofind][$idtofind])) {
			return $importRefMapping[$objecttofind][$idtofind];
		} else {
			//not found, return the idtofind.
			return $idtofind;
		}
	}

	function createSubfile($filename, $data, $format) {
		if ($format == 'json') {
			$stream = json_encode($data, JSON_PRETTY_PRINT);
		} else {
			$stream = $data;
		}
		file_put_contents($filename, $stream);
	}
}

session_set_admin();

if (count($argv) >= 3) {
	$action = $argv[1];
	$name   = $argv[2];
	if (count($argv) >= 3) {
		$j = 0;
		for ($i = 3; $i < count($argv); $i++) {
			$params[$j] = $argv[$i];
			$j++;
		}
	}
} else {
	$action = 'help';
	$name   = '';
}

$ctl = new CliActions();
if (method_exists($ctl, $action)) {
	if (isset($params[0])) {
		$ctl->$action($name, $params[0]);
	} else {
		$ctl->$action($name);
	}
} else {
	$ctl->help();
}
