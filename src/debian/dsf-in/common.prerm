#! /bin/sh
# prerm script for @OLDPACKAGE@
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <prerm> `remove'
#        * <old-prerm> `upgrade' <new-version>
#        * <new-prerm> `failed-upgrade' <old-version>
#        * <conflictor's-prerm> `remove' `in-favour' <package> <new-version>
#        * <deconfigured's-prerm> `deconfigure' `in-favour'
#          <package-being-installed> <version> `removing'
#          <conflicting-package> <version>
# for details, see /usr/share/doc/packaging-manual/

if [ \( "$1" = "upgrade" -o "$1" = "remove" \) -a -L /usr/doc/pkg ]; then
    rm -f /usr/doc/pkg
fi

case "$1" in
    remove)
	for file in \
	    /usr/share/xml/xhtml/schema/dtd/1.0/xhtml1-strict.dtd \
	    /usr/share/xml/xhtml/schema/dtd/1.0/xhtml1-transitional.dtd \
	    /usr/share/xml/entities/xhtml/xhtml-lat1.ent \
	    /usr/share/xml/entities/xhtml/xhtml-special.ent \
	    /usr/share/xml/entities/xhtml/xhtml-symbol.ent \
	    ; do
		fname=${file##*/}
		test x"$(readlink @SOURCE_PATH@/common/include/$fname)" = \
		    x"$file" && rm -f @SOURCE_PATH@/common/include/$fname
	done

	if [ -f @CONFIG_PATH@/local.pl ] 
	then
		rm -f @CONFIG_PATH@/local.pl
	fi
	;;
    upgrade|deconfigure|failed-upgrade)
        ;;
    *)
        echo "prerm called with unknown argument \`$1'" >&2
        exit 0
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
