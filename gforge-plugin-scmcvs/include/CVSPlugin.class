<?php

require_once('common/include/User.class');

class CVSPlugin extends SCM {
	function CVSPlugin () {
		$this->SCM () ;
		$this->name = "scmcvs";
		$this->text = "CVS";
		$this->hooks[] = "scm_page";
		$this->hooks[] = "scm_admin_update";
		$this->hooks[] = "scm_admin_page";
		$this->hooks[] = "scm_stats";

		$this->hooks[] = "scm_plugin";
		$this->hooks[] = "group_approved";
		$this->hooks[] = "cssstyle";
		//$this->hooks[] = "groupmenu_scm";

		require_once('/etc/gforge/plugins/scmcvs/config.php') ;

		//$this->default_cvs_server = $default_cvs_server ;
		//$this->this_server = $this_server ;
		$this->enabled_by_default = $enabled_by_default ;

		$this->register () ;
	}

	function CallHook ($hookname, $params) {
		global $Language, $HTML;
		
		switch ($hookname) {
		case "scm_page":
			$group_id = $params['group_id'] ;
			$this->display_scm_page ($group_id) ;
			break ;
		case "scm_admin_update":
			$this->scm_admin_update ($params) ;
			break ;
		case "scm_admin_page":
			$this->display_scm_admin_page ($params) ;
			break ;
		case "scm_stats":
			$this->display_stats ($params) ;
			break;
		case "group_approved":
			$this->group_approved ($params) ;
			break;
//		case "groupmenu_scm":
//			$this->display_groupmenu_scm ($params) ;
//			break;
		case "cssstyle":
			$this->cssstyle_scm ($params) ;
			break;
		case "scm_plugin":
			$scm_plugins=& $params['scm_plugins'];
			$scm_plugins[]=$this->name;
			break;
		default:
			// Forgot something
		}
	}

	function cssstyle_scm ($layout) {
		print '
		
		/* CSS for FreeBSD-CVSweb */
		/* $FreeBSD: projects/cvsweb/css/cvsweb.css,v 1.14 2004/03/16 18:24:41 scop Exp $ */
		
		/* body {
		  color: #000;
		  background-color: #fff;
		}
		*/
		th {
		  text-align: left;
		}
		hr {
		  height: 1px;
		  border: none;
		  background-color: #000;
		}
		h1 {
		  text-align: center;
		}
		fieldset {
		  background-color: #eee;
		  padding: 0.8em;
		}
		input[type="submit"] {
		  padding-left: 0.5em;
		  padding-right: 0.5em;
		}
		
		/* Generic nowrap class */
		.nowrap {
		  white-space: nowrap;
		}
		
		/* Source, diff and annotate views */
		.src {
		  color: #000;
		  background-color: #eee;
		  font-style: normal;
		  font-weight: normal;
		}
		
		/* Navigation header for source views, diffs and annotations */
		.navigate-header {
		  background-color: #99e;
		  padding: 2px;
		  border: 2px outset;
		}
		
		/* Directory table */
		table.dir {
		  border-right: 1px solid #ccc;
		}
		/* Cells */
		table.dir * td {
		  border-left: 1px solid #ccc;
		  border-bottom: 1px solid #ccc;
		  padding-left: 5px;
		  padding-right: 5px;
		}
		/* Column headers */
		table.dir * th {
		  /*
		  background-color:#ffc ;
		  */
		  background-color:'.$layout->COLOR_HTMLBOX_TITLE.' ;
		  border: thin outset;
		  padding-left: 5px;
		  padding-right: 5px;
		}
		/* Sorted column header */
		table.dir * th.sorted {
		  /*
		  background-color: #fc6;
		  */
		  background-color:'.$layout->COLOR_HTMLBOX_TITLE.' ;
		  border: thin inset;
		}
		/* Even rows */
		table.dir * tr.even {
		  background-color: #fff;
		}
		/* Odd rows */
		table.dir * tr.odd {
		  background-color: #fff;
		}
		/* File and dir name columns */
		table.dir * td.file, table.dir * td.dir {
		  white-space: nowrap;
		}
		/* Graph link column */
		table.dir * td.graph {
		  padding-left: 3px;
		  padding-right: 3px;
		  text-align: center;
		  width: 1%;
		}
		/* Age column */
		table.dir * td.age {
		  font-style: italic;
		  white-space: nowrap;
		}
		table.dir * td.author {
		  white-space: nowrap;
		}
		/* Log entry column */
		table.dir * td.log {
		  font-size: smaller;
		}
		/* Attic toggles in directory view */
		.attic {
		  font-size: smaller;
		}
		
		/* Option table labels and values */
		.opt-label {
		  text-align: right;
		  padding-left: 0.5em;
		}
		.opt-value {
		  padding-right: 0.5em;
		}
		
		/* Log entry in markup */
		.log-markup {
		  background-color: #fff;
		  width: 100%;
		}
		
		/* Diff-selected revision in log */
		.diff-selected {
		  padding-right: 0.5em;
		  border-right: 10px solid #fc6;
		}
		
		/* Line-header of each diffed file */
		.diff-heading {
		  background-color: #9cc;
		  border: 2px outset;
		  padding: 5px;
		}
		/* Lines that are the same */
		.diff-same {
		  font-family: Helvetica, Arial, sans-serif;
		  font-size: smaller;
		}
		/* Empty lines */
		.diff-empty {
		  background-color: #ccc;
		  font-size: smaller;
		}
		/* Added lines */
		.diff-added {
		  background-color: #ccf;
		  font-family: Helvetica, Arial, sans-serif;
		  font-size: smaller;
		}
		/* Removed lines */
		.diff-removed {
		  background-color: #f99;
		  font-family: Helvetica, Arial, sans-serif;
		  font-size: smaller;
		}
		/* Changed lines */
		.diff-changed {
		  background-color: #9f9;
		  font-family: Helvetica, Arial, sans-serif;
		  font-size: smaller;
		}
		/* Empty changed lines */
		.diff-changed-missing {
		  background-color: #9c9;
		  font-size: smaller;
		}
		/* Unchanged text in ediffs */
		.diff-unchanged {
		  background-color: #ccc;
		  font-family: Helvetica, Arial, sans-serif;
		  font-size: smaller;
		}
		
		/* Current revision lines in annotate view */
		.current-rev {
		  font-weight: bold;
		}
		
		/* Download links */
		.download-link { 
		  font-weight: bold;
		}
		/* Display links */
		.display-link { 
		  font-weight: bold;
		}
		';
	}

	function display_scm_page ($group_id) {
		global $Language, $HTML ;

		$project =& group_get_object($group_id);
		if (!$project || !is_object($project)) {
			return false;
		} elseif ($project->isError()) {
			return false;
		}
		
		if ($project->usesPlugin($this->name)) {
		
		print $Language->getText('plugin_scmcvs','documentation');

		$cvsrootend=$project->getSCMBox().':/cvsroot/'.$project->getUnixName();

		// ######################## table for summary info

?>
<table width="100%">
	<tr valign="top">
		<td width="65%">
<?php
// ######################## anonymous CVS instructions

	if ($project->enableAnonSCM()){
		echo $Language->getText('plugin_scmcvs', 'anoncvs');
		print "
			<p>
				<tt>cvs -d :pserver:anonymous@" . $cvsrootend." login</tt><br>
				<tt>cvs -d :pserver:anonymous@" . $cvsrootend." checkout <em>modulename</em></tt>
			</p>" ;
	 }

// ############################ developer access
			
	echo $Language->getText('plugin_scmcvs', 'devcvs');
		print "
			<p>
				<tt>export CVS_RSH=ssh</tt><br>
				<tt>cvs -d :ext:<em>username</em>@".$cvsrootend." checkout <em>modulename</em></tt>
			</p>" ;

?>

		</td>
		<td width="35%">

<?php

// ############################## CVS Browsing

$anonymous = 1 ;
if (session_loggedin()) {
	$perm =& $project->getPermission(session_get_user());
	if (!$perm || !is_object($perm)) {
		return false;
	} elseif ($perm->isError()) {
		return false;
	}
	$anonymous = !$perm->isMember();
}
 
if ($project->enableAnonSCM()){
	echo $HTML->boxTop($Language->getText('plugin_scmcvs', 'history'));

	echo $Language->getText('plugin_scmcvs', 'browsetree');
	echo '<p><a href="'.$this->account_group_cvsweb_url($group_id).'">'.$Language->getText('plugin_scmcvs', 'browseit').'</a></p>' ;
	echo $HTML->boxBottom();
}

?>
		</td>
	</tr>
</table>

<?php

// ************************************************



		}

	}

	function scm_admin_update ($params) {
		$group =& group_get_object($params['group_id']);
 		if ($params['scmcvs_enable_anoncvs']) {
			$group->SetUsesAnonSCM(true);
		} else {
			$group->SetUsesAnonSCM(false);
 		}
 		if ($params['scmcvs_enable_pserver']) {
			$group->SetUsesPserver(true);
		} else {
			$group->SetUsesPserver(false);
 		}
////		if ($params['scmradio'] == 'scmcvs') {
////			$group->setPluginUse("scmcvs", 1) ;
////		} else {
////			$group->setPluginUse("scmcvs", 0) ;
////		}
// 		if ($params['scmcvs_use_cvs']) {
// 			$group->setPluginUse("scmcvs", 1) ;
// 		} else {
// 			$group->setPluginUse("scmcvs", 0) ;
// 		}
////		if ($params['scmcvs_enable_anon_cvs']) {
////			$this->SetUsesAnonCVS ($params['group_id'], true) ;
////		} else {
////			$this->SetUsesAnonCVS ($params['group_id'], false) ;
////		}
////		if ($params['scmcvs_cvs_server'] && $params['scmcvs_cvs_server'] != "") {
////			$this->SetGroupServer ($params['group_id'], $params['scmcvs_cvs_server']) ;
////		} else {
////			$this->SetGroupServer ($params['group_id'], $this->GetDefaultServer ()) ;
////		}
	}

	// This function is used to render checkboxes below
	function c($v) {
		if ($v) {
			return 'CHECKED';
		} else {
			return '';
		}
	}

	function todoornottodo ($params) {
		$group =& group_get_object($params['group_id']);
	?>
		<input type="radio" name="scmradio" value="scmcvs" <?php echo $this->c($group->usesPlugin("scmcvs")); ?>>
		<strong>Use CVS</strong>
		<br />
		<input type="text" name="scmcvs_cvs_server" value="<?php echo $group->getSCMBox(); ?>">
		<strong>CVS server</strong>
		<br />
		<br />
	<?php
	}


	function display_scm_admin_page ($params) {
		global $Language;
		$group =& group_get_object($params['group_id']);
	?>
		<input type="CHECKBOX" name="scmcvs_enable_anoncvs" value="1" <?php echo $this->c($group->enableAnonSCM()); ?> >
		<strong><?php echo $Language->getText('project_admin_editgroupinfo','enable_anonymous_cvs') ?></strong>
		<br />
		<input type="CHECKBOX" name="scmcvs_enable_pserver" value="1" <?php echo $this->c($group->enablePserver()); ?> >
		<strong><?php echo $Language->getText('project_admin_editgroupinfo','enable_pserver') ?></strong>
		<br />
	<?php
	}

	function display_stats ($params) {
		global $Language ;
		$group_id = $params['group_id'] ;
		$result = db_query("
			SELECT commits, adds
			FROM plugin_scmcvs_stats
			WHERE group_id='$group_id'");
		$commit_num = db_result($result,0,0);
		$add_num    = db_result($result,0,1);
		if (!$commit_num) {
			$commit_num=0;
		}
		if (!$add_num) {
			$add_num=0;
		}
		echo ' (CVS: '.$Language->getText('project_home','cvs_commits',array(number_format($commit_num,0),number_format($add_num,0))).")";
		if ($commit_num || $add_num) {
			echo '
		<br /> &nbsp; -
			<a href="'.$this->account_group_cvsweb_url($group_id).'">'.$Language->getText('plugin_scmcvs', 'browseit').'</a>';
	        }
		
	}

	/**
	 *      account_group_cvsweb_url() - Returns URL for group's CVS interface WWW
	 *
	 *	@param  string  The group name
	 *      @return URL to access CVS over HTTP
	 */
	function account_group_cvsweb_url($group_id) {
		$project =& group_get_object($group_id);
		return 'http://'.$project->getSCMBox().'/plugins/scmcvs/cvsweb.php/?cvsroot=cvsroot/'.$project->getUnixName();
	}

	function display_groupmenu_scm($params) {
		$group_id = $params['group_id'] ;
		$project =& group_get_object($group_id);
		if (!$project || !is_object($project)) 
			return;
		if ($project->isError())
		        return;
		if (!$project->isProject())
		        return;
		if ( $project->usesPlugin ( $this->name ) ) {
	        	$params['DIRS'][]='/plugins/scmcvs/?group_id=' . $group_id;
			$params['TITLES'][]=$this->text;
			(($params['toptab'] == $this->name) ? $params['selected']=(count($params['TITLES'])-1) : '' );
		}
	}

	function group_approved ($params) {
		$group_id = $params['group_id'] ;
	
		$project =& group_get_object($group_id);

		if ($this->enabled_by_default) {
			$group->setPluginUse("scmcvs", 1) ;
		} else {
			$group->setPluginUse("scmcvs", 0) ;
		}
	}

/*
	function GetDefaultServer () {
		return $this->default_cvs_server ;
	}

	function GetGroupServer ($group_id) {
		$sql = "SELECT cvs_host FROM plugin_scmcvs_group_usage WHERE group_id = $group_id" ;
		$res = db_query($sql);
		if (db_numrows($res) == 0) {
			return $this->default_cvs_server ;
		} else {
			return db_result($res,0,'cvs_host');
		}
	}

	function SetGroupServer ($group_id, $server) {
		db_begin () ;
		$sql = "SELECT cvs_host FROM plugin_scmcvs_group_usage WHERE group_id = $group_id" ;
		$res = db_query($sql);
		if (db_numrows($res) == 0) {
			$sql = "INSERT INTO plugin_scmcvs_group_usage (group_id, cvs_host) VALUES ($group_id, '$server')" ;
		} else {
			$sql = "UPDATE plugin_scmcvs_group_usage SET cvs_host = '$server' WHERE group_id = $group_id" ;
			
		}
		$res = db_query($sql);
		db_commit () ;
	}

	function UsesAnonCVS ($group_id) {
		$sql = "SELECT anon_cvs FROM plugin_scmcvs_group_usage WHERE group_id = $group_id" ;
		$res = db_query($sql);
		if (db_numrows($res) == 0) {
			return false ;
		} else {
			return db_result($res,0,'anon_cvs');
		}
	}

	function SetUsesAnonCVS ($group_id, $anon_cvs) {
		db_begin () ;
		$anon_cvs = $anon_cvs ? 1 : 0 ;

		$sql = "SELECT anon_cvs FROM plugin_scmcvs_group_usage WHERE group_id = $group_id" ;
		$res = db_query($sql);
		if (db_numrows($res) == 0) {
			$sql = "INSERT INTO plugin_scmcvs_group_usage (group_id, anon_cvs) VALUES ($group_id, $anon_cvs)" ;
		} else {
			$sql = "UPDATE plugin_scmcvs_group_usage SET anon_cvs = $anon_cvs WHERE group_id = $group_id" ;
			
		}
		$res = db_query($sql);
		db_commit () ;
	}
*/

}

// Local Variables:
// mode: php
// c-file-style: "bsd"
// End:

?>
