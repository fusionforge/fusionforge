#! /bin/sh

configure_network()
{
rootfs=$1
hostname=$2
if [ $# -eq 5 ]
then
	address=$3
	netmask=$4
	gateway=$5
	if [ -e $rootfs/etc/sysconfig/network-scripts ]
	then
		cat <<EOF > $rootfs/etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE=eth0
IPADDR=$address
NETMASK=$netmask
#NETWORK=
#BROADCAST
ONBOOT=yes
BOOTPROTO=none
USERCTL=no
EOF
		cat <<EOF > $rootfs/etc/sysconfig/network
NETWORKING=yes
FORWARD_IPV4=yes
HOSTNAME=$hostname
GATEWAY=$gateway
GATEWAYDEV=eth0
EOF
                cat <<EOF >> $rootfs/etc/hosts
$address        $hostname
EOF
		echo "Network configured with static ip"
	else
		exit 2
	fi
else
	if [ -e $rootfs/etc/sysconfig/network-scripts ]
	then
		cat <<EOF > $rootfs/etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE=eth0
ONBOOT=yes
BOOTPROTO=dhcp
USERCTL=no
EOF
		cat <<EOF > $rootfs/etc/sysconfig/network
NETWORKING=yes
FORWARD_IPV4=yes
HOSTNAME=$hostname
GATEWAYDEV=eth0
EOF
                cat <<EOF >> $rootfs/etc/hosts
127.0.1.1       $hostname
EOF
		echo "Network configured with dhcp"
	else
		exit 3
	fi
	# When domain is not local, avahi completed by send hostname
	hostnamebase=`echo $hostname | cut -d. -f1`
	if [ "$hostnamebase.local" != "$hostname" ]
	then
		cat <<EOF > $rootfs/etc/dhclient.conf
send host-name "$hostnamebase";
EOF
	fi
fi
}

configure_pubkey(){
	rootfs=$1
	pubkey=$2
	if [ $# -ne 2 ]
	then
		exit 1
	else
		[ -d $rootfs/root/.ssh ] || mkdir $rootfs/root/.ssh
		cp $pubkey $rootfs/root/.ssh/authorized_keys
	fi
}

configure_hostkeydir(){
	rootfs=$1
	hostkeydir=$2
	name=$3
	if [ $# -ne 3 ]
	then
		exit 1
	else
		[ -d $rootfs/etc/ssh ] || mkdir -p $rootfs/etc/ssh
		if [ -e $hostkeydir ]
		then 
			if [ ! -d $hostkeydir/$name ]
			then
				mkdir $hostkeydir/$name
				echo "Creating SSH2 RSA key; this may take some time ..."
				ssh-keygen -q -f $hostkeydir/$name/ssh_host_rsa_key -N '' -t rsa
				echo "Creating SSH2 DSA key; this may take some time ..."
				ssh-keygen -q -f $hostkeydir/$name/ssh_host_dsa_key -N '' -t dsa
			fi
			cp $hostkeydir/$name/ssh_host_* $rootfs/etc/ssh/
		fi
	fi
}

usage()
{
    cat <<EOF
$1 -h|--help -p|--path=<path> --clean --address=<address> --netmask=<netmask> --gateway=<gateway> --pubkey=<pubkey>
EOF
    return 0
}

options=$(getopt -o hp:n:c -l help,path:,name:,clean:,address:,netmask:,gateway:,pubkey: -- "$@")
if [ $? -ne 0 ]; then
        usage $(basename $0)
        exit 1
fi
eval set -- "$options"

while true
do
    case "$1" in
        -h|--help)      usage $0 && exit 0;;
        -p|--path)      path=$2; shift 2;;
        -n|--name)      name=$2; shift 2;;
	--address)	address=$2; shift 2;;
	--netmask)	netmask=$2; shift 2;;
	--gateway)	gateway=$2; shift 2;;
	--pubkey)	pubkey=$2; shift 2;;
        --)             shift 1; break ;;
        *)              break ;;
    esac
done

if [ -z "$path" ]; then
    echo "'path' parameter is required"
    exit 1
fi

if [ "$(id -u)" != "0" ]; then
    echo "This script should be run as 'root'"
    exit 1
fi

rootfs=$path/rootfs
oldhostkeydir=/var/lib/lxc/ssh
hostkeydir=/var/cache/lxc/ssh
if [ -e $oldhostkeydir ]
then
	if [ ! -e $hostkeydir ]
	then
		mv $oldhostkeydir $hostkeydir
	fi
fi
if [ ! -e $hostkeydir ]
then
	mkdir $hostkeydir
fi

configure_network $rootfs $name $address $netmask $gateway
if [ $? -ne 0 ]; then
    echo "failed to configure network"
    exit 1
fi

configure_pubkey $rootfs $pubkey
if [ $? -ne 0 ]; then
    echo "failed to configure pubkey"
    exit 1
fi

configure_hostkeydir $rootfs $hostkeydir $name
if [ $? -ne 0 ]; then
    echo "failed to configure hostkeydir"
    exit 1
fi
