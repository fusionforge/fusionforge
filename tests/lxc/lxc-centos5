#!/bin/bash

#
# template script for generating centos container for LXC
#

#
# lxc: linux Container library

# Authors:
# Daniel Lezcano <daniel.lezcano@free.fr>

# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.

# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

DISTRO=centos-5

configure_centos()
{
    rootfs=$1
    hostname=$2

    # disable selinux in centos
    mkdir -p $rootfs/selinux
    echo 0 > $rootfs/selinux/enforce

   # configure the network using the dhcp
#    cat <<EOF > $rootfs/etc/network/interfaces
#auto lo
#iface lo inet loopback
#
#auto eth0
#iface eth0 inet dhcp
#EOF

    # set the hostname
#    cat <<EOF > $rootfs/etc/hostname
#$hostname
#EOF
    # set minimal hosts
#    cat <<EOF > $rootfs/etc/hosts
#127.0.0.1 localhost $hostname
#EOF

    # provide the lxc service
#    cat <<EOF > $rootfs/etc/init/lxc.conf
## fake some events needed for correct startup other services
#
#description     "Container Upstart"
#
#start on startup
#
#script
#        rm -rf /var/run/*.pid
#        rm -rf /var/run/network/*
#        /sbin/initctl emit stopped JOB=udevtrigger --no-wait
#        /sbin/initctl emit started JOB=udev --no-wait
#end script
#EOF

#    cat <<EOF > $rootfs/etc/init/console.conf
## console - getty
##
## This service maintains a console on tty1 from the point the system is
## started until it is shut down again.
#
#start on stopped rc RUNLEVEL=[2345]
#stop on runlevel [!2345]
#
#respawn
#exec /sbin/getty -8 38400 /dev/console
#EOF
#sed -i -e '/getty/d' $rootfs/etc/inittab
# Disable tty5 and tty6
sed -i -e '/^5:/d' $rootfs/etc/inittab
sed -i -e '/^6:/d' $rootfs/etc/inittab
# Enable console
cat <<EOF >> $rootfs/etc/inittab
0:2345:respawn:/sbin/mingetty console
EOF

#    cat <<EOF > $rootfs/lib/init/fstab
## /lib/init/fstab: lxc system fstab
#none            /spu                      spufs           gid=spu,optional                  0 0
#none            /tmp                      none            defaults                          0 0
#none            /var/lock                 tmpfs           nodev,noexec,nosuid,showthrough   0 0
#none            /lib/init/rw              tmpfs           mode=0755,nosuid,optional         0 0
#EOF
cat <<EOF > $rootfs/etc/fstab
# NOT MOUNTING IN LXC
#none /dev/pts devpts defaults 0 0
#none /proc    proc   defaults 0 0
#none /sys     sysfs  defaults 0 0
#none /dev/shm tmpfs  defaults 0 0
EOF

    # reconfigure some services
#    if [ -z "$LANG" ]; then
#	chroot $rootfs locale-gen en_US.UTF-8
#	chroot $rootfs update-locale LANG=en_US.UTF-8
#    else
#	chroot $rootfs locale-gen $LANG
#	chroot $rootfs update-locale LANG=$LANG
#    fi

    # remove pointless services in a container
#    chroot $rootfs /usr/sbin/update-rc.d -f ondemand remove

#    chroot $rootfs /bin/bash -c 'cd /etc/init; for f in $(ls u*.conf); do mv $f $f.orig; done'
#    chroot $rootfs /bin/bash -c 'cd /etc/init; for f in $(ls tty[2-9].conf); do mv $f $f.orig; done'
#    chroot $rootfs /bin/bash -c 'cd /etc/init; for f in $(ls plymouth*.conf); do mv $f $f.orig; done'
#    chroot $rootfs /bin/bash -c 'cd /etc/init; for f in $(ls hwclock*.conf); do mv $f $f.orig; done'
#    chroot $rootfs /bin/bash -c 'cd /etc/init; for f in $(ls module*.conf); do mv $f $f.orig; done'
mv $rootfs/sbin/hwclock $rootfs/sbin/hwclock.removed_by_lxc

    echo "Please change root-password !"
    echo "root:root" | chroot $rootfs chpasswd

sed -i -e '/start_udev/d' $rootfs/etc/rc.d/rc.sysinit

#rm -f $rootfs/etc/mtab
#ln -s /proc/mounts $rootfs/etc/mtab

mv $rootfs/dev $rootfs/dev.old
mkdir $rootfs/dev
test -e $rootfs/dev/null    || mknod -m 666 $rootfs/dev/null c 1 3
test -e $rootfs/dev/zero    || mknod -m 666 $rootfs/dev/zero c 1 5
test -e $rootfs/dev/random  || mknod -m 666 $rootfs/dev/random c 1 8
test -e $rootfs/dev/urandom || mknod -m 666 $rootfs/dev/urandom c 1 9
test -e $rootfs/dev/pts     || mkdir -m 755 $rootfs/dev/pts
test -e $rootfs/dev/shm     || mkdir -m 1777 $rootfs/dev/shm
test -e $rootfs/dev/tty     || mknod -m 666 $rootfs/dev/tty c 5 0
test -e $rootfs/dev/console || mknod -m 600 $rootfs/dev/console c 5 1
test -e $rootfs/dev/tty0    || mknod -m 666 $rootfs/dev/tty0 c 4 0
test -e $rootfs/dev/full    || mknod -m 666 $rootfs/dev/full c 1 7
test -e $rootfs/dev/initctl || mknod -m 600 $rootfs/dev/initctl p
test -e $rootfs/dev/ptmx    || mknod -m 666 $rootfs/dev/ptmx c 5 2

#test -e $rootfs/dev/pts/0 || mknod $rootfs/dev/pts/0 c 136 0
test -e $rootfs/dev/tty1 || mknod -m 666 $rootfs/dev/tty1 c 4 1
test -e $rootfs/dev/tty2 || mknod -m 666 $rootfs/dev/tty2 c 4 2
test -e $rootfs/dev/tty3 || mknod -m 666 $rootfs/dev/tty3 c 4 3
test -e $rootfs/dev/tty4 || mknod -m 666 $rootfs/dev/tty4 c 4 4
test -e $rootfs/dev/tty5 || mknod -m 666 $rootfs/dev/tty5 c 4 5
test -e $rootfs/dev/tty6 || mknod -m 666 $rootfs/dev/tty6 c 4 6

cp /etc/localtime $rootfs/etc/localtime
cp /etc/timezone $rootfs/etc/timezone

    return 0
}

download_centos()
{
    cache=$1
    arch=$2

    # check the mini centos was not already downloaded
    mkdir -p "$cache/partial-$arch"
    if [ $? -ne 0 ]; then
	echo "Failed to create '$cache/partial-$arch' directory"
	return 1
    fi

    # download a mini centos into a cache
    echo "Downloading centos minimal ..."
    #febootstrap $DISTRO $cache/partial-$arch
    rinsearch=`dpkg-architecture -qDEB_BUILD_ARCH`
    pkglist="openssh-server man zsh bind-utils openssh-clients php wget avahi"

    cat <<EOF > /var/cache/rinse/$DISTRO-$arch.before_post_install
echo "Rinse defines mirror=\$mirror in config"
server=\`echo \$mirror | cut -d/ -f3\`
echo "Disable mirrorlists"
sed -i -e "s/^mirrorlist=/#mirrorlist=/" $cache/partial-$arch/etc/yum.repos.d/CentOS-Base.repo
echo "Setup baseurl on server \$server"
sed -i -e "s!#baseurl=http://mirror.centos.org!baseurl=http://\$server!" $cache/partial-$arch/etc/yum.repos.d/CentOS-Base.repo
rm -f $cache/partial-$arch/etc/mtab
ln -s /proc/mounts $cache/partial-$arch/etc/mtab
EOF
    chmod 755 /var/cache/rinse/$DISTRO-$arch.before_post_install

    cat <<EOF > /var/cache/rinse/$DISTRO-$arch.after_post_install
chroot $cache/partial-$arch /bin/mount proc /proc -t proc
chroot $cache/partial-$arch /usr/bin/yum -y install $pkglist
chroot $cache/partial-$arch /bin/umount /proc
EOF
    chmod 755 /var/cache/rinse/$DISTRO-$arch.after_post_install

    rinse --config /etc/rinse/rinse.conf \
	--arch $rinsearch \
	--distribution $DISTRO \
	--before-post-install /var/cache/rinse/$DISTRO-$arch.before_post_install  \
	--after-post-install /var/cache/rinse/$DISTRO-$arch.after_post_install \
	--directory $cache/partial-$arch
    
    if [ $? -ne 0 ]; then
	echo "Failed to download the rootfs, aborting."
	return 1
    fi

    mv "$1/partial-$arch" "$1/rootfs-$arch"
    echo "Download complete."

    return 0
}

copy_centos()
{
    cache=$1
    arch=$2
    rootfs=$3

    # make a local copy of the minicentos
    echo -n "Copying rootfs to $rootfs ..."
    cp -a $cache/rootfs-$arch $rootfs || return 1
    return 0
}

install_centos()
{
    cache="/var/cache/lxc/centos"
    rootfs=$1
    mkdir -p /var/lock/subsys/
    (
	flock -n -x 200
	if [ $? -ne 0 ]; then
	    echo "Cache repository is busy."
	    return 1
	fi

	arch=$(arch)

	echo "Checking cache download in $cache/rootfs-$arch ... "
	if [ ! -e "$cache/rootfs-$arch" ]; then
	    download_centos $cache $arch
	    if [ $? -ne 0 ]; then
		echo "Failed to download 'centos base'"
		return 1
	    fi
	fi

	echo "Copy $cache/rootfs-$arch to $rootfs ... "
	copy_centos $cache $arch $rootfs
	if [ $? -ne 0 ]; then
	    echo "Failed to copy rootfs"
	    return 1
	fi

	return 0

	) 200>/var/lock/subsys/lxc

    return $?
}

copy_configuration()
{
    path=$1
    rootfs=$2
    name=$3

    cat <<EOF >> $path/config
# lxc.utsname = $name

lxc.tty = 4
lxc.pts = 1024
lxc.rootfs = $rootfs
# lxc.mount  = $path/fstab

# lxc.console = /dev/console

lxc.cgroup.devices.deny = a
# /dev/null and zero
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm
# consoles
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm
# /dev/{,u}random
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm
# rtc
lxc.cgroup.devices.allow = c 254:0 rwm

# mounts point
lxc.mount.entry=proc $rootfs/proc proc nodev,noexec,nosuid 0 0
lxc.mount.entry=devpts $rootfs/dev/pts devpts defaults 0 0
lxc.mount.entry=sysfs $rootfs/sys sysfs defaults  0 0
EOF

#    cat <<EOF > $path/fstab
#proc            $rootfs/proc         proc    nodev,noexec,nosuid 0 0
#devpts          $rootfs/dev/pts      devpts defaults 0 0
##sysfs           $rootfs/sys          sysfs defaults  0 0
#tmpfs           $rootfs/dev/shm      tmpfs defaults 0 0
#EOF

    if [ $? -ne 0 ]; then
	echo "Failed to add configuration"
	return 1
    fi

    return 0
}

clean()
{
    cache="/var/cache/lxc/centos"

    if [ ! -e $cache ]; then
	exit 0
    fi

    # lock, so we won't purge while someone is creating a repository
    (
	flock -n -x 200
	if [ $? != 0 ]; then
	    echo "Cache repository is busy."
	    exit 1
	fi

	echo -n "Purging the download cache..."
	rm --preserve-root --one-file-system -rf $cache && echo "Done." || exit 1
	exit 0

    ) 200>/var/lock/subsys/lxc
}

usage()
{
    cat <<EOF
$1 -h|--help -p|--path=<path> --clean
EOF
    return 0
}

options=$(getopt -o hp:n:c -l help,path:,name:,clean -- "$@")
if [ $? -ne 0 ]; then
    usage $(basename $0)
    exit 1
fi
eval set -- "$options"

while true
do
    case "$1" in
	-h|--help)      usage $0 && exit 0;;
	-p|--path)      path=$2; shift 2;;
	-n|--name)      name=$2; shift 2;;
	-c|--clean)     clean=$2; shift 2;;
	--)             shift 1; break ;;
        *)              break ;;
    esac
done

if [ ! -z "$clean" -a -z "$path" ]; then
    clean || exit 1
    exit 0
fi

type rinse
if [ $? -ne 0 ]; then
    echo "'rinse' command is missing"
    exit 1
fi

if [ -z "$path" ]; then
    echo "'path' parameter is required"
    exit 1
fi

if [ "$(id -u)" != "0" ]; then
    echo "This script should be run as 'root'"
    exit 1
fi

rootfs=$path/rootfs

install_centos $rootfs
if [ $? -ne 0 ]; then
    echo "failed to install centos"
    exit 1
fi

configure_centos $rootfs $name
if [ $? -ne 0 ]; then
    echo "failed to configure centos for a container"
    exit 1
fi

copy_configuration $path $rootfs $name
if [ $? -ne 0 ]; then
    echo "failed write configuration file"
    exit 1
fi

if [ ! -z $clean ]; then
    clean || exit 1
    exit 0
fi
